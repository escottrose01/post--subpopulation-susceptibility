!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=449)}([function(t,e,r){var n=r(1),o=r(23).f,i=r(25),a=r(17),u=r(114),c=r(90),s=r(73);t.exports=function(t,e){var r,f,l,h,p,d=t.target,v=t.global,g=t.stat;if(r=v?n:g?n[d]||u(d,{}):(n[d]||{}).prototype)for(f in e){if(h=e[f],l=t.noTargetGet?(p=o(r,f))&&p.value:r[f],!s(v?f:d+(g?".":"#")+f,t.forced)&&void 0!==l){if(typeof h==typeof l)continue;c(h,l)}(t.sham||l&&l.sham)&&i(h,"sham",!0),a(r,f,h,t)}}},function(t,e,r){(function(e){var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,r(195))},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(68),o=Function.prototype,i=o.bind,a=o.call,u=n&&i.bind(a,a);t.exports=n?function(t){return t&&u(t)}:function(t){return t&&function(){return a.apply(t,arguments)}}},function(t,e,r){var n=r(1),o=r(6),i=n.String,a=n.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not an object")}},function(t,e,r){var n=r(2);t.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,r){var n=r(9);t.exports=function(t){return"object"==typeof t?null!==t:n(t)}},function(t,e,r){var n=r(1),o=r(86),i=r(12),a=r(60),u=r(112),c=r(142),s=o("wks"),f=n.Symbol,l=f&&f.for,h=c?f:f&&f.withoutSetter||a;t.exports=function(t){if(!i(s,t)||!u&&"string"!=typeof s[t]){var e="Symbol."+t;u&&i(f,t)?s[t]=f[t]:s[t]=c&&l?l(e):h(e)}return s[t]}},function(t,e,r){var n=r(1),o=r(52),i=n.String;t.exports=function(t){if("Symbol"===o(t))throw TypeError("Cannot convert a Symbol value to a string");return i(t)}},function(t,e){t.exports=function(t){return"function"==typeof t}},function(t,e,r){"use strict";var n,o,i,a=r(128),u=r(5),c=r(1),s=r(9),f=r(6),l=r(12),h=r(52),p=r(70),d=r(25),v=r(17),g=r(13).f,y=r(29),m=r(37),b=r(39),x=r(7),w=r(60),E=c.Int8Array,S=E&&E.prototype,A=c.Uint8ClampedArray,O=A&&A.prototype,R=E&&m(E),I=S&&m(S),M=Object.prototype,T=c.TypeError,k=x("toStringTag"),j=w("TYPED_ARRAY_TAG"),P=w("TYPED_ARRAY_CONSTRUCTOR"),_=a&&!!b&&"Opera"!==h(c.opera),L=!1,D={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},N={BigInt64Array:8,BigUint64Array:8},C=function(t){if(!f(t))return!1;var e=h(t);return l(D,e)||l(N,e)};for(n in D)(i=(o=c[n])&&o.prototype)?d(i,P,o):_=!1;for(n in N)(i=(o=c[n])&&o.prototype)&&d(i,P,o);if((!_||!s(R)||R===Function.prototype)&&(R=function(){throw T("Incorrect invocation")},_))for(n in D)c[n]&&b(c[n],R);if((!_||!I||I===M)&&(I=R.prototype,_))for(n in D)c[n]&&b(c[n].prototype,I);if(_&&m(O)!==I&&b(O,I),u&&!l(I,k))for(n in L=!0,g(I,k,{get:function(){return f(this)?this[j]:void 0}}),D)c[n]&&d(c[n],j,n);t.exports={NATIVE_ARRAY_BUFFER_VIEWS:_,TYPED_ARRAY_CONSTRUCTOR:P,TYPED_ARRAY_TAG:L&&j,aTypedArray:function(t){if(C(t))return t;throw T("Target is not a typed array")},aTypedArrayConstructor:function(t){if(s(t)&&(!b||y(R,t)))return t;throw T(p(t)+" is not a typed array constructor")},exportTypedArrayMethod:function(t,e,r,n){if(u){if(r)for(var o in D){var i=c[o];if(i&&l(i.prototype,t))try{delete i.prototype[t]}catch(r){try{i.prototype[t]=e}catch(t){}}}I[t]&&!r||v(I,t,r?e:_&&S[t]||e,n)}},exportTypedArrayStaticMethod:function(t,e,r){var n,o;if(u){if(b){if(r)for(n in D)if((o=c[n])&&l(o,t))try{delete o[t]}catch(t){}if(R[t]&&!r)return;try{return v(R,t,r?e:_&&R[t]||e)}catch(t){}}for(n in D)!(o=c[n])||o[t]&&!r||v(o,t,e)}},isView:function(t){if(!f(t))return!1;var e=h(t);return"DataView"===e||l(D,e)||l(N,e)},isTypedArray:C,TypedArray:R,TypedArrayPrototype:I}},function(t,e,r){var n=r(68),o=Function.prototype.call;t.exports=n?o.bind(o):function(){return o.apply(o,arguments)}},function(t,e,r){var n=r(3),o=r(14),i=n({}.hasOwnProperty);t.exports=Object.hasOwn||function(t,e){return i(o(t),e)}},function(t,e,r){var n=r(1),o=r(5),i=r(144),a=r(145),u=r(4),c=r(49),s=n.TypeError,f=Object.defineProperty,l=Object.getOwnPropertyDescriptor;e.f=o?a?function(t,e,r){if(u(t),e=c(e),u(r),"function"==typeof t&&"prototype"===e&&"value"in r&&"writable"in r&&!r.writable){var n=l(t,e);n&&n.writable&&(t[e]=r.value,r={configurable:"configurable"in r?r.configurable:n.configurable,enumerable:"enumerable"in r?r.enumerable:n.enumerable,writable:!1})}return f(t,e,r)}:f:function(t,e,r){if(u(t),e=c(e),u(r),i)try{return f(t,e,r)}catch(t){}if("get"in r||"set"in r)throw s("Accessors not supported");return"value"in r&&(t[e]=r.value),t}},function(t,e,r){var n=r(1),o=r(18),i=n.Object;t.exports=function(t){return i(o(t))}},function(t,e,r){var n=r(30);t.exports=function(t){return n(t.length)}},function(t,e,r){var n=r(1),o=r(9),i=function(t){return o(t)?t:void 0};t.exports=function(t,e){return arguments.length<2?i(n[t]):n[t]&&n[t][e]}},function(t,e,r){var n=r(1),o=r(9),i=r(12),a=r(25),u=r(114),c=r(88),s=r(19),f=r(61).CONFIGURABLE,l=s.get,h=s.enforce,p=String(String).split("String");(t.exports=function(t,e,r,c){var s,l=!!c&&!!c.unsafe,d=!!c&&!!c.enumerable,v=!!c&&!!c.noTargetGet,g=c&&void 0!==c.name?c.name:e;o(r)&&("Symbol("===String(g).slice(0,7)&&(g="["+String(g).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(r,"name")||f&&r.name!==g)&&a(r,"name",g),(s=h(r)).source||(s.source=p.join("string"==typeof g?g:""))),t!==n?(l?!v&&t[e]&&(d=!0):delete t[e],d?t[e]=r:a(t,e,r)):d?t[e]=r:u(e,r)})(Function.prototype,"toString",(function(){return o(this)&&l(this).source||c(this)}))},function(t,e,r){var n=r(1).TypeError;t.exports=function(t){if(null==t)throw n("Can't call method on "+t);return t}},function(t,e,r){var n,o,i,a=r(146),u=r(1),c=r(3),s=r(6),f=r(25),l=r(12),h=r(113),p=r(89),d=r(71),v=u.TypeError,g=u.WeakMap;if(a||h.state){var y=h.state||(h.state=new g),m=c(y.get),b=c(y.has),x=c(y.set);n=function(t,e){if(b(y,t))throw new v("Object already initialized");return e.facade=t,x(y,t,e),e},o=function(t){return m(y,t)||{}},i=function(t){return b(y,t)}}else{var w=p("state");d[w]=!0,n=function(t,e){if(l(t,w))throw new v("Object already initialized");return e.facade=t,f(t,w,e),e},o=function(t){return l(t,w)?t[w]:{}},i=function(t){return l(t,w)}}t.exports={set:n,get:o,has:i,enforce:function(t){return i(t)?o(t):n(t,{})},getterFor:function(t){return function(e){var r;if(!s(e)||(r=o(e)).type!==t)throw v("Incompatible receiver, "+t+" required");return r}}}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){var e=+t;return e!=e||0===e?0:(e>0?n:r)(e)}},function(t,e){t.exports=!1},function(t,e,r){var n=r(38),o=r(3),i=r(69),a=r(14),u=r(15),c=r(77),s=o([].push),f=function(t){var e=1==t,r=2==t,o=3==t,f=4==t,l=6==t,h=7==t,p=5==t||l;return function(d,v,g,y){for(var m,b,x=a(d),w=i(x),E=n(v,g),S=u(w),A=0,O=y||c,R=e?O(d,S):r||h?O(d,0):void 0;S>A;A++)if((p||A in w)&&(b=E(m=w[A],A,x),t))if(e)R[A]=b;else if(b)switch(t){case 3:return!0;case 5:return m;case 6:return A;case 2:s(R,m)}else switch(t){case 4:return!1;case 7:s(R,m)}return l?-1:o||f?f:R}};t.exports={forEach:f(0),map:f(1),filter:f(2),some:f(3),every:f(4),find:f(5),findIndex:f(6),filterReject:f(7)}},function(t,e,r){var n=r(5),o=r(11),i=r(85),a=r(35),u=r(26),c=r(49),s=r(12),f=r(144),l=Object.getOwnPropertyDescriptor;e.f=n?l:function(t,e){if(t=u(t),e=c(e),f)try{return l(t,e)}catch(t){}if(s(t,e))return a(!o(i.f,t,e),t[e])}},function(t,e,r){var n=r(1),o=r(9),i=r(70),a=n.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a function")}},function(t,e,r){var n=r(5),o=r(13),i=r(35);t.exports=n?function(t,e,r){return o.f(t,e,i(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(69),o=r(18);t.exports=function(t){return n(o(t))}},function(t,e,r){var n=r(150),o=r(12),i=r(149),a=r(13).f;t.exports=function(t){var e=n.Symbol||(n.Symbol={});o(e,t)||a(e,t,{value:i.f(t)})}},function(t,e,r){var n=r(3),o=n({}.toString),i=n("".slice);t.exports=function(t){return i(o(t),8,-1)}},function(t,e,r){var n=r(3);t.exports=n({}.isPrototypeOf)},function(t,e,r){var n=r(20),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e,r){var n=r(68),o=Function.prototype,i=o.apply,a=o.call;t.exports="object"==typeof Reflect&&Reflect.apply||(n?a.bind(i):function(){return a.apply(i,arguments)})},function(t,e,r){var n,o=r(4),i=r(74),a=r(116),u=r(71),c=r(148),s=r(87),f=r(89),l=f("IE_PROTO"),h=function(){},p=function(t){return"<script>"+t+"<\/script>"},d=function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e},v=function(){try{n=new ActiveXObject("htmlfile")}catch(t){}var t,e;v="undefined"!=typeof document?document.domain&&n?d(n):((e=s("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F):d(n);for(var r=a.length;r--;)delete v.prototype[a[r]];return v()};u[l]=!0,t.exports=Object.create||function(t,e){var r;return null!==t?(h.prototype=o(t),r=new h,h.prototype=null,r[l]=t):r=v(),void 0===e?r:i.f(r,e)}},function(t,e,r){var n=r(3),o=r(18),i=r(8),a=/"/g,u=n("".replace);t.exports=function(t,e,r,n){var c=i(o(t)),s="<"+e;return""!==r&&(s+=" "+r+'="'+u(i(n),a,"&quot;")+'"'),s+">"+c+"</"+e+">"}},function(t,e,r){var n=r(2);t.exports=function(t){return n((function(){var e=""[t]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(13).f,o=r(12),i=r(7)("toStringTag");t.exports=function(t,e,r){t&&!r&&(t=t.prototype),t&&!o(t,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e,r){var n=r(1),o=r(12),i=r(9),a=r(14),u=r(89),c=r(121),s=u("IE_PROTO"),f=n.Object,l=f.prototype;t.exports=c?f.getPrototypeOf:function(t){var e=a(t);if(o(e,s))return e[s];var r=e.constructor;return i(r)&&e instanceof r?r.prototype:e instanceof f?l:null}},function(t,e,r){var n=r(3),o=r(24),i=r(68),a=n(n.bind);t.exports=function(t,e){return o(t),void 0===e?t:i?a(t,e):function(){return t.apply(e,arguments)}}},function(t,e,r){var n=r(3),o=r(4),i=r(152);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,r={};try{(t=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return o(r),i(n),e?t(r,n):r.__proto__=n,r}}():void 0)},function(t,e,r){var n=r(1),o=r(29),i=n.TypeError;t.exports=function(t,e){if(o(e,t))return t;throw i("Incorrect invocation")}},function(t,e,r){var n=r(16);t.exports=n("navigator","userAgent")||""},function(t,e,r){var n=r(24);t.exports=function(t,e){var r=t[e];return null==r?void 0:n(r)}},function(t,e,r){var n=r(20),o=Math.max,i=Math.min;t.exports=function(t,e){var r=n(t);return r<0?o(r+e,0):i(r,e)}},function(t,e,r){"use strict";var n=r(49),o=r(13),i=r(35);t.exports=function(t,e,r){var a=n(e);a in t?o.f(t,a,i(0,r)):t[a]=r}},function(t,e,r){var n=r(1),o=r(38),i=r(11),a=r(4),u=r(70),c=r(122),s=r(15),f=r(29),l=r(92),h=r(80),p=r(155),d=n.TypeError,v=function(t,e){this.stopped=t,this.result=e},g=v.prototype;t.exports=function(t,e,r){var n,y,m,b,x,w,E,S=r&&r.that,A=!(!r||!r.AS_ENTRIES),O=!(!r||!r.IS_ITERATOR),R=!(!r||!r.INTERRUPTED),I=o(e,S),M=function(t){return n&&p(n,"normal",t),new v(!0,t)},T=function(t){return A?(a(t),R?I(t[0],t[1],M):I(t[0],t[1])):R?I(t,M):I(t)};if(O)n=t;else{if(!(y=h(t)))throw d(u(t)+" is not iterable");if(c(y)){for(m=0,b=s(t);b>m;m++)if((x=T(t[m]))&&f(g,x))return x;return new v(!1)}n=l(t,y)}for(w=n.next;!(E=i(w,n)).done;){try{x=T(E.value)}catch(t){p(n,"throw",t)}if("object"==typeof x&&x&&f(g,x))return x}return new v(!1)}},function(t,e,r){var n=r(7),o=r(32),i=r(13),a=n("unscopables"),u=Array.prototype;null==u[a]&&i.f(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},function(t,e,r){"use strict";var n=r(2);t.exports=function(t,e){var r=[][t];return!!r&&n((function(){r.call(null,e||function(){return 1},1)}))}},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(11),a=r(5),u=r(141),c=r(10),s=r(96),f=r(40),l=r(35),h=r(25),p=r(133),d=r(30),v=r(164),g=r(183),y=r(49),m=r(12),b=r(52),x=r(6),w=r(59),E=r(32),S=r(29),A=r(39),O=r(51).f,R=r(184),I=r(22).forEach,M=r(64),T=r(13),k=r(23),j=r(19),P=r(63),_=j.get,L=j.set,D=T.f,N=k.f,C=Math.round,U=o.RangeError,$=s.ArrayBuffer,F=$.prototype,B=s.DataView,z=c.NATIVE_ARRAY_BUFFER_VIEWS,W=c.TYPED_ARRAY_CONSTRUCTOR,q=c.TYPED_ARRAY_TAG,G=c.TypedArray,V=c.TypedArrayPrototype,Y=c.aTypedArrayConstructor,H=c.isTypedArray,K=function(t,e){Y(t);for(var r=0,n=e.length,o=new t(n);n>r;)o[r]=e[r++];return o},J=function(t,e){D(t,e,{get:function(){return _(this)[e]}})},X=function(t){var e;return S(F,t)||"ArrayBuffer"==(e=b(t))||"SharedArrayBuffer"==e},Q=function(t,e){return H(t)&&!w(e)&&e in t&&p(+e)&&e>=0},Z=function(t,e){return e=y(e),Q(t,e)?l(2,t[e]):N(t,e)},tt=function(t,e,r){return e=y(e),!(Q(t,e)&&x(r)&&m(r,"value"))||m(r,"get")||m(r,"set")||r.configurable||m(r,"writable")&&!r.writable||m(r,"enumerable")&&!r.enumerable?D(t,e,r):(t[e]=r.value,t)};a?(z||(k.f=Z,T.f=tt,J(V,"buffer"),J(V,"byteOffset"),J(V,"byteLength"),J(V,"length")),n({target:"Object",stat:!0,forced:!z},{getOwnPropertyDescriptor:Z,defineProperty:tt}),t.exports=function(t,e,r){var a=t.match(/\d+$/)[0]/8,c=t+(r?"Clamped":"")+"Array",s="get"+t,l="set"+t,p=o[c],y=p,m=y&&y.prototype,b={},w=function(t,e){D(t,e,{get:function(){return function(t,e){var r=_(t);return r.view[s](e*a+r.byteOffset,!0)}(this,e)},set:function(t){return function(t,e,n){var o=_(t);r&&(n=(n=C(n))<0?0:n>255?255:255&n),o.view[l](e*a+o.byteOffset,n,!0)}(this,e,t)},enumerable:!0})};z?u&&(y=e((function(t,e,r,n){return f(t,m),P(x(e)?X(e)?void 0!==n?new p(e,g(r,a),n):void 0!==r?new p(e,g(r,a)):new p(e):H(e)?K(y,e):i(R,y,e):new p(v(e)),t,y)})),A&&A(y,G),I(O(p),(function(t){t in y||h(y,t,p[t])})),y.prototype=m):(y=e((function(t,e,r,n){f(t,m);var o,u,c,s=0,l=0;if(x(e)){if(!X(e))return H(e)?K(y,e):i(R,y,e);o=e,l=g(r,a);var h=e.byteLength;if(void 0===n){if(h%a)throw U("Wrong length");if((u=h-l)<0)throw U("Wrong length")}else if((u=d(n)*a)+l>h)throw U("Wrong length");c=u/a}else c=v(e),o=new $(u=c*a);for(L(t,{buffer:o,byteOffset:l,byteLength:u,length:c,view:new B(o)});s<c;)w(t,s++)})),A&&A(y,G),m=y.prototype=E(V)),m.constructor!==y&&h(m,"constructor",y),h(m,W,y),q&&h(m,q,c),b[c]=y,n({global:!0,forced:y!=p,sham:!z},b),"BYTES_PER_ELEMENT"in y||h(y,"BYTES_PER_ELEMENT",a),"BYTES_PER_ELEMENT"in m||h(m,"BYTES_PER_ELEMENT",a),M(c)}):t.exports=function(){}},function(t,e,r){var n=r(111),o=r(59);t.exports=function(t){var e=n(t,"string");return o(e)?e:e+""}},function(t,e,r){var n,o,i=r(1),a=r(41),u=i.process,c=i.Deno,s=u&&u.versions||c&&c.version,f=s&&s.v8;f&&(o=(n=f.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),t.exports=o},function(t,e,r){var n=r(147),o=r(116).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){var n=r(1),o=r(118),i=r(9),a=r(28),u=r(7)("toStringTag"),c=n.Object,s="Arguments"==a(function(){return arguments}());t.exports=o?a:function(t){var e,r,n;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=c(t),u))?r:s?a(e):"Object"==(n=a(e))&&i(e.callee)?"Arguments":n}},function(t,e,r){var n=r(1).TypeError;t.exports=function(t,e){if(t<e)throw n("Not enough arguments");return t}},function(t,e,r){var n=r(28);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,r){var n=r(3);t.exports=n([].slice)},function(t,e,r){var n=r(28),o=r(1);t.exports="process"==n(o.process)},function(t,e,r){var n=r(0),o=r(3),i=r(71),a=r(6),u=r(12),c=r(13).f,s=r(51),f=r(119),l=r(99),h=r(60),p=r(82),d=!1,v=h("meta"),g=0,y=function(t){c(t,v,{value:{objectID:"O"+g++,weakData:{}}})},m=t.exports={enable:function(){m.enable=function(){},d=!0;var t=s.f,e=o([].splice),r={};r[v]=1,t(r).length&&(s.f=function(r){for(var n=t(r),o=0,i=n.length;o<i;o++)if(n[o]===v){e(n,o,1);break}return n},n({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:f.f}))},fastKey:function(t,e){if(!a(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!u(t,v)){if(!l(t))return"F";if(!e)return"E";y(t)}return t[v].objectID},getWeakData:function(t,e){if(!u(t,v)){if(!l(t))return!0;if(!e)return!1;y(t)}return t[v].weakData},onFreeze:function(t){return p&&d&&l(t)&&!u(t,v)&&y(t),t}};i[v]=!0},function(t,e,r){"use strict";var n=r(4);t.exports=function(){var t=n(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.dotAll&&(e+="s"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e,r){var n=r(1),o=r(16),i=r(9),a=r(29),u=r(142),c=n.Object;t.exports=u?function(t){return"symbol"==typeof t}:function(t){var e=o("Symbol");return i(e)&&a(e.prototype,c(t))}},function(t,e,r){var n=r(3),o=0,i=Math.random(),a=n(1..toString);t.exports=function(t){return"Symbol("+(void 0===t?"":t)+")_"+a(++o+i,36)}},function(t,e,r){var n=r(5),o=r(12),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,u=o(i,"name"),c=u&&"something"===function(){}.name,s=u&&(!n||n&&a(i,"name").configurable);t.exports={EXISTS:u,PROPER:c,CONFIGURABLE:s}},function(t,e,r){var n=r(3),o=r(2),i=r(9),a=r(52),u=r(16),c=r(88),s=function(){},f=[],l=u("Reflect","construct"),h=/^\s*(?:class|function)\b/,p=n(h.exec),d=!h.exec(s),v=function(t){if(!i(t))return!1;try{return l(s,f,t),!0}catch(t){return!1}},g=function(t){if(!i(t))return!1;switch(a(t)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return d||!!p(h,c(t))}catch(t){return!0}};g.sham=!0,t.exports=!l||o((function(){var t;return v(v.call)||!v(Object)||!v((function(){t=!0}))||t}))?g:v},function(t,e,r){var n=r(9),o=r(6),i=r(39);t.exports=function(t,e,r){var a,u;return i&&n(a=e.constructor)&&a!==r&&o(u=a.prototype)&&u!==r.prototype&&i(t,u),t}},function(t,e,r){"use strict";var n=r(16),o=r(13),i=r(7),a=r(5),u=i("species");t.exports=function(t){var e=n(t),r=o.f;a&&e&&!e[u]&&r(e,u,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(17);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},function(t,e,r){var n=r(4),o=r(129),i=r(7)("species");t.exports=function(t,e){var r,a=n(t).constructor;return void 0===a||null==(r=n(a)[i])?e:o(r)}},function(t,e,r){var n=r(3),o=r(18),i=r(8),a=r(102),u=n("".replace),c="["+a+"]",s=RegExp("^"+c+c+"*"),f=RegExp(c+c+"*$"),l=function(t){return function(e){var r=i(o(e));return 1&t&&(r=u(r,s,"")),2&t&&(r=u(r,f,"")),r}};t.exports={start:l(1),end:l(2),trim:l(3)}},function(t,e,r){var n=r(2);t.exports=!n((function(){var t=function(){}.bind();return"function"!=typeof t||t.hasOwnProperty("prototype")}))},function(t,e,r){var n=r(1),o=r(3),i=r(2),a=r(28),u=n.Object,c=o("".split);t.exports=i((function(){return!u("z").propertyIsEnumerable(0)}))?function(t){return"String"==a(t)?c(t,""):u(t)}:u},function(t,e,r){var n=r(1).String;t.exports=function(t){try{return n(t)}catch(t){return"Object"}}},function(t,e){t.exports={}},function(t,e,r){var n=r(26),o=r(43),i=r(15),a=function(t){return function(e,r,a){var u,c=n(e),s=i(c),f=o(a,s);if(t&&r!=r){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===r)return t||f||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},function(t,e,r){var n=r(2),o=r(9),i=/#|\.prototype\./,a=function(t,e){var r=c[u(t)];return r==f||r!=s&&(o(e)?n(e):!!e)},u=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},c=a.data={},s=a.NATIVE="N",f=a.POLYFILL="P";t.exports=a},function(t,e,r){var n=r(5),o=r(145),i=r(13),a=r(4),u=r(26),c=r(75);e.f=n&&!o?Object.defineProperties:function(t,e){a(t);for(var r,n=u(e),o=c(e),s=o.length,f=0;s>f;)i.f(t,r=o[f++],n[r]);return t}},function(t,e,r){var n=r(147),o=r(116);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){var n=r(1),o=r(43),i=r(15),a=r(44),u=n.Array,c=Math.max;t.exports=function(t,e,r){for(var n=i(t),s=o(e,n),f=o(void 0===r?n:r,n),l=u(c(f-s,0)),h=0;s<f;s++,h++)a(l,h,t[s]);return l.length=h,l}},function(t,e,r){var n=r(196);t.exports=function(t,e){return new(n(t))(0===e?0:e)}},function(t,e,r){var n=r(8);t.exports=function(t,e){return void 0===t?arguments.length<2?"":e:n(t)}},function(t,e){t.exports={}},function(t,e,r){var n=r(52),o=r(42),i=r(79),a=r(7)("iterator");t.exports=function(t){if(null!=t)return o(t,a)||o(t,"@@iterator")||i[n(t)]}},function(t,e,r){var n=r(2),o=r(7),i=r(50),a=o("species");t.exports=function(t){return i>=51||!n((function(){var e=[];return(e.constructor={})[a]=function(){return{foo:1}},1!==e[t](Boolean).foo}))}},function(t,e,r){var n=r(2);t.exports=!n((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(t,e,r){var n=r(6),o=r(28),i=r(7)("match");t.exports=function(t){var e;return n(t)&&(void 0!==(e=t[i])?!!e:"RegExp"==o(t))}},function(t,e,r){var n=r(1),o=r(11),i=r(4),a=r(9),u=r(28),c=r(106),s=n.TypeError;t.exports=function(t,e){var r=t.exec;if(a(r)){var n=o(r,t,e);return null!==n&&i(n),n}if("RegExp"===u(t))return o(c,t,e);throw s("RegExp#exec called on incompatible receiver")}},function(t,e,r){"use strict";var n={}.propertyIsEnumerable,o=Object.getOwnPropertyDescriptor,i=o&&!n.call({1:2},1);e.f=i?function(t){var e=o(this,t);return!!e&&e.enumerable}:n},function(t,e,r){var n=r(21),o=r(113);(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.21.1",mode:n?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.21.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(t,e,r){var n=r(1),o=r(6),i=n.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},function(t,e,r){var n=r(3),o=r(9),i=r(113),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(t){return a(t)}),t.exports=i.inspectSource},function(t,e,r){var n=r(86),o=r(60),i=n("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,r){var n=r(12),o=r(115),i=r(23),a=r(13);t.exports=function(t,e,r){for(var u=o(e),c=a.f,s=i.f,f=0;f<u.length;f++){var l=u[f];n(t,l)||r&&n(r,l)||c(t,l,s(e,l))}}},function(t,e,r){var n=r(3)("".replace),o=String(Error("zxcasd").stack),i=/\n\s*at [^:]*:[^\n]*/,a=i.test(o);t.exports=function(t,e){if(a&&"string"==typeof t)for(;e--;)t=n(t,i,"");return t}},function(t,e,r){var n=r(1),o=r(11),i=r(24),a=r(4),u=r(70),c=r(80),s=n.TypeError;t.exports=function(t,e){var r=arguments.length<2?c(t):e;if(i(r))return a(o(r,t));throw s(u(t)+" is not iterable")}},function(t,e,r){var n=r(7)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},t(i)}catch(t){}return r}},function(t,e,r){"use strict";var n=r(26),o=r(46),i=r(79),a=r(19),u=r(13).f,c=r(124),s=r(21),f=r(5),l=a.set,h=a.getterFor("Array Iterator");t.exports=c(Array,"Array",(function(t,e){l(this,{type:"Array Iterator",target:n(t),index:0,kind:e})}),(function(){var t=h(this),e=t.target,r=t.kind,n=t.index++;return!e||n>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:e[n],done:!1}:{value:[n,e[n]],done:!1}}),"values");var p=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!s&&f&&"values"!==p.name)try{u(p,"name",{value:"values"})}catch(t){}},function(t,e,r){var n=r(1),o=r(24),i=r(14),a=r(69),u=r(15),c=n.TypeError,s=function(t){return function(e,r,n,s){o(r);var f=i(e),l=a(f),h=u(f),p=t?h-1:0,d=t?-1:1;if(n<2)for(;;){if(p in l){s=l[p],p+=d;break}if(p+=d,t?p<0:h<=p)throw c("Reduce of empty array with no initial value")}for(;t?p>=0:h>p;p+=d)p in l&&(s=r(s,l[p],p,f));return s}};t.exports={left:s(!1),right:s(!0)}},function(t,e,r){"use strict";var n=r(1),o=r(3),i=r(5),a=r(128),u=r(61),c=r(25),s=r(65),f=r(2),l=r(40),h=r(20),p=r(30),d=r(164),v=r(246),g=r(37),y=r(39),m=r(51).f,b=r(13).f,x=r(123),w=r(76),E=r(36),S=r(19),A=u.PROPER,O=u.CONFIGURABLE,R=S.get,I=S.set,M=n.ArrayBuffer,T=M,k=T&&T.prototype,j=n.DataView,P=j&&j.prototype,_=Object.prototype,L=n.Array,D=n.RangeError,N=o(x),C=o([].reverse),U=v.pack,$=v.unpack,F=function(t){return[255&t]},B=function(t){return[255&t,t>>8&255]},z=function(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]},W=function(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]},q=function(t){return U(t,23,4)},G=function(t){return U(t,52,8)},V=function(t,e){b(t.prototype,e,{get:function(){return R(this)[e]}})},Y=function(t,e,r,n){var o=d(r),i=R(t);if(o+e>i.byteLength)throw D("Wrong index");var a=R(i.buffer).bytes,u=o+i.byteOffset,c=w(a,u,u+e);return n?c:C(c)},H=function(t,e,r,n,o,i){var a=d(r),u=R(t);if(a+e>u.byteLength)throw D("Wrong index");for(var c=R(u.buffer).bytes,s=a+u.byteOffset,f=n(+o),l=0;l<e;l++)c[s+l]=f[i?l:e-l-1]};if(a){var K=A&&"ArrayBuffer"!==M.name;if(f((function(){M(1)}))&&f((function(){new M(-1)}))&&!f((function(){return new M,new M(1.5),new M(NaN),K&&!O})))K&&O&&c(M,"name","ArrayBuffer");else{(T=function(t){return l(this,k),new M(d(t))}).prototype=k;for(var J,X=m(M),Q=0;X.length>Q;)(J=X[Q++])in T||c(T,J,M[J]);k.constructor=T}y&&g(P)!==_&&y(P,_);var Z=new j(new T(2)),tt=o(P.setInt8);Z.setInt8(0,2147483648),Z.setInt8(1,2147483649),!Z.getInt8(0)&&Z.getInt8(1)||s(P,{setInt8:function(t,e){tt(this,t,e<<24>>24)},setUint8:function(t,e){tt(this,t,e<<24>>24)}},{unsafe:!0})}else k=(T=function(t){l(this,k);var e=d(t);I(this,{bytes:N(L(e),0),byteLength:e}),i||(this.byteLength=e)}).prototype,P=(j=function(t,e,r){l(this,P),l(t,k);var n=R(t).byteLength,o=h(e);if(o<0||o>n)throw D("Wrong offset");if(o+(r=void 0===r?n-o:p(r))>n)throw D("Wrong length");I(this,{buffer:t,byteLength:r,byteOffset:o}),i||(this.buffer=t,this.byteLength=r,this.byteOffset=o)}).prototype,i&&(V(T,"byteLength"),V(j,"buffer"),V(j,"byteLength"),V(j,"byteOffset")),s(P,{getInt8:function(t){return Y(this,1,t)[0]<<24>>24},getUint8:function(t){return Y(this,1,t)[0]},getInt16:function(t){var e=Y(this,2,t,arguments.length>1?arguments[1]:void 0);return(e[1]<<8|e[0])<<16>>16},getUint16:function(t){var e=Y(this,2,t,arguments.length>1?arguments[1]:void 0);return e[1]<<8|e[0]},getInt32:function(t){return W(Y(this,4,t,arguments.length>1?arguments[1]:void 0))},getUint32:function(t){return W(Y(this,4,t,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(t){return $(Y(this,4,t,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(t){return $(Y(this,8,t,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(t,e){H(this,1,t,F,e)},setUint8:function(t,e){H(this,1,t,F,e)},setInt16:function(t,e){H(this,2,t,B,e,arguments.length>2?arguments[2]:void 0)},setUint16:function(t,e){H(this,2,t,B,e,arguments.length>2?arguments[2]:void 0)},setInt32:function(t,e){H(this,4,t,z,e,arguments.length>2?arguments[2]:void 0)},setUint32:function(t,e){H(this,4,t,z,e,arguments.length>2?arguments[2]:void 0)},setFloat32:function(t,e){H(this,4,t,q,e,arguments.length>2?arguments[2]:void 0)},setFloat64:function(t,e){H(this,8,t,G,e,arguments.length>2?arguments[2]:void 0)}});E(T,"ArrayBuffer"),E(j,"DataView"),t.exports={ArrayBuffer:T,DataView:j}},function(t,e,r){"use strict";var n=r(1),o=r(20),i=r(8),a=r(18),u=n.RangeError;t.exports=function(t){var e=i(a(this)),r="",n=o(t);if(n<0||n==1/0)throw u("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(e+=e))1&n&&(r+=e);return r}},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(3),a=r(73),u=r(17),c=r(57),s=r(45),f=r(40),l=r(9),h=r(6),p=r(2),d=r(93),v=r(36),g=r(63);t.exports=function(t,e,r){var y=-1!==t.indexOf("Map"),m=-1!==t.indexOf("Weak"),b=y?"set":"add",x=o[t],w=x&&x.prototype,E=x,S={},A=function(t){var e=i(w[t]);u(w,t,"add"==t?function(t){return e(this,0===t?0:t),this}:"delete"==t?function(t){return!(m&&!h(t))&&e(this,0===t?0:t)}:"get"==t?function(t){return m&&!h(t)?void 0:e(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!h(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this})};if(a(t,!l(x)||!(m||w.forEach&&!p((function(){(new x).entries().next()})))))E=r.getConstructor(e,t,y,b),c.enable();else if(a(t,!0)){var O=new E,R=O[b](m?{}:-0,1)!=O,I=p((function(){O.has(1)})),M=d((function(t){new x(t)})),T=!m&&p((function(){for(var t=new x,e=5;e--;)t[b](e,e);return!t.has(-0)}));M||((E=e((function(t,e){f(t,w);var r=g(new x,t,E);return null!=e&&s(e,r[b],{that:r,AS_ENTRIES:y}),r}))).prototype=w,w.constructor=E),(I||T)&&(A("delete"),A("has"),y&&A("get")),(T||R)&&A(b),m&&w.clear&&delete w.clear}return S[t]=E,n({global:!0,forced:E!=x},S),v(E,t),m||r.setStrong(E,t,y),E}},function(t,e,r){var n=r(2),o=r(6),i=r(28),a=r(131),u=Object.isExtensible,c=n((function(){u(1)}));t.exports=c||a?function(t){return!!o(t)&&((!a||"ArrayBuffer"!=i(t))&&(!u||u(t)))}:u},function(t,e){var r=Math.expm1,n=Math.exp;t.exports=!r||r(10)>22025.465794806718||r(10)<22025.465794806718||-2e-17!=r(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:n(t)-1}:r},function(t,e,r){var n=r(3);t.exports=n(1..valueOf)},function(t,e){t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(t,e,r){"use strict";var n=r(21),o=r(1),i=r(2),a=r(127);t.exports=n||!i((function(){if(!(a&&a<535)){var t=Math.random();__defineSetter__.call(null,t,(function(){})),delete o[t]}}))},function(t,e,r){"use strict";var n=r(24),o=function(t){var e,r;this.promise=new t((function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n})),this.resolve=n(e),this.reject=n(r)};t.exports.f=function(t){return new o(t)}},function(t,e,r){var n=r(2),o=r(1).RegExp,i=n((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),a=i||n((function(){return!o("a","y").sticky})),u=i||n((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}));t.exports={BROKEN_CARET:u,MISSED_STICKY:a,UNSUPPORTED_Y:i}},function(t,e,r){"use strict";var n,o,i=r(11),a=r(3),u=r(8),c=r(58),s=r(105),f=r(86),l=r(32),h=r(19).get,p=r(136),d=r(179),v=f("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,y=g,m=a("".charAt),b=a("".indexOf),x=a("".replace),w=a("".slice),E=(o=/b*/g,i(g,n=/a/,"a"),i(g,o,"a"),0!==n.lastIndex||0!==o.lastIndex),S=s.BROKEN_CARET,A=void 0!==/()??/.exec("")[1];(E||A||S||p||d)&&(y=function(t){var e,r,n,o,a,s,f,p=this,d=h(p),O=u(t),R=d.raw;if(R)return R.lastIndex=p.lastIndex,e=i(y,R,O),p.lastIndex=R.lastIndex,e;var I=d.groups,M=S&&p.sticky,T=i(c,p),k=p.source,j=0,P=O;if(M&&(T=x(T,"y",""),-1===b(T,"g")&&(T+="g"),P=w(O,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==m(O,p.lastIndex-1))&&(k="(?: "+k+")",P=" "+P,j++),r=new RegExp("^(?:"+k+")",T)),A&&(r=new RegExp("^"+k+"$(?!\\s)",T)),E&&(n=p.lastIndex),o=i(g,M?r:p,P),M?o?(o.input=w(o.input,j),o[0]=w(o[0],j),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:E&&o&&(p.lastIndex=p.global?o.index+o[0].length:n),A&&o&&o.length>1&&i(v,o[0],r,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&I)for(o.groups=s=l(null),a=0;a<I.length;a++)s[(f=I[a])[0]]=o[f[1]];return o}),t.exports=y},function(t,e,r){var n=r(3),o=r(20),i=r(8),a=r(18),u=n("".charAt),c=n("".charCodeAt),s=n("".slice),f=function(t){return function(e,r){var n,f,l=i(a(e)),h=o(r),p=l.length;return h<0||h>=p?t?"":void 0:(n=c(l,h))<55296||n>56319||h+1===p||(f=c(l,h+1))<56320||f>57343?t?u(l,h):n:t?s(l,h,h+2):f-56320+(n-55296<<10)+65536}};t.exports={codeAt:f(!1),charAt:f(!0)}},function(t,e,r){"use strict";r(137);var n=r(3),o=r(17),i=r(106),a=r(2),u=r(7),c=r(25),s=u("species"),f=RegExp.prototype;t.exports=function(t,e,r,l){var h=u(t),p=!a((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),d=p&&!a((function(){var e=!1,r=/a/;return"split"===t&&((r={}).constructor={},r.constructor[s]=function(){return r},r.flags="",r[h]=/./[h]),r.exec=function(){return e=!0,null},r[h](""),!e}));if(!p||!d||r){var v=n(/./[h]),g=e(h,""[t],(function(t,e,r,o,a){var u=n(t),c=e.exec;return c===i||c===f.exec?p&&!a?{done:!0,value:v(e,r,o)}:{done:!0,value:u(r,e,o)}:{done:!1}}));o(String.prototype,t,g[0]),o(f,h,g[1])}l&&c(f[h],"sham",!0)}},function(t,e,r){"use strict";var n=r(107).charAt;t.exports=function(t,e,r){return e+(r?n(t,e).length:1)}},function(t,e,r){var n=r(10),o=r(66),i=n.TYPED_ARRAY_CONSTRUCTOR,a=n.aTypedArrayConstructor;t.exports=function(t){return a(o(t,t[i]))}},function(t,e,r){var n=r(1),o=r(11),i=r(6),a=r(59),u=r(42),c=r(143),s=r(7),f=n.TypeError,l=s("toPrimitive");t.exports=function(t,e){if(!i(t)||a(t))return t;var r,n=u(t,l);if(n){if(void 0===e&&(e="default"),r=o(n,t,e),!i(r)||a(r))return r;throw f("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(t,e)}},function(t,e,r){var n=r(50),o=r(2);t.exports=!!Object.getOwnPropertySymbols&&!o((function(){var t=Symbol();return!String(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},function(t,e,r){var n=r(1),o=r(114),i=n["__core-js_shared__"]||o("__core-js_shared__",{});t.exports=i},function(t,e,r){var n=r(1),o=Object.defineProperty;t.exports=function(t,e){try{o(n,t,{value:e,configurable:!0,writable:!0})}catch(r){n[t]=e}return e}},function(t,e,r){var n=r(16),o=r(3),i=r(51),a=r(117),u=r(4),c=o([].concat);t.exports=n("Reflect","ownKeys")||function(t){var e=i.f(u(t)),r=a.f;return r?c(e,r(t)):e}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,r){var n={};n[r(7)("toStringTag")]="z",t.exports="[object z]"===String(n)},function(t,e,r){var n=r(28),o=r(26),i=r(51).f,a=r(76),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"Window"==n(t)?function(t){try{return i(t)}catch(t){return a(u)}}(t):i(o(t))}},function(t,e,r){var n=r(2),o=r(35);t.exports=!n((function(){var t=Error("a");return!("stack"in t)||(Object.defineProperty(t,"stack",o(1,7)),7!==t.stack)}))},function(t,e,r){var n=r(2);t.exports=!n((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,r){var n=r(7),o=r(79),i=n("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},function(t,e,r){"use strict";var n=r(14),o=r(43),i=r(15);t.exports=function(t){for(var e=n(this),r=i(e),a=arguments.length,u=o(a>1?arguments[1]:void 0,r),c=a>2?arguments[2]:void 0,s=void 0===c?r:o(c,r);s>u;)e[u++]=t;return e}},function(t,e,r){"use strict";var n=r(0),o=r(11),i=r(21),a=r(61),u=r(9),c=r(125),s=r(37),f=r(39),l=r(36),h=r(25),p=r(17),d=r(7),v=r(79),g=r(160),y=a.PROPER,m=a.CONFIGURABLE,b=g.IteratorPrototype,x=g.BUGGY_SAFARI_ITERATORS,w=d("iterator"),E=function(){return this};t.exports=function(t,e,r,a,d,g,S){c(r,e,a);var A,O,R,I=function(t){if(t===d&&P)return P;if(!x&&t in k)return k[t];switch(t){case"keys":case"values":case"entries":return function(){return new r(this,t)}}return function(){return new r(this)}},M=e+" Iterator",T=!1,k=t.prototype,j=k[w]||k["@@iterator"]||d&&k[d],P=!x&&j||I(d),_="Array"==e&&k.entries||j;if(_&&(A=s(_.call(new t)))!==Object.prototype&&A.next&&(i||s(A)===b||(f?f(A,b):u(A[w])||p(A,w,E)),l(A,M,!0,!0),i&&(v[M]=E)),y&&"values"==d&&j&&"values"!==j.name&&(!i&&m?h(k,"name","values"):(T=!0,P=function(){return o(j,this)})),d)if(O={values:I("values"),keys:g?P:I("keys"),entries:I("entries")},S)for(R in O)(x||T||!(R in k))&&p(k,R,O[R]);else n({target:e,proto:!0,forced:x||T},O);return i&&!S||k[w]===P||p(k,w,P,{name:d}),v[e]=P,O}},function(t,e,r){"use strict";var n=r(160).IteratorPrototype,o=r(32),i=r(35),a=r(36),u=r(79),c=function(){return this};t.exports=function(t,e,r,s){var f=e+" Iterator";return t.prototype=o(n,{next:i(+!s,r)}),a(t,f,!1,!0),u[f]=c,t}},function(t,e,r){var n=r(76),o=Math.floor,i=function(t,e){var r=t.length,c=o(r/2);return r<8?a(t,e):u(t,i(n(t,0,c),e),i(n(t,c),e),e)},a=function(t,e){for(var r,n,o=t.length,i=1;i<o;){for(n=i,r=t[i];n&&e(t[n-1],r)>0;)t[n]=t[--n];n!==i++&&(t[n]=r)}return t},u=function(t,e,r,n){for(var o=e.length,i=r.length,a=0,u=0;a<o||u<i;)t[a+u]=a<o&&u<i?n(e[a],r[u])<=0?e[a++]:r[u++]:a<o?e[a++]:r[u++];return t};t.exports=i},function(t,e,r){var n=r(41).match(/AppleWebKit\/(\d+)\./);t.exports=!!n&&+n[1]},function(t,e){t.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},function(t,e,r){var n=r(1),o=r(62),i=r(70),a=n.TypeError;t.exports=function(t){if(o(t))return t;throw a(i(t)+" is not a constructor")}},function(t,e,r){var n=r(3),o=r(30),i=r(8),a=r(97),u=r(18),c=n(a),s=n("".slice),f=Math.ceil,l=function(t){return function(e,r,n){var a,l,h=i(u(e)),p=o(r),d=h.length,v=void 0===n?" ":i(n);return p<=d||""==v?h:((l=c(v,f((a=p-d)/v.length))).length>a&&(l=s(l,0,a)),t?h+l:l+h)}};t.exports={start:l(!1),end:l(!0)}},function(t,e,r){var n=r(2);t.exports=n((function(){if("function"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,"a",{value:8})}}))},function(t,e){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,e,r){var n=r(6),o=Math.floor;t.exports=Number.isInteger||function(t){return!n(t)&&isFinite(t)&&o(t)===t}},function(t,e,r){var n,o,i,a,u=r(1),c=r(31),s=r(38),f=r(9),l=r(12),h=r(2),p=r(148),d=r(55),v=r(87),g=r(53),y=r(175),m=r(56),b=u.setImmediate,x=u.clearImmediate,w=u.process,E=u.Dispatch,S=u.Function,A=u.MessageChannel,O=u.String,R=0,I={};try{n=u.location}catch(t){}var M=function(t){if(l(I,t)){var e=I[t];delete I[t],e()}},T=function(t){return function(){M(t)}},k=function(t){M(t.data)},j=function(t){u.postMessage(O(t),n.protocol+"//"+n.host)};b&&x||(b=function(t){g(arguments.length,1);var e=f(t)?t:S(t),r=d(arguments,1);return I[++R]=function(){c(e,void 0,r)},o(R),R},x=function(t){delete I[t]},m?o=function(t){w.nextTick(T(t))}:E&&E.now?o=function(t){E.now(T(t))}:A&&!y?(a=(i=new A).port2,i.port1.onmessage=k,o=s(a.postMessage,a)):u.addEventListener&&f(u.postMessage)&&!u.importScripts&&n&&"file:"!==n.protocol&&!h(j)?(o=j,u.addEventListener("message",k,!1)):o="onreadystatechange"in v("script")?function(t){p.appendChild(v("script")).onreadystatechange=function(){p.removeChild(this),M(t)}}:function(t){setTimeout(T(t),0)}),t.exports={set:b,clear:x}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,r){var n=r(2),o=r(1).RegExp;t.exports=n((function(){var t=o(".","s");return!(t.dotAll&&t.exec("\n")&&"s"===t.flags)}))},function(t,e,r){"use strict";var n=r(0),o=r(106);n({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},function(t,e,r){var n=r(1),o=r(83),i=n.TypeError;t.exports=function(t){if(o(t))throw i("The method doesn't accept regular expressions");return t}},function(t,e,r){var n=r(7)("match");t.exports=function(t){var e=/./;try{"/./"[t](e)}catch(r){try{return e[n]=!1,"/./"[t](e)}catch(t){}}return!1}},function(t,e,r){var n=r(61).PROPER,o=r(2),i=r(102);t.exports=function(t){return o((function(){return!!i[t]()||"​᠎"!=="​᠎"[t]()||n&&i[t].name!==t}))}},function(t,e,r){var n=r(1),o=r(2),i=r(93),a=r(10).NATIVE_ARRAY_BUFFER_VIEWS,u=n.ArrayBuffer,c=n.Int8Array;t.exports=!a||!o((function(){c(1)}))||!o((function(){new c(-1)}))||!i((function(t){new c,new c(null),new c(1.5),new c(t)}),!0)||o((function(){return 1!==new c(new u(2),1,void 0).length}))},function(t,e,r){var n=r(112);t.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,r){var n=r(1),o=r(11),i=r(9),a=r(6),u=n.TypeError;t.exports=function(t,e){var r,n;if("string"===e&&i(r=t.toString)&&!a(n=o(r,t)))return n;if(i(r=t.valueOf)&&!a(n=o(r,t)))return n;if("string"!==e&&i(r=t.toString)&&!a(n=o(r,t)))return n;throw u("Can't convert object to primitive value")}},function(t,e,r){var n=r(5),o=r(2),i=r(87);t.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(t,e,r){var n=r(5),o=r(2);t.exports=n&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(t,e,r){var n=r(1),o=r(9),i=r(88),a=n.WeakMap;t.exports=o(a)&&/native code/.test(i(a))},function(t,e,r){var n=r(3),o=r(12),i=r(26),a=r(72).indexOf,u=r(71),c=n([].push);t.exports=function(t,e){var r,n=i(t),s=0,f=[];for(r in n)!o(u,r)&&o(n,r)&&c(f,r);for(;e.length>s;)o(n,r=e[s++])&&(~a(f,r)||c(f,r));return f}},function(t,e,r){var n=r(16);t.exports=n("document","documentElement")},function(t,e,r){var n=r(7);e.f=n},function(t,e,r){var n=r(1);t.exports=n},function(t,e,r){"use strict";var n=r(16),o=r(12),i=r(25),a=r(29),u=r(39),c=r(90),s=r(63),f=r(78),l=r(153),h=r(91),p=r(120),d=r(21);t.exports=function(t,e,r,v){var g=v?2:1,y=t.split("."),m=y[y.length-1],b=n.apply(null,y);if(b){var x=b.prototype;if(!d&&o(x,"cause")&&delete x.cause,!r)return b;var w=n("Error"),E=e((function(t,e){var r=f(v?e:t,void 0),n=v?new b(t):new b;return void 0!==r&&i(n,"message",r),p&&i(n,"stack",h(n.stack,2)),this&&a(x,this)&&s(n,this,E),arguments.length>g&&l(n,arguments[g]),n}));if(E.prototype=x,"Error"!==m&&(u?u(E,w):c(E,w,{name:!0})),c(E,b),!d)try{x.name!==m&&i(x,"name",m),x.constructor=E}catch(t){}return E}}},function(t,e,r){var n=r(1),o=r(9),i=n.String,a=n.TypeError;t.exports=function(t){if("object"==typeof t||o(t))return t;throw a("Can't set "+i(t)+" as a prototype")}},function(t,e,r){var n=r(6),o=r(25);t.exports=function(t,e){n(e)&&"cause"in e&&o(t,"cause",e.cause)}},function(t,e,r){"use strict";var n=r(5),o=r(2),i=r(4),a=r(32),u=r(78),c=Error.prototype.toString,s=o((function(){if(n){var t=a(Object.defineProperty({},"name",{get:function(){return this===t}}));if("true"!==c.call(t))return!0}return"2: 1"!==c.call({message:1,name:2})||"Error"!==c.call({})}));t.exports=s?function(){var t=i(this),e=u(t.name,"Error"),r=u(t.message);return e?r?e+": "+r:e:r}:c},function(t,e,r){var n=r(11),o=r(4),i=r(42);t.exports=function(t,e,r){var a,u;o(t);try{if(!(a=i(t,"return"))){if("throw"===e)throw r;return r}a=n(a,t)}catch(t){u=!0,a=t}if("throw"===e)throw r;if(u)throw a;return o(a),r}},function(t,e,r){"use strict";var n=r(14),o=r(43),i=r(15),a=Math.min;t.exports=[].copyWithin||function(t,e){var r=n(this),u=i(r),c=o(t,u),s=o(e,u),f=arguments.length>2?arguments[2]:void 0,l=a((void 0===f?u:o(f,u))-s,u-c),h=1;for(s<c&&c<s+l&&(h=-1,s+=l-1,c+=l-1);l-- >0;)s in r?r[c]=r[s]:delete r[c],c+=h,s+=h;return r}},function(t,e,r){"use strict";var n=r(1),o=r(54),i=r(15),a=r(38),u=n.TypeError,c=function(t,e,r,n,s,f,l,h){for(var p,d,v=s,g=0,y=!!l&&a(l,h);g<n;){if(g in r){if(p=y?y(r[g],g,e):r[g],f>0&&o(p))d=i(p),v=c(t,e,p,d,v,f-1)-1;else{if(v>=9007199254740991)throw u("Exceed the acceptable array length");t[v]=p}v++}g++}return v};t.exports=c},function(t,e,r){"use strict";var n=r(22).forEach,o=r(47)("forEach");t.exports=o?[].forEach:function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}},function(t,e,r){"use strict";var n=r(1),o=r(38),i=r(11),a=r(14),u=r(227),c=r(122),s=r(62),f=r(15),l=r(44),h=r(92),p=r(80),d=n.Array;t.exports=function(t){var e=a(t),r=s(this),n=arguments.length,v=n>1?arguments[1]:void 0,g=void 0!==v;g&&(v=o(v,n>2?arguments[2]:void 0));var y,m,b,x,w,E,S=p(e),A=0;if(!S||this==d&&c(S))for(y=f(e),m=r?new this(y):d(y);y>A;A++)E=g?v(e[A],A):e[A],l(m,A,E);else for(w=(x=h(e,S)).next,m=r?new this:[];!(b=i(w,x)).done;A++)E=g?u(x,v,[b.value,A],!0):b.value,l(m,A,E);return m.length=A,m}},function(t,e,r){"use strict";var n,o,i,a=r(2),u=r(9),c=r(32),s=r(37),f=r(17),l=r(7),h=r(21),p=l("iterator"),d=!1;[].keys&&("next"in(i=[].keys())?(o=s(s(i)))!==Object.prototype&&(n=o):d=!0),null==n||a((function(){var t={};return n[p].call(t)!==t}))?n={}:h&&(n=c(n)),u(n[p])||f(n,p,(function(){return this})),t.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:d}},function(t,e,r){"use strict";var n=r(31),o=r(26),i=r(20),a=r(15),u=r(47),c=Math.min,s=[].lastIndexOf,f=!!s&&1/[1].lastIndexOf(1,-0)<0,l=u("lastIndexOf"),h=f||!l;t.exports=h?function(t){if(f)return n(s,this,arguments)||0;var e=o(this),r=a(e),u=r-1;for(arguments.length>1&&(u=c(u,i(arguments[1]))),u<0&&(u=r+u);u>=0;u--)if(u in e&&e[u]===t)return u||0;return-1}:s},function(t,e,r){var n=r(41).match(/firefox\/(\d+)/i);t.exports=!!n&&+n[1]},function(t,e,r){var n=r(41);t.exports=/MSIE|Trident/.test(n)},function(t,e,r){var n=r(1),o=r(20),i=r(30),a=n.RangeError;t.exports=function(t){if(void 0===t)return 0;var e=o(t),r=i(e);if(e!==r)throw a("Wrong length or index");return r}},function(t,e,r){"use strict";var n=r(1),o=r(3),i=r(24),a=r(6),u=r(12),c=r(55),s=r(68),f=n.Function,l=o([].concat),h=o([].join),p={},d=function(t,e,r){if(!u(p,e)){for(var n=[],o=0;o<e;o++)n[o]="a["+o+"]";p[e]=f("C,a","return new C("+h(n,",")+")")}return p[e](t,r)};t.exports=s?f.bind:function(t){var e=i(this),r=e.prototype,n=c(arguments,1),o=function(){var r=l(n,c(arguments));return this instanceof o?d(e,r.length,r):e.apply(t,r)};return a(r)&&(o.prototype=r),o}},function(t,e,r){"use strict";var n=r(13).f,o=r(32),i=r(65),a=r(38),u=r(40),c=r(45),s=r(124),f=r(64),l=r(5),h=r(57).fastKey,p=r(19),d=p.set,v=p.getterFor;t.exports={getConstructor:function(t,e,r,s){var f=t((function(t,n){u(t,p),d(t,{type:e,index:o(null),first:void 0,last:void 0,size:0}),l||(t.size=0),null!=n&&c(n,t[s],{that:t,AS_ENTRIES:r})})),p=f.prototype,g=v(e),y=function(t,e,r){var n,o,i=g(t),a=m(t,e);return a?a.value=r:(i.last=a={index:o=h(e,!0),key:e,value:r,previous:n=i.last,next:void 0,removed:!1},i.first||(i.first=a),n&&(n.next=a),l?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},m=function(t,e){var r,n=g(t),o=h(e);if("F"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key==e)return r};return i(p,{clear:function(){for(var t=g(this),e=t.index,r=t.first;r;)r.removed=!0,r.previous&&(r.previous=r.previous.next=void 0),delete e[r.index],r=r.next;t.first=t.last=void 0,l?t.size=0:this.size=0},delete:function(t){var e=g(this),r=m(this,t);if(r){var n=r.next,o=r.previous;delete e.index[r.index],r.removed=!0,o&&(o.next=n),n&&(n.previous=o),e.first==r&&(e.first=n),e.last==r&&(e.last=o),l?e.size--:this.size--}return!!r},forEach:function(t){for(var e,r=g(this),n=a(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!m(this,t)}}),i(p,r?{get:function(t){var e=m(this,t);return e&&e.value},set:function(t,e){return y(this,0===t?0:t,e)}}:{add:function(t){return y(this,t=0===t?0:t,t)}}),l&&n(p,"size",{get:function(){return g(this).size}}),f},setStrong:function(t,e,r){var n=e+" Iterator",o=v(e),i=v(n);s(t,e,(function(t,e){d(this,{type:n,target:t,state:o(t),kind:e,last:void 0})}),(function(){for(var t=i(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?"keys"==e?{value:r.key,done:!1}:"values"==e?{value:r.value,done:!1}:{value:[r.key,r.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),r?"entries":"values",!r,!0),f(e)}}},function(t,e){var r=Math.log;t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:r(1+t)}},function(t,e){var r=Math.log,n=Math.LOG10E;t.exports=Math.log10||function(t){return r(t)*n}},function(t,e,r){var n=r(1),o=r(2),i=r(3),a=r(8),u=r(67).trim,c=r(102),s=i("".charAt),f=n.parseFloat,l=n.Symbol,h=l&&l.iterator,p=1/f(c+"-0")!=-1/0||h&&!o((function(){f(Object(h))}));t.exports=p?function(t){var e=u(a(t)),r=f(e);return 0===r&&"-"==s(e,0)?-0:r}:f},function(t,e,r){var n=r(1),o=r(2),i=r(3),a=r(8),u=r(67).trim,c=r(102),s=n.parseInt,f=n.Symbol,l=f&&f.iterator,h=/^[+-]?0x/i,p=i(h.exec),d=8!==s(c+"08")||22!==s(c+"0x16")||l&&!o((function(){s(Object(l))}));t.exports=d?function(t,e){var r=u(a(t));return s(r,e>>>0||(p(h,r)?16:10))}:s},function(t,e,r){"use strict";var n=r(5),o=r(3),i=r(11),a=r(2),u=r(75),c=r(117),s=r(85),f=r(14),l=r(69),h=Object.assign,p=Object.defineProperty,d=o([].concat);t.exports=!h||a((function(){if(n&&1!==h({b:1},h(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol();return t[r]=7,"abcdefghijklmnopqrst".split("").forEach((function(t){e[t]=t})),7!=h({},t)[r]||"abcdefghijklmnopqrst"!=u(h({},e)).join("")}))?function(t,e){for(var r=f(t),o=arguments.length,a=1,h=c.f,p=s.f;o>a;)for(var v,g=l(arguments[a++]),y=h?d(u(g),h(g)):u(g),m=y.length,b=0;m>b;)v=y[b++],n&&!i(p,g,v)||(r[v]=g[v]);return r}:h},function(t,e,r){var n=r(5),o=r(3),i=r(75),a=r(26),u=o(r(85).f),c=o([].push),s=function(t){return function(e){for(var r,o=a(e),s=i(o),f=s.length,l=0,h=[];f>l;)r=s[l++],n&&!u(o,r)||c(h,t?[r,o[r]]:o[r]);return h}};t.exports={entries:s(!0),values:s(!1)}},function(t,e){t.exports=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e}},function(t,e,r){var n=r(1);t.exports=n.Promise},function(t,e,r){var n=r(41);t.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},function(t,e,r){var n,o,i,a,u,c,s,f,l=r(1),h=r(38),p=r(23).f,d=r(134).set,v=r(175),g=r(331),y=r(332),m=r(56),b=l.MutationObserver||l.WebKitMutationObserver,x=l.document,w=l.process,E=l.Promise,S=p(l,"queueMicrotask"),A=S&&S.value;A||(n=function(){var t,e;for(m&&(t=w.domain)&&t.exit();o;){e=o.fn,o=o.next;try{e()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},v||m||y||!b||!x?!g&&E&&E.resolve?((s=E.resolve(void 0)).constructor=E,f=h(s.then,s),a=function(){f(n)}):m?a=function(){w.nextTick(n)}:(d=h(d,l),a=function(){d(n)}):(u=!0,c=x.createTextNode(""),new b(n).observe(c,{characterData:!0}),a=function(){c.data=u=!u})),t.exports=A||function(t){var e={fn:t,next:void 0};i&&(i.next=e),o||(o=e,a()),i=e}},function(t,e,r){var n=r(4),o=r(6),i=r(104);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var n=r(12);t.exports=function(t){return void 0!==t&&(n(t,"value")||n(t,"writable"))}},function(t,e,r){var n=r(2),o=r(1).RegExp;t.exports=n((function(){var t=o("(?<a>b)","g");return"b"!==t.exec("b").groups.a||"bc"!=="b".replace(t,"$<a>c")}))},function(t,e,r){"use strict";var n=r(107).charAt,o=r(8),i=r(19),a=r(124),u=i.set,c=i.getterFor("String Iterator");a(String,"String",(function(t){u(this,{type:"String Iterator",string:o(t),index:0})}),(function(){var t,e=c(this),r=e.string,o=e.index;return o>=r.length?{value:void 0,done:!0}:(t=n(r,o),e.index+=t.length,{value:t,done:!1})}))},function(t,e,r){var n=r(41);t.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(n)},function(t,e,r){var n=r(3),o=r(14),i=Math.floor,a=n("".charAt),u=n("".replace),c=n("".slice),s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,f=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,e,r,n,l,h){var p=r+t.length,d=n.length,v=f;return void 0!==l&&(l=o(l),v=s),u(h,v,(function(o,u){var s;switch(a(u,0)){case"$":return"$";case"&":return t;case"`":return c(e,0,r);case"'":return c(e,p);case"<":s=l[c(u,1,-1)];break;default:var f=+u;if(0===f)return o;if(f>d){var h=i(f/10);return 0===h?o:h<=d?void 0===n[h-1]?a(u,1):n[h-1]+a(u,1):o}s=n[f-1]}return void 0===s?"":s}))}},function(t,e,r){var n=r(1),o=r(394),i=n.RangeError;t.exports=function(t,e){var r=o(t);if(r%e)throw i("Wrong offset");return r}},function(t,e,r){var n=r(38),o=r(11),i=r(129),a=r(14),u=r(15),c=r(92),s=r(80),f=r(122),l=r(10).aTypedArrayConstructor;t.exports=function(t){var e,r,h,p,d,v,g=i(this),y=a(t),m=arguments.length,b=m>1?arguments[1]:void 0,x=void 0!==b,w=s(y);if(w&&!f(w))for(v=(d=c(y,w)).next,y=[];!(p=o(v,d)).done;)y.push(p.value);for(x&&m>2&&(b=n(b,arguments[2])),r=u(y),h=new(l(g))(r),e=0;r>e;e++)h[e]=x?b(y[e],e):y[e];return h}},function(t,e,r){"use strict";var n=r(3),o=r(65),i=r(57).getWeakData,a=r(4),u=r(6),c=r(40),s=r(45),f=r(22),l=r(12),h=r(19),p=h.set,d=h.getterFor,v=f.find,g=f.findIndex,y=n([].splice),m=0,b=function(t){return t.frozen||(t.frozen=new x)},x=function(){this.entries=[]},w=function(t,e){return v(t.entries,(function(t){return t[0]===e}))};x.prototype={get:function(t){var e=w(this,t);if(e)return e[1]},has:function(t){return!!w(this,t)},set:function(t,e){var r=w(this,t);r?r[1]=e:this.entries.push([t,e])},delete:function(t){var e=g(this.entries,(function(e){return e[0]===t}));return~e&&y(this.entries,e,1),!!~e}},t.exports={getConstructor:function(t,e,r,n){var f=t((function(t,o){c(t,h),p(t,{type:e,id:m++,frozen:void 0}),null!=o&&s(o,t[n],{that:t,AS_ENTRIES:r})})),h=f.prototype,v=d(e),g=function(t,e,r){var n=v(t),o=i(a(e),!0);return!0===o?b(n).set(e,r):o[n.id]=r,t};return o(h,{delete:function(t){var e=v(this);if(!u(t))return!1;var r=i(t);return!0===r?b(e).delete(t):r&&l(r,e.id)&&delete r[e.id]},has:function(t){var e=v(this);if(!u(t))return!1;var r=i(t);return!0===r?b(e).has(t):r&&l(r,e.id)}}),o(h,r?{get:function(t){var e=v(this);if(u(t)){var r=i(t);return!0===r?b(e).get(t):r?r[e.id]:void 0}},set:function(t,e){return g(this,t,e)}}:{add:function(t){return g(this,t,!0)}}),f}}},function(t,e){for(var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",n={},o=0;o<66;o++)n[r.charAt(o)]=o;t.exports={itoc:r,ctoi:n}},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,r){var n=r(87)("span").classList,o=n&&n.constructor&&n.constructor.prototype;t.exports=o===Object.prototype?void 0:o},function(t,e){t.exports={IndexSizeError:{s:"INDEX_SIZE_ERR",c:1,m:1},DOMStringSizeError:{s:"DOMSTRING_SIZE_ERR",c:2,m:0},HierarchyRequestError:{s:"HIERARCHY_REQUEST_ERR",c:3,m:1},WrongDocumentError:{s:"WRONG_DOCUMENT_ERR",c:4,m:1},InvalidCharacterError:{s:"INVALID_CHARACTER_ERR",c:5,m:1},NoDataAllowedError:{s:"NO_DATA_ALLOWED_ERR",c:6,m:0},NoModificationAllowedError:{s:"NO_MODIFICATION_ALLOWED_ERR",c:7,m:1},NotFoundError:{s:"NOT_FOUND_ERR",c:8,m:1},NotSupportedError:{s:"NOT_SUPPORTED_ERR",c:9,m:1},InUseAttributeError:{s:"INUSE_ATTRIBUTE_ERR",c:10,m:1},InvalidStateError:{s:"INVALID_STATE_ERR",c:11,m:1},SyntaxError:{s:"SYNTAX_ERR",c:12,m:1},InvalidModificationError:{s:"INVALID_MODIFICATION_ERR",c:13,m:1},NamespaceError:{s:"NAMESPACE_ERR",c:14,m:1},InvalidAccessError:{s:"INVALID_ACCESS_ERR",c:15,m:1},ValidationError:{s:"VALIDATION_ERR",c:16,m:0},TypeMismatchError:{s:"TYPE_MISMATCH_ERR",c:17,m:1},SecurityError:{s:"SECURITY_ERR",c:18,m:1},NetworkError:{s:"NETWORK_ERR",c:19,m:1},AbortError:{s:"ABORT_ERR",c:20,m:1},URLMismatchError:{s:"URL_MISMATCH_ERR",c:21,m:1},QuotaExceededError:{s:"QUOTA_EXCEEDED_ERR",c:22,m:1},TimeoutError:{s:"TIMEOUT_ERR",c:23,m:1},InvalidNodeTypeError:{s:"INVALID_NODE_TYPE_ERR",c:24,m:1},DataCloneError:{s:"DATA_CLONE_ERR",c:25,m:1}}},function(t,e,r){var n=r(2),o=r(7),i=r(21),a=o("iterator");t.exports=!n((function(){var t=new URL("b?a=1&b=2&c=3","http://a"),e=t.searchParams,r="";return t.pathname="c%20d",e.forEach((function(t,n){e.delete("b"),r+=n+t})),i&&!t.toJSON||!e.sort||"http://a/c%20d?a=1&c=3"!==t.href||"3"!==e.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!e[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},function(t,e,r){"use strict";r(94);var n=r(0),o=r(1),i=r(16),a=r(11),u=r(3),c=r(190),s=r(17),f=r(65),l=r(36),h=r(125),p=r(19),d=r(40),v=r(9),g=r(12),y=r(38),m=r(52),b=r(4),x=r(6),w=r(8),E=r(32),S=r(35),A=r(92),O=r(80),R=r(53),I=r(7),M=r(126),T=I("iterator"),k=p.set,j=p.getterFor("URLSearchParams"),P=p.getterFor("URLSearchParamsIterator"),_=i("fetch"),L=i("Request"),D=i("Headers"),N=L&&L.prototype,C=D&&D.prototype,U=o.RegExp,$=o.TypeError,F=o.decodeURIComponent,B=o.encodeURIComponent,z=u("".charAt),W=u([].join),q=u([].push),G=u("".replace),V=u([].shift),Y=u([].splice),H=u("".split),K=u("".slice),J=/\+/g,X=Array(4),Q=function(t){return X[t-1]||(X[t-1]=U("((?:%[\\da-f]{2}){"+t+"})","gi"))},Z=function(t){try{return F(t)}catch(e){return t}},tt=function(t){var e=G(t,J," "),r=4;try{return F(e)}catch(t){for(;r;)e=G(e,Q(r--),Z);return e}},et=/[!'()~]|%20/g,rt={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},nt=function(t){return rt[t]},ot=function(t){return G(B(t),et,nt)},it=h((function(t,e){k(this,{type:"URLSearchParamsIterator",iterator:A(j(t).entries),kind:e})}),"Iterator",(function(){var t=P(this),e=t.kind,r=t.iterator.next(),n=r.value;return r.done||(r.value="keys"===e?n.key:"values"===e?n.value:[n.key,n.value]),r}),!0),at=function(t){this.entries=[],this.url=null,void 0!==t&&(x(t)?this.parseObject(t):this.parseQuery("string"==typeof t?"?"===z(t,0)?K(t,1):t:w(t)))};at.prototype={type:"URLSearchParams",bindURL:function(t){this.url=t,this.update()},parseObject:function(t){var e,r,n,o,i,u,c,s=O(t);if(s)for(r=(e=A(t,s)).next;!(n=a(r,e)).done;){if(i=(o=A(b(n.value))).next,(u=a(i,o)).done||(c=a(i,o)).done||!a(i,o).done)throw $("Expected sequence with length 2");q(this.entries,{key:w(u.value),value:w(c.value)})}else for(var f in t)g(t,f)&&q(this.entries,{key:f,value:w(t[f])})},parseQuery:function(t){if(t)for(var e,r,n=H(t,"&"),o=0;o<n.length;)(e=n[o++]).length&&(r=H(e,"="),q(this.entries,{key:tt(V(r)),value:tt(W(r,"="))}))},serialize:function(){for(var t,e=this.entries,r=[],n=0;n<e.length;)t=e[n++],q(r,ot(t.key)+"="+ot(t.value));return W(r,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var ut=function(){d(this,ct);var t=arguments.length>0?arguments[0]:void 0;k(this,new at(t))},ct=ut.prototype;if(f(ct,{append:function(t,e){R(arguments.length,2);var r=j(this);q(r.entries,{key:w(t),value:w(e)}),r.updateURL()},delete:function(t){R(arguments.length,1);for(var e=j(this),r=e.entries,n=w(t),o=0;o<r.length;)r[o].key===n?Y(r,o,1):o++;e.updateURL()},get:function(t){R(arguments.length,1);for(var e=j(this).entries,r=w(t),n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){R(arguments.length,1);for(var e=j(this).entries,r=w(t),n=[],o=0;o<e.length;o++)e[o].key===r&&q(n,e[o].value);return n},has:function(t){R(arguments.length,1);for(var e=j(this).entries,r=w(t),n=0;n<e.length;)if(e[n++].key===r)return!0;return!1},set:function(t,e){R(arguments.length,1);for(var r,n=j(this),o=n.entries,i=!1,a=w(t),u=w(e),c=0;c<o.length;c++)(r=o[c]).key===a&&(i?Y(o,c--,1):(i=!0,r.value=u));i||q(o,{key:a,value:u}),n.updateURL()},sort:function(){var t=j(this);M(t.entries,(function(t,e){return t.key>e.key?1:-1})),t.updateURL()},forEach:function(t){for(var e,r=j(this).entries,n=y(t,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((e=r[o++]).value,e.key,this)},keys:function(){return new it(this,"keys")},values:function(){return new it(this,"values")},entries:function(){return new it(this,"entries")}},{enumerable:!0}),s(ct,T,ct.entries,{name:"entries"}),s(ct,"toString",(function(){return j(this).serialize()}),{enumerable:!0}),l(ut,"URLSearchParams"),n({global:!0,forced:!c},{URLSearchParams:ut}),!c&&v(D)){var st=u(C.has),ft=u(C.set),lt=function(t){if(x(t)){var e,r=t.body;if("URLSearchParams"===m(r))return e=t.headers?new D(t.headers):new D,st(e,"content-type")||ft(e,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),E(t,{body:S(0,w(r)),headers:S(0,e)})}return t};if(v(_)&&n({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return _(t,arguments.length>1?lt(arguments[1]):{})}}),v(L)){var ht=function(t){return d(this,N),new L(t,arguments.length>1?lt(arguments[1]):{})};N.constructor=ht,ht.prototype=N,n({global:!0,forced:!0},{Request:ht})}}t.exports={URLSearchParams:ut,getState:j}},function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function c(t,e,r,n){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),a=new S(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return O()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=x(a,r);if(u){if(u===f)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=s(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===f)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}(t,r,a),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f={};function l(){}function h(){}function p(){}var d={};u(d,o,(function(){return this}));var v=Object.getPrototypeOf,g=v&&v(v(A([])));g&&g!==e&&r.call(g,o)&&(d=g);var y=p.prototype=l.prototype=Object.create(d);function m(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function b(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var f=c.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return n("throw",t,a,u)}))}u(c.arg)}(o,i,n,a)}))}return n=n?n.then(a,a):a()}}function x(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,f;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function S(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function A(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=p,u(y,"constructor",p),u(p,"constructor",h),h.displayName=u(p,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,p):(t.__proto__=p,u(t,a,"GeneratorFunction")),t.prototype=Object.create(y),t},t.awrap=function(t){return{__await:t}},m(b.prototype),u(b.prototype,i,(function(){return this})),t.AsyncIterator=b,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new b(c(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},m(y),u(y,a,"Generator"),u(y,o,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=A,S.prototype={constructor:S,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:A(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=n}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},function(t,e,r){r(194),r(197),r(198),r(199),r(200),r(201),r(202),r(203),r(204),r(205),r(206),r(207),r(208),r(209),r(210),r(211),r(212),r(213),r(214),r(215),r(216),r(217),r(218),r(219),r(220),r(221),r(222),r(223),r(224),r(225),r(226),r(228),r(229),r(230),r(94),r(231),r(232),r(233),r(234),r(235),r(236),r(237),r(238),r(239),r(240),r(241),r(242),r(243),r(244),r(245),r(247),r(248),r(249),r(250),r(251),r(252),r(253),r(254),r(256),r(257),r(259),r(260),r(261),r(262),r(263),r(264),r(265),r(266),r(267),r(268),r(269),r(270),r(271),r(272),r(273),r(274),r(275),r(277),r(278),r(279),r(280),r(281),r(282),r(283),r(284),r(285),r(286),r(287),r(288),r(289),r(291),r(292),r(293),r(294),r(295),r(296),r(297),r(298),r(299),r(300),r(301),r(302),r(303),r(304),r(305),r(306),r(307),r(308),r(309),r(310),r(311),r(312),r(313),r(314),r(315),r(316),r(317),r(318),r(319),r(320),r(321),r(322),r(323),r(324),r(325),r(327),r(328),r(329),r(330),r(336),r(337),r(338),r(339),r(340),r(341),r(342),r(343),r(344),r(345),r(346),r(347),r(348),r(349),r(350),r(351),r(352),r(353),r(354),r(137),r(355),r(356),r(357),r(358),r(359),r(360),r(361),r(362),r(363),r(364),r(180),r(365),r(366),r(367),r(368),r(369),r(370),r(371),r(372),r(373),r(374),r(375),r(376),r(377),r(378),r(379),r(380),r(381),r(382),r(383),r(384),r(385),r(386),r(387),r(388),r(389),r(390),r(391),r(392),r(393),r(395),r(396),r(397),r(398),r(399),r(400),r(401),r(402),r(403),r(404),r(405),r(406),r(407),r(410),r(411),r(412),r(413),r(414),r(415),r(416),r(417),r(418),r(419),r(420),r(421),r(422),r(423),r(424),r(425),r(426),r(427),r(428),r(429),r(430),r(431),r(432),r(433),r(434),r(435),r(436),r(437),r(438),r(440),r(441),r(442),r(443),r(444),r(445),r(446),r(448),r(191),t.exports=r(150)},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(16),a=r(31),u=r(11),c=r(3),s=r(21),f=r(5),l=r(112),h=r(2),p=r(12),d=r(54),v=r(9),g=r(6),y=r(29),m=r(59),b=r(4),x=r(14),w=r(26),E=r(49),S=r(8),A=r(35),O=r(32),R=r(75),I=r(51),M=r(119),T=r(117),k=r(23),j=r(13),P=r(74),_=r(85),L=r(55),D=r(17),N=r(86),C=r(89),U=r(71),$=r(60),F=r(7),B=r(149),z=r(27),W=r(36),q=r(19),G=r(22).forEach,V=C("hidden"),Y=F("toPrimitive"),H=q.set,K=q.getterFor("Symbol"),J=Object.prototype,X=o.Symbol,Q=X&&X.prototype,Z=o.TypeError,tt=o.QObject,et=i("JSON","stringify"),rt=k.f,nt=j.f,ot=M.f,it=_.f,at=c([].push),ut=N("symbols"),ct=N("op-symbols"),st=N("string-to-symbol-registry"),ft=N("symbol-to-string-registry"),lt=N("wks"),ht=!tt||!tt.prototype||!tt.prototype.findChild,pt=f&&h((function(){return 7!=O(nt({},"a",{get:function(){return nt(this,"a",{value:7}).a}})).a}))?function(t,e,r){var n=rt(J,e);n&&delete J[e],nt(t,e,r),n&&t!==J&&nt(J,e,n)}:nt,dt=function(t,e){var r=ut[t]=O(Q);return H(r,{type:"Symbol",tag:t,description:e}),f||(r.description=e),r},vt=function(t,e,r){t===J&&vt(ct,e,r),b(t);var n=E(e);return b(r),p(ut,n)?(r.enumerable?(p(t,V)&&t[V][n]&&(t[V][n]=!1),r=O(r,{enumerable:A(0,!1)})):(p(t,V)||nt(t,V,A(1,{})),t[V][n]=!0),pt(t,n,r)):nt(t,n,r)},gt=function(t,e){b(t);var r=w(e),n=R(r).concat(xt(r));return G(n,(function(e){f&&!u(yt,r,e)||vt(t,e,r[e])})),t},yt=function(t){var e=E(t),r=u(it,this,e);return!(this===J&&p(ut,e)&&!p(ct,e))&&(!(r||!p(this,e)||!p(ut,e)||p(this,V)&&this[V][e])||r)},mt=function(t,e){var r=w(t),n=E(e);if(r!==J||!p(ut,n)||p(ct,n)){var o=rt(r,n);return!o||!p(ut,n)||p(r,V)&&r[V][n]||(o.enumerable=!0),o}},bt=function(t){var e=ot(w(t)),r=[];return G(e,(function(t){p(ut,t)||p(U,t)||at(r,t)})),r},xt=function(t){var e=t===J,r=ot(e?ct:w(t)),n=[];return G(r,(function(t){!p(ut,t)||e&&!p(J,t)||at(n,ut[t])})),n};(l||(D(Q=(X=function(){if(y(Q,this))throw Z("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?S(arguments[0]):void 0,e=$(t),r=function(t){this===J&&u(r,ct,t),p(this,V)&&p(this[V],e)&&(this[V][e]=!1),pt(this,e,A(1,t))};return f&&ht&&pt(J,e,{configurable:!0,set:r}),dt(e,t)}).prototype,"toString",(function(){return K(this).tag})),D(X,"withoutSetter",(function(t){return dt($(t),t)})),_.f=yt,j.f=vt,P.f=gt,k.f=mt,I.f=M.f=bt,T.f=xt,B.f=function(t){return dt(F(t),t)},f&&(nt(Q,"description",{configurable:!0,get:function(){return K(this).description}}),s||D(J,"propertyIsEnumerable",yt,{unsafe:!0}))),n({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:X}),G(R(lt),(function(t){z(t)})),n({target:"Symbol",stat:!0,forced:!l},{for:function(t){var e=S(t);if(p(st,e))return st[e];var r=X(e);return st[e]=r,ft[r]=e,r},keyFor:function(t){if(!m(t))throw Z(t+" is not a symbol");if(p(ft,t))return ft[t]},useSetter:function(){ht=!0},useSimple:function(){ht=!1}}),n({target:"Object",stat:!0,forced:!l,sham:!f},{create:function(t,e){return void 0===e?O(t):gt(O(t),e)},defineProperty:vt,defineProperties:gt,getOwnPropertyDescriptor:mt}),n({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:bt,getOwnPropertySymbols:xt}),n({target:"Object",stat:!0,forced:h((function(){T.f(1)}))},{getOwnPropertySymbols:function(t){return T.f(x(t))}}),et)&&n({target:"JSON",stat:!0,forced:!l||h((function(){var t=X();return"[null]"!=et([t])||"{}"!=et({a:t})||"{}"!=et(Object(t))}))},{stringify:function(t,e,r){var n=L(arguments),o=e;if((g(e)||void 0!==t)&&!m(t))return d(e)||(e=function(t,e){if(v(o)&&(e=u(o,this,t,e)),!m(e))return e}),n[1]=e,a(et,null,n)}});if(!Q[Y]){var wt=Q.valueOf;D(Q,Y,(function(t){return u(wt,this)}))}W(X,"Symbol"),U[V]=!0},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var n=r(1),o=r(54),i=r(62),a=r(6),u=r(7)("species"),c=n.Array;t.exports=function(t){var e;return o(t)&&(e=t.constructor,(i(e)&&(e===c||o(e.prototype))||a(e)&&null===(e=e[u]))&&(e=void 0)),void 0===e?c:e}},function(t,e,r){"use strict";var n=r(0),o=r(5),i=r(1),a=r(3),u=r(12),c=r(9),s=r(29),f=r(8),l=r(13).f,h=r(90),p=i.Symbol,d=p&&p.prototype;if(o&&c(p)&&(!("description"in d)||void 0!==p().description)){var v={},g=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:f(arguments[0]),e=s(d,this)?new p(t):void 0===t?p():p(t);return""===t&&(v[e]=!0),e};h(g,p),g.prototype=d,d.constructor=g;var y="Symbol(test)"==String(p("test")),m=a(d.toString),b=a(d.valueOf),x=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),E=a("".slice);l(d,"description",{configurable:!0,get:function(){var t=b(this),e=m(t);if(u(v,t))return"";var r=y?E(e,7,-1):w(e,x,"$1");return""===r?void 0:r}}),n({global:!0,forced:!0},{Symbol:g})}},function(t,e,r){r(27)("asyncIterator")},function(t,e,r){r(27)("hasInstance")},function(t,e,r){r(27)("isConcatSpreadable")},function(t,e,r){r(27)("iterator")},function(t,e,r){r(27)("match")},function(t,e,r){r(27)("matchAll")},function(t,e,r){r(27)("replace")},function(t,e,r){r(27)("search")},function(t,e,r){r(27)("species")},function(t,e,r){r(27)("split")},function(t,e,r){r(27)("toPrimitive")},function(t,e,r){r(27)("toStringTag")},function(t,e,r){r(27)("unscopables")},function(t,e,r){var n=r(0),o=r(1),i=r(31),a=r(151),u=o.WebAssembly,c=7!==Error("e",{cause:7}).cause,s=function(t,e){var r={};r[t]=a(t,e,c),n({global:!0,forced:c},r)},f=function(t,e){if(u&&u[t]){var r={};r[t]=a("WebAssembly."+t,e,c),n({target:"WebAssembly",stat:!0,forced:c},r)}};s("Error",(function(t){return function(e){return i(t,this,arguments)}})),s("EvalError",(function(t){return function(e){return i(t,this,arguments)}})),s("RangeError",(function(t){return function(e){return i(t,this,arguments)}})),s("ReferenceError",(function(t){return function(e){return i(t,this,arguments)}})),s("SyntaxError",(function(t){return function(e){return i(t,this,arguments)}})),s("TypeError",(function(t){return function(e){return i(t,this,arguments)}})),s("URIError",(function(t){return function(e){return i(t,this,arguments)}})),f("CompileError",(function(t){return function(e){return i(t,this,arguments)}})),f("LinkError",(function(t){return function(e){return i(t,this,arguments)}})),f("RuntimeError",(function(t){return function(e){return i(t,this,arguments)}}))},function(t,e,r){var n=r(17),o=r(154),i=Error.prototype;i.toString!==o&&n(i,"toString",o)},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(29),a=r(37),u=r(39),c=r(90),s=r(32),f=r(25),l=r(35),h=r(91),p=r(153),d=r(45),v=r(78),g=r(7),y=r(120),m=g("toStringTag"),b=o.Error,x=[].push,w=function(t,e){var r,n=arguments.length>2?arguments[2]:void 0,o=i(E,this);u?r=u(new b,o?a(this):E):(r=o?this:s(E),f(r,m,"Error")),void 0!==e&&f(r,"message",v(e)),y&&f(r,"stack",h(r.stack,1)),p(r,n);var c=[];return d(t,x,{that:c}),f(r,"errors",c),r};u?u(w,b):c(w,b,{name:!0});var E=w.prototype=s(b.prototype,{constructor:l(1,w),message:l(1,""),name:l(1,"AggregateError")});n({global:!0},{AggregateError:w})},function(t,e,r){var n=r(0),o=r(16),i=r(31),a=r(2),u=r(151),c=o("AggregateError"),s=!a((function(){return 1!==c([1]).errors[0]}))&&a((function(){return 7!==c([1],"AggregateError",{cause:7}).cause}));n({global:!0,forced:s},{AggregateError:u("AggregateError",(function(t){return function(e,r){return i(t,this,arguments)}}),s,!0)})},function(t,e,r){"use strict";var n=r(0),o=r(14),i=r(15),a=r(20),u=r(46);n({target:"Array",proto:!0},{at:function(t){var e=o(this),r=i(e),n=a(t),u=n>=0?n:r+n;return u<0||u>=r?void 0:e[u]}}),u("at")},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(2),a=r(54),u=r(6),c=r(14),s=r(15),f=r(44),l=r(77),h=r(81),p=r(7),d=r(50),v=p("isConcatSpreadable"),g=o.TypeError,y=d>=51||!i((function(){var t=[];return t[v]=!1,t.concat()[0]!==t})),m=h("concat"),b=function(t){if(!u(t))return!1;var e=t[v];return void 0!==e?!!e:a(t)};n({target:"Array",proto:!0,forced:!y||!m},{concat:function(t){var e,r,n,o,i,a=c(this),u=l(a,0),h=0;for(e=-1,n=arguments.length;e<n;e++)if(b(i=-1===e?a:arguments[e])){if(h+(o=s(i))>9007199254740991)throw g("Maximum allowed index exceeded");for(r=0;r<o;r++,h++)r in i&&f(u,h,i[r])}else{if(h>=9007199254740991)throw g("Maximum allowed index exceeded");f(u,h++,i)}return u.length=h,u}})},function(t,e,r){var n=r(0),o=r(156),i=r(46);n({target:"Array",proto:!0},{copyWithin:o}),i("copyWithin")},function(t,e,r){"use strict";var n=r(0),o=r(22).every;n({target:"Array",proto:!0,forced:!r(47)("every")},{every:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0),o=r(123),i=r(46);n({target:"Array",proto:!0},{fill:o}),i("fill")},function(t,e,r){"use strict";var n=r(0),o=r(22).filter;n({target:"Array",proto:!0,forced:!r(81)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(0),o=r(22).find,i=r(46),a=!0;"find"in[]&&Array(1).find((function(){a=!1})),n({target:"Array",proto:!0,forced:a},{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(t,e,r){"use strict";var n=r(0),o=r(22).findIndex,i=r(46),a=!0;"findIndex"in[]&&Array(1).findIndex((function(){a=!1})),n({target:"Array",proto:!0,forced:a},{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("findIndex")},function(t,e,r){"use strict";var n=r(0),o=r(157),i=r(14),a=r(15),u=r(20),c=r(77);n({target:"Array",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=i(this),r=a(e),n=c(e,0);return n.length=o(n,e,e,r,0,void 0===t?1:u(t)),n}})},function(t,e,r){"use strict";var n=r(0),o=r(157),i=r(24),a=r(14),u=r(15),c=r(77);n({target:"Array",proto:!0},{flatMap:function(t){var e,r=a(this),n=u(r);return i(t),(e=c(r,0)).length=o(e,r,r,n,0,1,t,arguments.length>1?arguments[1]:void 0),e}})},function(t,e,r){"use strict";var n=r(0),o=r(158);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},function(t,e,r){var n=r(0),o=r(159);n({target:"Array",stat:!0,forced:!r(93)((function(t){Array.from(t)}))},{from:o})},function(t,e,r){var n=r(4),o=r(155);t.exports=function(t,e,r,i){try{return i?e(n(r)[0],r[1]):e(r)}catch(e){o(t,"throw",e)}}},function(t,e,r){"use strict";var n=r(0),o=r(72).includes,i=r(46);n({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(72).indexOf,a=r(47),u=o([].indexOf),c=!!u&&1/u([1],1,-0)<0,s=a("indexOf");n({target:"Array",proto:!0,forced:c||!s},{indexOf:function(t){var e=arguments.length>1?arguments[1]:void 0;return c?u(this,t,e)||0:i(this,t,e)}})},function(t,e,r){r(0)({target:"Array",stat:!0},{isArray:r(54)})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(69),a=r(26),u=r(47),c=o([].join),s=i!=Object,f=u("join",",");n({target:"Array",proto:!0,forced:s||!f},{join:function(t){return c(a(this),void 0===t?",":t)}})},function(t,e,r){var n=r(0),o=r(161);n({target:"Array",proto:!0,forced:o!==[].lastIndexOf},{lastIndexOf:o})},function(t,e,r){"use strict";var n=r(0),o=r(22).map;n({target:"Array",proto:!0,forced:!r(81)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(2),a=r(62),u=r(44),c=o.Array;n({target:"Array",stat:!0,forced:i((function(){function t(){}return!(c.of.call(t)instanceof t)}))},{of:function(){for(var t=0,e=arguments.length,r=new(a(this)?this:c)(e);e>t;)u(r,t,arguments[t++]);return r.length=e,r}})},function(t,e,r){"use strict";var n=r(0),o=r(95).left,i=r(47),a=r(50),u=r(56);n({target:"Array",proto:!0,forced:!i("reduce")||!u&&a>79&&a<83},{reduce:function(t){var e=arguments.length;return o(this,t,e,e>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(0),o=r(95).right,i=r(47),a=r(50),u=r(56);n({target:"Array",proto:!0,forced:!i("reduceRight")||!u&&a>79&&a<83},{reduceRight:function(t){return o(this,t,arguments.length,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(54),a=o([].reverse),u=[1,2];n({target:"Array",proto:!0,forced:String(u)===String(u.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),a(this)}})},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(54),a=r(62),u=r(6),c=r(43),s=r(15),f=r(26),l=r(44),h=r(7),p=r(81),d=r(55),v=p("slice"),g=h("species"),y=o.Array,m=Math.max;n({target:"Array",proto:!0,forced:!v},{slice:function(t,e){var r,n,o,h=f(this),p=s(h),v=c(t,p),b=c(void 0===e?p:e,p);if(i(h)&&(r=h.constructor,(a(r)&&(r===y||i(r.prototype))||u(r)&&null===(r=r[g]))&&(r=void 0),r===y||void 0===r))return d(h,v,b);for(n=new(void 0===r?y:r)(m(b-v,0)),o=0;v<b;v++,o++)v in h&&l(n,o,h[v]);return n.length=o,n}})},function(t,e,r){"use strict";var n=r(0),o=r(22).some;n({target:"Array",proto:!0,forced:!r(47)("some")},{some:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(24),a=r(14),u=r(15),c=r(8),s=r(2),f=r(126),l=r(47),h=r(162),p=r(163),d=r(50),v=r(127),g=[],y=o(g.sort),m=o(g.push),b=s((function(){g.sort(void 0)})),x=s((function(){g.sort(null)})),w=l("sort"),E=!s((function(){if(d)return d<70;if(!(h&&h>3)){if(p)return!0;if(v)return v<603;var t,e,r,n,o="";for(t=65;t<76;t++){switch(e=String.fromCharCode(t),t){case 66:case 69:case 70:case 72:r=3;break;case 68:case 71:r=4;break;default:r=2}for(n=0;n<47;n++)g.push({k:e+n,v:r})}for(g.sort((function(t,e){return e.v-t.v})),n=0;n<g.length;n++)e=g[n].k.charAt(0),o.charAt(o.length-1)!==e&&(o+=e);return"DGBEFHACIJK"!==o}}));n({target:"Array",proto:!0,forced:b||!x||!w||!E},{sort:function(t){void 0!==t&&i(t);var e=a(this);if(E)return void 0===t?y(e):y(e,t);var r,n,o=[],s=u(e);for(n=0;n<s;n++)n in e&&m(o,e[n]);for(f(o,function(t){return function(e,r){return void 0===r?-1:void 0===e?1:void 0!==t?+t(e,r)||0:c(e)>c(r)?1:-1}}(t)),r=o.length,n=0;n<r;)e[n]=o[n++];for(;n<s;)delete e[n++];return e}})},function(t,e,r){r(64)("Array")},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(43),a=r(20),u=r(15),c=r(14),s=r(77),f=r(44),l=r(81)("splice"),h=o.TypeError,p=Math.max,d=Math.min;n({target:"Array",proto:!0,forced:!l},{splice:function(t,e){var r,n,o,l,v,g,y=c(this),m=u(y),b=i(t,m),x=arguments.length;if(0===x?r=n=0:1===x?(r=0,n=m-b):(r=x-2,n=d(p(a(e),0),m-b)),m+r-n>9007199254740991)throw h("Maximum allowed length exceeded");for(o=s(y,n),l=0;l<n;l++)(v=b+l)in y&&f(o,l,y[v]);if(o.length=n,r<n){for(l=b;l<m-n;l++)g=l+r,(v=l+n)in y?y[g]=y[v]:delete y[g];for(l=m;l>m-n+r;l--)delete y[l-1]}else if(r>n)for(l=m-n;l>b;l--)g=l+r-1,(v=l+n-1)in y?y[g]=y[v]:delete y[g];for(l=0;l<r;l++)y[l+b]=arguments[l+2];return y.length=m-n+r,o}})},function(t,e,r){r(46)("flat")},function(t,e,r){r(46)("flatMap")},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(96),a=r(64),u=i.ArrayBuffer;n({global:!0,forced:o.ArrayBuffer!==u},{ArrayBuffer:u}),a("ArrayBuffer")},function(t,e,r){var n=r(1).Array,o=Math.abs,i=Math.pow,a=Math.floor,u=Math.log,c=Math.LN2;t.exports={pack:function(t,e,r){var s,f,l,h=n(r),p=8*r-e-1,d=(1<<p)-1,v=d>>1,g=23===e?i(2,-24)-i(2,-77):0,y=t<0||0===t&&1/t<0?1:0,m=0;for((t=o(t))!=t||t===1/0?(f=t!=t?1:0,s=d):(s=a(u(t)/c),t*(l=i(2,-s))<1&&(s--,l*=2),(t+=s+v>=1?g/l:g*i(2,1-v))*l>=2&&(s++,l/=2),s+v>=d?(f=0,s=d):s+v>=1?(f=(t*l-1)*i(2,e),s+=v):(f=t*i(2,v-1)*i(2,e),s=0));e>=8;)h[m++]=255&f,f/=256,e-=8;for(s=s<<e|f,p+=e;p>0;)h[m++]=255&s,s/=256,p-=8;return h[--m]|=128*y,h},unpack:function(t,e){var r,n=t.length,o=8*n-e-1,a=(1<<o)-1,u=a>>1,c=o-7,s=n-1,f=t[s--],l=127&f;for(f>>=7;c>0;)l=256*l+t[s--],c-=8;for(r=l&(1<<-c)-1,l>>=-c,c+=e;c>0;)r=256*r+t[s--],c-=8;if(0===l)l=1-u;else{if(l===a)return r?NaN:f?-1/0:1/0;r+=i(2,e),l-=u}return(f?-1:1)*r*i(2,l-e)}}},function(t,e,r){var n=r(0),o=r(10);n({target:"ArrayBuffer",stat:!0,forced:!o.NATIVE_ARRAY_BUFFER_VIEWS},{isView:o.isView})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(2),a=r(96),u=r(4),c=r(43),s=r(30),f=r(66),l=a.ArrayBuffer,h=a.DataView,p=h.prototype,d=o(l.prototype.slice),v=o(p.getUint8),g=o(p.setUint8);n({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new l(2).slice(1,void 0).byteLength}))},{slice:function(t,e){if(d&&void 0===e)return d(u(this),t);for(var r=u(this).byteLength,n=c(t,r),o=c(void 0===e?r:e,r),i=new(f(this,l))(s(o-n)),a=new h(this),p=new h(i),y=0;n<o;)g(p,y++,v(a,n++));return i}})},function(t,e,r){var n=r(0),o=r(96);n({global:!0,forced:!r(128)},{DataView:o.DataView})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(2)((function(){return 120!==new Date(16e11).getYear()})),a=o(Date.prototype.getFullYear);n({target:"Date",proto:!0,forced:i},{getYear:function(){return a(this)-1900}})},function(t,e,r){var n=r(0),o=r(1),i=r(3),a=o.Date,u=i(a.prototype.getTime);n({target:"Date",stat:!0},{now:function(){return u(new a)}})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(20),a=Date.prototype,u=o(a.getTime),c=o(a.setFullYear);n({target:"Date",proto:!0},{setYear:function(t){u(this);var e=i(t);return c(this,0<=e&&e<=99?e+1900:e)}})},function(t,e,r){r(0)({target:"Date",proto:!0},{toGMTString:Date.prototype.toUTCString})},function(t,e,r){var n=r(0),o=r(255);n({target:"Date",proto:!0,forced:Date.prototype.toISOString!==o},{toISOString:o})},function(t,e,r){"use strict";var n=r(1),o=r(3),i=r(2),a=r(130).start,u=n.RangeError,c=Math.abs,s=Date.prototype,f=s.toISOString,l=o(s.getTime),h=o(s.getUTCDate),p=o(s.getUTCFullYear),d=o(s.getUTCHours),v=o(s.getUTCMilliseconds),g=o(s.getUTCMinutes),y=o(s.getUTCMonth),m=o(s.getUTCSeconds);t.exports=i((function(){return"0385-07-25T07:06:39.999Z"!=f.call(new Date(-50000000000001))}))||!i((function(){f.call(new Date(NaN))}))?function(){if(!isFinite(l(this)))throw u("Invalid time value");var t=p(this),e=v(this),r=t<0?"-":t>9999?"+":"";return r+a(c(t),r?6:4,0)+"-"+a(y(this)+1,2,0)+"-"+a(h(this),2,0)+"T"+a(d(this),2,0)+":"+a(g(this),2,0)+":"+a(m(this),2,0)+"."+a(e,3,0)+"Z"}:f},function(t,e,r){"use strict";var n=r(0),o=r(2),i=r(14),a=r(111);n({target:"Date",proto:!0,forced:o((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(t){var e=i(this),r=a(e,"number");return"number"!=typeof r||isFinite(r)?e.toISOString():null}})},function(t,e,r){var n=r(12),o=r(17),i=r(258),a=r(7)("toPrimitive"),u=Date.prototype;n(u,a)||o(u,a,i)},function(t,e,r){"use strict";var n=r(1),o=r(4),i=r(143),a=n.TypeError;t.exports=function(t){if(o(this),"string"===t||"default"===t)t="string";else if("number"!==t)throw a("Incorrect hint");return i(this,t)}},function(t,e,r){var n=r(3),o=r(17),i=Date.prototype,a=n(i.toString),u=n(i.getTime);"Invalid Date"!=String(new Date(NaN))&&o(i,"toString",(function(){var t=u(this);return t==t?a(this):"Invalid Date"}))},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(8),a=o("".charAt),u=o("".charCodeAt),c=o(/./.exec),s=o(1..toString),f=o("".toUpperCase),l=/[\w*+\-./@]/,h=function(t,e){for(var r=s(t,16);r.length<e;)r="0"+r;return r};n({global:!0},{escape:function(t){for(var e,r,n=i(t),o="",s=n.length,p=0;p<s;)e=a(n,p++),c(l,e)?o+=e:o+=(r=u(e,0))<256?"%"+h(r,2):"%u"+f(h(r,4));return o}})},function(t,e,r){var n=r(0),o=r(165);n({target:"Function",proto:!0,forced:Function.bind!==o},{bind:o})},function(t,e,r){"use strict";var n=r(9),o=r(6),i=r(13),a=r(37),u=r(7)("hasInstance"),c=Function.prototype;u in c||i.f(c,u,{value:function(t){if(!n(this)||!o(t))return!1;var e=this.prototype;if(!o(e))return t instanceof this;for(;t=a(t);)if(e===t)return!0;return!1}})},function(t,e,r){var n=r(5),o=r(61).EXISTS,i=r(3),a=r(13).f,u=Function.prototype,c=i(u.toString),s=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,f=i(s.exec);n&&!o&&a(u,"name",{configurable:!0,get:function(){try{return f(s,c(this))[1]}catch(t){return""}}})},function(t,e,r){r(0)({global:!0},{globalThis:r(1)})},function(t,e,r){var n=r(0),o=r(1),i=r(16),a=r(31),u=r(3),c=r(2),s=o.Array,f=i("JSON","stringify"),l=u(/./.exec),h=u("".charAt),p=u("".charCodeAt),d=u("".replace),v=u(1..toString),g=/[\uD800-\uDFFF]/g,y=/^[\uD800-\uDBFF]$/,m=/^[\uDC00-\uDFFF]$/,b=function(t,e,r){var n=h(r,e-1),o=h(r,e+1);return l(y,t)&&!l(m,o)||l(m,t)&&!l(y,n)?"\\u"+v(p(t,0),16):t},x=c((function(){return'"\\udf06\\ud834"'!==f("\udf06\ud834")||'"\\udead"'!==f("\udead")}));f&&n({target:"JSON",stat:!0,forced:x},{stringify:function(t,e,r){for(var n=0,o=arguments.length,i=s(o);n<o;n++)i[n]=arguments[n];var u=a(f,null,i);return"string"==typeof u?d(u,g,b):u}})},function(t,e,r){var n=r(1);r(36)(n.JSON,"JSON",!0)},function(t,e,r){"use strict";r(98)("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(166))},function(t,e,r){var n=r(0),o=r(167),i=Math.acosh,a=Math.log,u=Math.sqrt,c=Math.LN2;n({target:"Math",stat:!0,forced:!i||710!=Math.floor(i(Number.MAX_VALUE))||i(1/0)!=1/0},{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?a(t)+c:o(t-1+u(t-1)*u(t+1))}})},function(t,e,r){var n=r(0),o=Math.asinh,i=Math.log,a=Math.sqrt;n({target:"Math",stat:!0,forced:!(o&&1/o(0)>0)},{asinh:function t(e){return isFinite(e=+e)&&0!=e?e<0?-t(-e):i(e+a(e*e+1)):e}})},function(t,e,r){var n=r(0),o=Math.atanh,i=Math.log;n({target:"Math",stat:!0,forced:!(o&&1/o(-0)<0)},{atanh:function(t){return 0==(t=+t)?t:i((1+t)/(1-t))/2}})},function(t,e,r){var n=r(0),o=r(132),i=Math.abs,a=Math.pow;n({target:"Math",stat:!0},{cbrt:function(t){return o(t=+t)*a(i(t),1/3)}})},function(t,e,r){var n=r(0),o=Math.floor,i=Math.log,a=Math.LOG2E;n({target:"Math",stat:!0},{clz32:function(t){return(t>>>=0)?31-o(i(t+.5)*a):32}})},function(t,e,r){var n=r(0),o=r(100),i=Math.cosh,a=Math.abs,u=Math.E;n({target:"Math",stat:!0,forced:!i||i(710)===1/0},{cosh:function(t){var e=o(a(t)-1)+1;return(e+1/(e*u*u))*(u/2)}})},function(t,e,r){var n=r(0),o=r(100);n({target:"Math",stat:!0,forced:o!=Math.expm1},{expm1:o})},function(t,e,r){r(0)({target:"Math",stat:!0},{fround:r(276)})},function(t,e,r){var n=r(132),o=Math.abs,i=Math.pow,a=i(2,-52),u=i(2,-23),c=i(2,127)*(2-u),s=i(2,-126);t.exports=Math.fround||function(t){var e,r,i=o(t),f=n(t);return i<s?f*(i/s/u+1/a-1/a)*s*u:(r=(e=(1+u/a)*i)-(e-i))>c||r!=r?f*(1/0):f*r}},function(t,e,r){var n=r(0),o=Math.hypot,i=Math.abs,a=Math.sqrt;n({target:"Math",stat:!0,forced:!!o&&o(1/0,NaN)!==1/0},{hypot:function(t,e){for(var r,n,o=0,u=0,c=arguments.length,s=0;u<c;)s<(r=i(arguments[u++]))?(o=o*(n=s/r)*n+1,s=r):o+=r>0?(n=r/s)*n:r;return s===1/0?1/0:s*a(o)}})},function(t,e,r){var n=r(0),o=r(2),i=Math.imul;n({target:"Math",stat:!0,forced:o((function(){return-5!=i(4294967295,5)||2!=i.length}))},{imul:function(t,e){var r=+t,n=+e,o=65535&r,i=65535&n;return 0|o*i+((65535&r>>>16)*i+o*(65535&n>>>16)<<16>>>0)}})},function(t,e,r){r(0)({target:"Math",stat:!0},{log10:r(168)})},function(t,e,r){r(0)({target:"Math",stat:!0},{log1p:r(167)})},function(t,e,r){var n=r(0),o=Math.log,i=Math.LN2;n({target:"Math",stat:!0},{log2:function(t){return o(t)/i}})},function(t,e,r){r(0)({target:"Math",stat:!0},{sign:r(132)})},function(t,e,r){var n=r(0),o=r(2),i=r(100),a=Math.abs,u=Math.exp,c=Math.E;n({target:"Math",stat:!0,forced:o((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(t){return a(t=+t)<1?(i(t)-i(-t))/2:(u(t-1)-u(-t-1))*(c/2)}})},function(t,e,r){var n=r(0),o=r(100),i=Math.exp;n({target:"Math",stat:!0},{tanh:function(t){var e=o(t=+t),r=o(-t);return e==1/0?1:r==1/0?-1:(e-r)/(i(t)+i(-t))}})},function(t,e,r){r(36)(Math,"Math",!0)},function(t,e,r){var n=r(0),o=Math.ceil,i=Math.floor;n({target:"Math",stat:!0},{trunc:function(t){return(t>0?i:o)(t)}})},function(t,e,r){"use strict";var n=r(5),o=r(1),i=r(3),a=r(73),u=r(17),c=r(12),s=r(63),f=r(29),l=r(59),h=r(111),p=r(2),d=r(51).f,v=r(23).f,g=r(13).f,y=r(101),m=r(67).trim,b=o.Number,x=b.prototype,w=o.TypeError,E=i("".slice),S=i("".charCodeAt),A=function(t){var e=h(t,"number");return"bigint"==typeof e?e:O(e)},O=function(t){var e,r,n,o,i,a,u,c,s=h(t,"number");if(l(s))throw w("Cannot convert a Symbol value to a number");if("string"==typeof s&&s.length>2)if(s=m(s),43===(e=S(s,0))||45===e){if(88===(r=S(s,2))||120===r)return NaN}else if(48===e){switch(S(s,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+s}for(a=(i=E(s,2)).length,u=0;u<a;u++)if((c=S(i,u))<48||c>o)return NaN;return parseInt(i,n)}return+s};if(a("Number",!b(" 0o1")||!b("0b1")||b("+0x1"))){for(var R,I=function(t){var e=arguments.length<1?0:b(A(t)),r=this;return f(x,r)&&p((function(){y(r)}))?s(Object(e),r,I):e},M=n?d(b):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),T=0;M.length>T;T++)c(b,R=M[T])&&!c(I,R)&&g(I,R,v(b,R));I.prototype=x,x.constructor=I,u(o,"Number",I)}},function(t,e,r){r(0)({target:"Number",stat:!0},{EPSILON:Math.pow(2,-52)})},function(t,e,r){r(0)({target:"Number",stat:!0},{isFinite:r(290)})},function(t,e,r){var n=r(1).isFinite;t.exports=Number.isFinite||function(t){return"number"==typeof t&&n(t)}},function(t,e,r){r(0)({target:"Number",stat:!0},{isInteger:r(133)})},function(t,e,r){r(0)({target:"Number",stat:!0},{isNaN:function(t){return t!=t}})},function(t,e,r){var n=r(0),o=r(133),i=Math.abs;n({target:"Number",stat:!0},{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,e,r){r(0)({target:"Number",stat:!0},{MAX_SAFE_INTEGER:9007199254740991})},function(t,e,r){r(0)({target:"Number",stat:!0},{MIN_SAFE_INTEGER:-9007199254740991})},function(t,e,r){var n=r(0),o=r(169);n({target:"Number",stat:!0,forced:Number.parseFloat!=o},{parseFloat:o})},function(t,e,r){var n=r(0),o=r(170);n({target:"Number",stat:!0,forced:Number.parseInt!=o},{parseInt:o})},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(3),a=r(20),u=r(101),c=r(97),s=r(168),f=r(2),l=o.RangeError,h=o.String,p=o.isFinite,d=Math.abs,v=Math.floor,g=Math.pow,y=Math.round,m=i(1..toExponential),b=i(c),x=i("".slice),w="-6.9000e-11"===m(-69e-12,4)&&"1.25e+0"===m(1.255,2)&&"1.235e+4"===m(12345,3)&&"3e+1"===m(25,0),E=f((function(){m(1,1/0)}))&&f((function(){m(1,-1/0)})),S=!f((function(){m(1/0,1/0)}))&&!f((function(){m(NaN,1/0)}));n({target:"Number",proto:!0,forced:!w||!E||!S},{toExponential:function(t){var e=u(this);if(void 0===t)return m(e);var r=a(t);if(!p(e))return h(e);if(r<0||r>20)throw l("Incorrect fraction digits");if(w)return m(e,r);var n="",o="",i=0,c="",f="";if(e<0&&(n="-",e=-e),0===e)i=0,o=b("0",r+1);else{var E=s(e);i=v(E);var S=0,A=g(10,i-r);2*e>=(2*(S=y(e/A))+1)*A&&(S+=1),S>=g(10,r+1)&&(S/=10,i+=1),o=h(S)}return 0!==r&&(o=x(o,0,1)+"."+x(o,1)),0===i?(c="+",f="0"):(c=i>0?"+":"-",f=h(d(i))),n+(o+="e"+c+f)}})},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(3),a=r(20),u=r(101),c=r(97),s=r(2),f=o.RangeError,l=o.String,h=Math.floor,p=i(c),d=i("".slice),v=i(1..toFixed),g=function(t,e,r){return 0===e?r:e%2==1?g(t,e-1,r*t):g(t*t,e/2,r)},y=function(t,e,r){for(var n=-1,o=r;++n<6;)o+=e*t[n],t[n]=o%1e7,o=h(o/1e7)},m=function(t,e){for(var r=6,n=0;--r>=0;)n+=t[r],t[r]=h(n/e),n=n%e*1e7},b=function(t){for(var e=6,r="";--e>=0;)if(""!==r||0===e||0!==t[e]){var n=l(t[e]);r=""===r?n:r+p("0",7-n.length)+n}return r};n({target:"Number",proto:!0,forced:s((function(){return"0.000"!==v(8e-5,3)||"1"!==v(.9,0)||"1.25"!==v(1.255,2)||"1000000000000000128"!==v(0xde0b6b3a7640080,0)}))||!s((function(){v({})}))},{toFixed:function(t){var e,r,n,o,i=u(this),c=a(t),s=[0,0,0,0,0,0],h="",v="0";if(c<0||c>20)throw f("Incorrect fraction digits");if(i!=i)return"NaN";if(i<=-1e21||i>=1e21)return l(i);if(i<0&&(h="-",i=-i),i>1e-21)if(r=(e=function(t){for(var e=0,r=t;r>=4096;)e+=12,r/=4096;for(;r>=2;)e+=1,r/=2;return e}(i*g(2,69,1))-69)<0?i*g(2,-e,1):i/g(2,e,1),r*=4503599627370496,(e=52-e)>0){for(y(s,0,r),n=c;n>=7;)y(s,1e7,0),n-=7;for(y(s,g(10,n,1),0),n=e-1;n>=23;)m(s,1<<23),n-=23;m(s,1<<n),y(s,1,1),m(s,2),v=b(s)}else y(s,0,r),y(s,1<<-e,0),v=b(s)+p("0",c);return v=c>0?h+((o=v.length)<=c?"0."+p("0",c-o)+v:d(v,0,o-c)+"."+d(v,o-c)):h+v}})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(2),a=r(101),u=o(1..toPrecision);n({target:"Number",proto:!0,forced:i((function(){return"1"!==u(1,void 0)}))||!i((function(){u({})}))},{toPrecision:function(t){return void 0===t?u(a(this)):u(a(this),t)}})},function(t,e,r){var n=r(0),o=r(171);n({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},function(t,e,r){r(0)({target:"Object",stat:!0,sham:!r(5)},{create:r(32)})},function(t,e,r){"use strict";var n=r(0),o=r(5),i=r(103),a=r(24),u=r(14),c=r(13);o&&n({target:"Object",proto:!0,forced:i},{__defineGetter__:function(t,e){c.f(u(this),t,{get:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){var n=r(0),o=r(5),i=r(74).f;n({target:"Object",stat:!0,forced:Object.defineProperties!==i,sham:!o},{defineProperties:i})},function(t,e,r){var n=r(0),o=r(5),i=r(13).f;n({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!o},{defineProperty:i})},function(t,e,r){"use strict";var n=r(0),o=r(5),i=r(103),a=r(24),u=r(14),c=r(13);o&&n({target:"Object",proto:!0,forced:i},{__defineSetter__:function(t,e){c.f(u(this),t,{set:a(e),enumerable:!0,configurable:!0})}})},function(t,e,r){var n=r(0),o=r(172).entries;n({target:"Object",stat:!0},{entries:function(t){return o(t)}})},function(t,e,r){var n=r(0),o=r(82),i=r(2),a=r(6),u=r(57).onFreeze,c=Object.freeze;n({target:"Object",stat:!0,forced:i((function(){c(1)})),sham:!o},{freeze:function(t){return c&&a(t)?c(u(t)):t}})},function(t,e,r){var n=r(0),o=r(45),i=r(44);n({target:"Object",stat:!0},{fromEntries:function(t){var e={};return o(t,(function(t,r){i(e,t,r)}),{AS_ENTRIES:!0}),e}})},function(t,e,r){var n=r(0),o=r(2),i=r(26),a=r(23).f,u=r(5),c=o((function(){a(1)}));n({target:"Object",stat:!0,forced:!u||c,sham:!u},{getOwnPropertyDescriptor:function(t,e){return a(i(t),e)}})},function(t,e,r){var n=r(0),o=r(5),i=r(115),a=r(26),u=r(23),c=r(44);n({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(t){for(var e,r,n=a(t),o=u.f,s=i(n),f={},l=0;s.length>l;)void 0!==(r=o(n,e=s[l++]))&&c(f,e,r);return f}})},function(t,e,r){var n=r(0),o=r(2),i=r(119).f;n({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:i})},function(t,e,r){var n=r(0),o=r(2),i=r(14),a=r(37),u=r(121);n({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!u},{getPrototypeOf:function(t){return a(i(t))}})},function(t,e,r){r(0)({target:"Object",stat:!0},{hasOwn:r(12)})},function(t,e,r){r(0)({target:"Object",stat:!0},{is:r(173)})},function(t,e,r){var n=r(0),o=r(99);n({target:"Object",stat:!0,forced:Object.isExtensible!==o},{isExtensible:o})},function(t,e,r){var n=r(0),o=r(2),i=r(6),a=r(28),u=r(131),c=Object.isFrozen;n({target:"Object",stat:!0,forced:o((function(){c(1)}))||u},{isFrozen:function(t){return!i(t)||(!(!u||"ArrayBuffer"!=a(t))||!!c&&c(t))}})},function(t,e,r){var n=r(0),o=r(2),i=r(6),a=r(28),u=r(131),c=Object.isSealed;n({target:"Object",stat:!0,forced:o((function(){c(1)}))||u},{isSealed:function(t){return!i(t)||(!(!u||"ArrayBuffer"!=a(t))||!!c&&c(t))}})},function(t,e,r){var n=r(0),o=r(14),i=r(75);n({target:"Object",stat:!0,forced:r(2)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},function(t,e,r){"use strict";var n=r(0),o=r(5),i=r(103),a=r(14),u=r(49),c=r(37),s=r(23).f;o&&n({target:"Object",proto:!0,forced:i},{__lookupGetter__:function(t){var e,r=a(this),n=u(t);do{if(e=s(r,n))return e.get}while(r=c(r))}})},function(t,e,r){"use strict";var n=r(0),o=r(5),i=r(103),a=r(14),u=r(49),c=r(37),s=r(23).f;o&&n({target:"Object",proto:!0,forced:i},{__lookupSetter__:function(t){var e,r=a(this),n=u(t);do{if(e=s(r,n))return e.set}while(r=c(r))}})},function(t,e,r){var n=r(0),o=r(6),i=r(57).onFreeze,a=r(82),u=r(2),c=Object.preventExtensions;n({target:"Object",stat:!0,forced:u((function(){c(1)})),sham:!a},{preventExtensions:function(t){return c&&o(t)?c(i(t)):t}})},function(t,e,r){var n=r(0),o=r(6),i=r(57).onFreeze,a=r(82),u=r(2),c=Object.seal;n({target:"Object",stat:!0,forced:u((function(){c(1)})),sham:!a},{seal:function(t){return c&&o(t)?c(i(t)):t}})},function(t,e,r){r(0)({target:"Object",stat:!0},{setPrototypeOf:r(39)})},function(t,e,r){var n=r(118),o=r(17),i=r(326);n||o(Object.prototype,"toString",i,{unsafe:!0})},function(t,e,r){"use strict";var n=r(118),o=r(52);t.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},function(t,e,r){var n=r(0),o=r(172).values;n({target:"Object",stat:!0},{values:function(t){return o(t)}})},function(t,e,r){var n=r(0),o=r(169);n({global:!0,forced:parseFloat!=o},{parseFloat:o})},function(t,e,r){var n=r(0),o=r(170);n({global:!0,forced:parseInt!=o},{parseInt:o})},function(t,e,r){"use strict";var n,o,i,a,u=r(0),c=r(21),s=r(1),f=r(16),l=r(11),h=r(174),p=r(17),d=r(65),v=r(39),g=r(36),y=r(64),m=r(24),b=r(9),x=r(6),w=r(40),E=r(88),S=r(45),A=r(93),O=r(66),R=r(134).set,I=r(176),M=r(177),T=r(333),k=r(104),j=r(135),P=r(334),_=r(19),L=r(73),D=r(7),N=r(335),C=r(56),U=r(50),$=D("species"),F="Promise",B=_.getterFor(F),z=_.set,W=_.getterFor(F),q=h&&h.prototype,G=h,V=q,Y=s.TypeError,H=s.document,K=s.process,J=k.f,X=J,Q=!!(H&&H.createEvent&&s.dispatchEvent),Z=b(s.PromiseRejectionEvent),tt=!1,et=L(F,(function(){var t=E(G),e=t!==String(G);if(!e&&66===U)return!0;if(c&&!V.finally)return!0;if(U>=51&&/native code/.test(t))return!1;var r=new G((function(t){t(1)})),n=function(t){t((function(){}),(function(){}))};return(r.constructor={})[$]=n,!(tt=r.then((function(){}))instanceof n)||!e&&N&&!Z})),rt=et||!A((function(t){G.all(t).catch((function(){}))})),nt=function(t){var e;return!(!x(t)||!b(e=t.then))&&e},ot=function(t,e){var r,n,o,i=e.value,a=1==e.state,u=a?t.ok:t.fail,c=t.resolve,s=t.reject,f=t.domain;try{u?(a||(2===e.rejection&&st(e),e.rejection=1),!0===u?r=i:(f&&f.enter(),r=u(i),f&&(f.exit(),o=!0)),r===t.promise?s(Y("Promise-chain cycle")):(n=nt(r))?l(n,r,c,s):c(r)):s(i)}catch(t){f&&!o&&f.exit(),s(t)}},it=function(t,e){t.notified||(t.notified=!0,I((function(){for(var r,n=t.reactions;r=n.get();)ot(r,t);t.notified=!1,e&&!t.rejection&&ut(t)})))},at=function(t,e,r){var n,o;Q?((n=H.createEvent("Event")).promise=e,n.reason=r,n.initEvent(t,!1,!0),s.dispatchEvent(n)):n={promise:e,reason:r},!Z&&(o=s["on"+t])?o(n):"unhandledrejection"===t&&T("Unhandled promise rejection",r)},ut=function(t){l(R,s,(function(){var e,r=t.facade,n=t.value;if(ct(t)&&(e=j((function(){C?K.emit("unhandledRejection",n,r):at("unhandledrejection",r,n)})),t.rejection=C||ct(t)?2:1,e.error))throw e.value}))},ct=function(t){return 1!==t.rejection&&!t.parent},st=function(t){l(R,s,(function(){var e=t.facade;C?K.emit("rejectionHandled",e):at("rejectionhandled",e,t.value)}))},ft=function(t,e,r){return function(n){t(e,n,r)}},lt=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,it(t,!0))},ht=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw Y("Promise can't be resolved itself");var n=nt(e);n?I((function(){var r={done:!1};try{l(n,e,ft(ht,r,t),ft(lt,r,t))}catch(e){lt(r,e,t)}})):(t.value=e,t.state=1,it(t,!1))}catch(e){lt({done:!1},e,t)}}};if(et&&(V=(G=function(t){w(this,V),m(t),l(n,this);var e=B(this);try{t(ft(ht,e),ft(lt,e))}catch(t){lt(e,t)}}).prototype,(n=function(t){z(this,{type:F,done:!1,notified:!1,parent:!1,reactions:new P,rejection:!1,state:0,value:void 0})}).prototype=d(V,{then:function(t,e){var r=W(this),n=J(O(this,G));return r.parent=!0,n.ok=!b(t)||t,n.fail=b(e)&&e,n.domain=C?K.domain:void 0,0==r.state?r.reactions.add(n):I((function(){ot(n,r)})),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new n,e=B(t);this.promise=t,this.resolve=ft(ht,e),this.reject=ft(lt,e)},k.f=J=function(t){return t===G||t===i?new o(t):X(t)},!c&&b(h)&&q!==Object.prototype)){a=q.then,tt||(p(q,"then",(function(t,e){var r=this;return new G((function(t,e){l(a,r,t,e)})).then(t,e)}),{unsafe:!0}),p(q,"catch",V.catch,{unsafe:!0}));try{delete q.constructor}catch(t){}v&&v(q,V)}u({global:!0,wrap:!0,forced:et},{Promise:G}),g(G,F,!1,!0),y(F),i=f(F),u({target:F,stat:!0,forced:et},{reject:function(t){var e=J(this);return l(e.reject,void 0,t),e.promise}}),u({target:F,stat:!0,forced:c||et},{resolve:function(t){return M(c&&this===i?G:this,t)}}),u({target:F,stat:!0,forced:rt},{all:function(t){var e=this,r=J(e),n=r.resolve,o=r.reject,i=j((function(){var r=m(e.resolve),i=[],a=0,u=1;S(t,(function(t){var c=a++,s=!1;u++,l(r,e,t).then((function(t){s||(s=!0,i[c]=t,--u||n(i))}),o)})),--u||n(i)}));return i.error&&o(i.value),r.promise},race:function(t){var e=this,r=J(e),n=r.reject,o=j((function(){var o=m(e.resolve);S(t,(function(t){l(o,e,t).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},function(t,e,r){var n=r(41),o=r(1);t.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},function(t,e,r){var n=r(41);t.exports=/web0s(?!.*chrome)/i.test(n)},function(t,e,r){var n=r(1);t.exports=function(t,e){var r=n.console;r&&r.error&&(1==arguments.length?r.error(t):r.error(t,e))}},function(t,e){var r=function(){this.head=null,this.tail=null};r.prototype={add:function(t){var e={item:t,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var t=this.head;if(t)return this.head=t.next,this.tail===t&&(this.tail=null),t.item}},t.exports=r},function(t,e){t.exports="object"==typeof window},function(t,e,r){"use strict";var n=r(0),o=r(11),i=r(24),a=r(104),u=r(135),c=r(45);n({target:"Promise",stat:!0},{allSettled:function(t){var e=this,r=a.f(e),n=r.resolve,s=r.reject,f=u((function(){var r=i(e.resolve),a=[],u=0,s=1;c(t,(function(t){var i=u++,c=!1;s++,o(r,e,t).then((function(t){c||(c=!0,a[i]={status:"fulfilled",value:t},--s||n(a))}),(function(t){c||(c=!0,a[i]={status:"rejected",reason:t},--s||n(a))}))})),--s||n(a)}));return f.error&&s(f.value),r.promise}})},function(t,e,r){"use strict";var n=r(0),o=r(24),i=r(16),a=r(11),u=r(104),c=r(135),s=r(45);n({target:"Promise",stat:!0},{any:function(t){var e=this,r=i("AggregateError"),n=u.f(e),f=n.resolve,l=n.reject,h=c((function(){var n=o(e.resolve),i=[],u=0,c=1,h=!1;s(t,(function(t){var o=u++,s=!1;c++,a(n,e,t).then((function(t){s||h||(h=!0,f(t))}),(function(t){s||h||(s=!0,i[o]=t,--c||l(new r(i,"No one promise resolved")))}))})),--c||l(new r(i,"No one promise resolved"))}));return h.error&&l(h.value),n.promise}})},function(t,e,r){"use strict";var n=r(0),o=r(21),i=r(174),a=r(2),u=r(16),c=r(9),s=r(66),f=r(177),l=r(17);if(n({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(t){var e=s(this,u("Promise")),r=c(t);return this.then(r?function(r){return f(e,t()).then((function(){return r}))}:t,r?function(r){return f(e,t()).then((function(){throw r}))}:t)}}),!o&&c(i)){var h=u("Promise").prototype.finally;i.prototype.finally!==h&&l(i.prototype,"finally",h,{unsafe:!0})}},function(t,e,r){var n=r(0),o=r(31),i=r(24),a=r(4);n({target:"Reflect",stat:!0,forced:!r(2)((function(){Reflect.apply((function(){}))}))},{apply:function(t,e,r){return o(i(t),e,a(r))}})},function(t,e,r){var n=r(0),o=r(16),i=r(31),a=r(165),u=r(129),c=r(4),s=r(6),f=r(32),l=r(2),h=o("Reflect","construct"),p=Object.prototype,d=[].push,v=l((function(){function t(){}return!(h((function(){}),[],t)instanceof t)})),g=!l((function(){h((function(){}))})),y=v||g;n({target:"Reflect",stat:!0,forced:y,sham:y},{construct:function(t,e){u(t),c(e);var r=arguments.length<3?t:u(arguments[2]);if(g&&!v)return h(t,e,r);if(t==r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return i(d,n,e),new(i(a,t,n))}var o=r.prototype,l=f(s(o)?o:p),y=i(t,l,e);return s(y)?y:l}})},function(t,e,r){var n=r(0),o=r(5),i=r(4),a=r(49),u=r(13);n({target:"Reflect",stat:!0,forced:r(2)((function(){Reflect.defineProperty(u.f({},1,{value:1}),1,{value:2})})),sham:!o},{defineProperty:function(t,e,r){i(t);var n=a(e);i(r);try{return u.f(t,n,r),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),o=r(4),i=r(23).f;n({target:"Reflect",stat:!0},{deleteProperty:function(t,e){var r=i(o(t),e);return!(r&&!r.configurable)&&delete t[e]}})},function(t,e,r){var n=r(0),o=r(11),i=r(6),a=r(4),u=r(178),c=r(23),s=r(37);n({target:"Reflect",stat:!0},{get:function t(e,r){var n,f,l=arguments.length<3?e:arguments[2];return a(e)===l?e[r]:(n=c.f(e,r))?u(n)?n.value:void 0===n.get?void 0:o(n.get,l):i(f=s(e))?t(f,r,l):void 0}})},function(t,e,r){var n=r(0),o=r(5),i=r(4),a=r(23);n({target:"Reflect",stat:!0,sham:!o},{getOwnPropertyDescriptor:function(t,e){return a.f(i(t),e)}})},function(t,e,r){var n=r(0),o=r(4),i=r(37);n({target:"Reflect",stat:!0,sham:!r(121)},{getPrototypeOf:function(t){return i(o(t))}})},function(t,e,r){r(0)({target:"Reflect",stat:!0},{has:function(t,e){return e in t}})},function(t,e,r){var n=r(0),o=r(4),i=r(99);n({target:"Reflect",stat:!0},{isExtensible:function(t){return o(t),i(t)}})},function(t,e,r){r(0)({target:"Reflect",stat:!0},{ownKeys:r(115)})},function(t,e,r){var n=r(0),o=r(16),i=r(4);n({target:"Reflect",stat:!0,sham:!r(82)},{preventExtensions:function(t){i(t);try{var e=o("Object","preventExtensions");return e&&e(t),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),o=r(11),i=r(4),a=r(6),u=r(178),c=r(2),s=r(13),f=r(23),l=r(37),h=r(35);n({target:"Reflect",stat:!0,forced:c((function(){var t=function(){},e=s.f(new t,"a",{configurable:!0});return!1!==Reflect.set(t.prototype,"a",1,e)}))},{set:function t(e,r,n){var c,p,d,v=arguments.length<4?e:arguments[3],g=f.f(i(e),r);if(!g){if(a(p=l(e)))return t(p,r,n,v);g=h(0)}if(u(g)){if(!1===g.writable||!a(v))return!1;if(c=f.f(v,r)){if(c.get||c.set||!1===c.writable)return!1;c.value=n,s.f(v,r,c)}else s.f(v,r,h(0,n))}else{if(void 0===(d=g.set))return!1;o(d,v,n)}return!0}})},function(t,e,r){var n=r(0),o=r(4),i=r(152),a=r(39);a&&n({target:"Reflect",stat:!0},{setPrototypeOf:function(t,e){o(t),i(e);try{return a(t,e),!0}catch(t){return!1}}})},function(t,e,r){var n=r(0),o=r(1),i=r(36);n({global:!0},{Reflect:{}}),i(o.Reflect,"Reflect",!0)},function(t,e,r){var n=r(5),o=r(1),i=r(3),a=r(73),u=r(63),c=r(25),s=r(13).f,f=r(51).f,l=r(29),h=r(83),p=r(8),d=r(58),v=r(105),g=r(17),y=r(2),m=r(12),b=r(19).enforce,x=r(64),w=r(7),E=r(136),S=r(179),A=w("match"),O=o.RegExp,R=O.prototype,I=o.SyntaxError,M=i(d),T=i(R.exec),k=i("".charAt),j=i("".replace),P=i("".indexOf),_=i("".slice),L=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,D=/a/g,N=/a/g,C=new O(D)!==D,U=v.MISSED_STICKY,$=v.UNSUPPORTED_Y,F=n&&(!C||U||E||S||y((function(){return N[A]=!1,O(D)!=D||O(N)==N||"/a/i"!=O(D,"i")})));if(a("RegExp",F)){for(var B=function(t,e){var r,n,o,i,a,s,f=l(R,this),d=h(t),v=void 0===e,g=[],y=t;if(!f&&d&&v&&t.constructor===B)return t;if((d||l(R,t))&&(t=t.source,v&&(e="flags"in y?y.flags:M(y))),t=void 0===t?"":p(t),e=void 0===e?"":p(e),y=t,E&&"dotAll"in D&&(n=!!e&&P(e,"s")>-1)&&(e=j(e,/s/g,"")),r=e,U&&"sticky"in D&&(o=!!e&&P(e,"y")>-1)&&$&&(e=j(e,/y/g,"")),S&&(t=(i=function(t){for(var e,r=t.length,n=0,o="",i=[],a={},u=!1,c=!1,s=0,f="";n<=r;n++){if("\\"===(e=k(t,n)))e+=k(t,++n);else if("]"===e)u=!1;else if(!u)switch(!0){case"["===e:u=!0;break;case"("===e:T(L,_(t,n+1))&&(n+=2,c=!0),o+=e,s++;continue;case">"===e&&c:if(""===f||m(a,f))throw new I("Invalid capture group name");a[f]=!0,i[i.length]=[f,s],c=!1,f="";continue}c?f+=e:o+=e}return[o,i]}(t))[0],g=i[1]),a=u(O(t,e),f?this:R,B),(n||o||g.length)&&(s=b(a),n&&(s.dotAll=!0,s.raw=B(function(t){for(var e,r=t.length,n=0,o="",i=!1;n<=r;n++)"\\"!==(e=k(t,n))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),o+=e):o+="[\\s\\S]":o+=e+k(t,++n);return o}(t),r)),o&&(s.sticky=!0),g.length&&(s.groups=g)),t!==y)try{c(a,"source",""===y?"(?:)":y)}catch(t){}return a},z=function(t){t in B||s(B,t,{configurable:!0,get:function(){return O[t]},set:function(e){O[t]=e}})},W=f(O),q=0;W.length>q;)z(W[q++]);R.constructor=B,B.prototype=R,g(o,"RegExp",B)}x("RegExp")},function(t,e,r){var n=r(1),o=r(5),i=r(136),a=r(28),u=r(13).f,c=r(19).get,s=RegExp.prototype,f=n.TypeError;o&&i&&u(s,"dotAll",{configurable:!0,get:function(){if(this!==s){if("RegExp"===a(this))return!!c(this).dotAll;throw f("Incompatible receiver, RegExp required")}}})},function(t,e,r){var n=r(5),o=r(13),i=r(58),a=r(2),u=RegExp.prototype;n&&a((function(){return"sy"!==Object.getOwnPropertyDescriptor(u,"flags").get.call({dotAll:!0,sticky:!0})}))&&o.f(u,"flags",{configurable:!0,get:i})},function(t,e,r){var n=r(1),o=r(5),i=r(105).MISSED_STICKY,a=r(28),u=r(13).f,c=r(19).get,s=RegExp.prototype,f=n.TypeError;o&&i&&u(s,"sticky",{configurable:!0,get:function(){if(this!==s){if("RegExp"===a(this))return!!c(this).sticky;throw f("Incompatible receiver, RegExp required")}}})},function(t,e,r){"use strict";r(137);var n,o,i=r(0),a=r(1),u=r(11),c=r(3),s=r(9),f=r(6),l=(n=!1,(o=/[ac]/).exec=function(){return n=!0,/./.exec.apply(this,arguments)},!0===o.test("abc")&&n),h=a.Error,p=c(/./.test);i({target:"RegExp",proto:!0,forced:!l},{test:function(t){var e=this.exec;if(!s(e))return p(this,t);var r=u(e,this,t);if(null!==r&&!f(r))throw new h("RegExp exec method returned something other than an Object or null");return!!r}})},function(t,e,r){"use strict";var n=r(3),o=r(61).PROPER,i=r(17),a=r(4),u=r(29),c=r(8),s=r(2),f=r(58),l=RegExp.prototype,h=l.toString,p=n(f),d=s((function(){return"/a/b"!=h.call({source:"a",flags:"b"})})),v=o&&"toString"!=h.name;(d||v)&&i(RegExp.prototype,"toString",(function(){var t=a(this),e=c(t.source),r=t.flags;return"/"+e+"/"+c(void 0===r&&u(l,t)&&!("flags"in l)?p(t):r)}),{unsafe:!0})},function(t,e,r){"use strict";r(98)("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(166))},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(18),a=r(20),u=r(8),c=r(2),s=o("".charAt);n({target:"String",proto:!0,forced:c((function(){return"\ud842"!=="𠮷".at(-2)}))},{at:function(t){var e=u(i(this)),r=e.length,n=a(t),o=n>=0?n:r+n;return o<0||o>=r?void 0:s(e,o)}})},function(t,e,r){"use strict";var n=r(0),o=r(107).codeAt;n({target:"String",proto:!0},{codePointAt:function(t){return o(this,t)}})},function(t,e,r){"use strict";var n,o=r(0),i=r(3),a=r(23).f,u=r(30),c=r(8),s=r(138),f=r(18),l=r(139),h=r(21),p=i("".endsWith),d=i("".slice),v=Math.min,g=l("endsWith");o({target:"String",proto:!0,forced:!!(h||g||(n=a(String.prototype,"endsWith"),!n||n.writable))&&!g},{endsWith:function(t){var e=c(f(this));s(t);var r=arguments.length>1?arguments[1]:void 0,n=e.length,o=void 0===r?n:v(u(r),n),i=c(t);return p?p(e,i,o):d(e,o-i.length,o)===i}})},function(t,e,r){var n=r(0),o=r(1),i=r(3),a=r(43),u=o.RangeError,c=String.fromCharCode,s=String.fromCodePoint,f=i([].join);n({target:"String",stat:!0,forced:!!s&&1!=s.length},{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],a(e,1114111)!==e)throw u(e+" is not a valid code point");r[o]=e<65536?c(e):c(55296+((e-=65536)>>10),e%1024+56320)}return f(r,"")}})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(138),a=r(18),u=r(8),c=r(139),s=o("".indexOf);n({target:"String",proto:!0,forced:!c("includes")},{includes:function(t){return!!~s(u(a(this)),u(i(t)),arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(11),o=r(108),i=r(4),a=r(30),u=r(8),c=r(18),s=r(42),f=r(109),l=r(84);o("match",(function(t,e,r){return[function(e){var r=c(this),o=null==e?void 0:s(e,t);return o?n(o,e,r):new RegExp(e)[t](u(r))},function(t){var n=i(this),o=u(t),c=r(e,n,o);if(c.done)return c.value;if(!n.global)return l(n,o);var s=n.unicode;n.lastIndex=0;for(var h,p=[],d=0;null!==(h=l(n,o));){var v=u(h[0]);p[d]=v,""===v&&(n.lastIndex=f(o,a(n.lastIndex),s)),d++}return 0===d?null:p}]}))},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(11),a=r(3),u=r(125),c=r(18),s=r(30),f=r(8),l=r(4),h=r(28),p=r(29),d=r(83),v=r(58),g=r(42),y=r(17),m=r(2),b=r(7),x=r(66),w=r(109),E=r(84),S=r(19),A=r(21),O=b("matchAll"),R=S.set,I=S.getterFor("RegExp String Iterator"),M=RegExp.prototype,T=o.TypeError,k=a(v),j=a("".indexOf),P=a("".matchAll),_=!!P&&!m((function(){P("a",/./)})),L=u((function(t,e,r,n){R(this,{type:"RegExp String Iterator",regexp:t,string:e,global:r,unicode:n,done:!1})}),"RegExp String",(function(){var t=I(this);if(t.done)return{value:void 0,done:!0};var e=t.regexp,r=t.string,n=E(e,r);return null===n?{value:void 0,done:t.done=!0}:t.global?(""===f(n[0])&&(e.lastIndex=w(r,s(e.lastIndex),t.unicode)),{value:n,done:!1}):(t.done=!0,{value:n,done:!1})})),D=function(t){var e,r,n,o,i,a,u=l(this),c=f(t);return e=x(u,RegExp),void 0===(r=u.flags)&&p(M,u)&&!("flags"in M)&&(r=k(u)),n=void 0===r?"":f(r),o=new e(e===RegExp?u.source:u,n),i=!!~j(n,"g"),a=!!~j(n,"u"),o.lastIndex=s(u.lastIndex),new L(o,c,i,a)};n({target:"String",proto:!0,forced:_},{matchAll:function(t){var e,r,n,o,a=c(this);if(null!=t){if(d(t)&&(e=f(c("flags"in M?t.flags:k(t))),!~j(e,"g")))throw T("`.matchAll` does not allow non-global regexes");if(_)return P(a,t);if(void 0===(n=g(t,O))&&A&&"RegExp"==h(t)&&(n=D),n)return i(n,t,a)}else if(_)return P(a,t);return r=f(a),o=new RegExp(t,"g"),A?i(D,o,r):o[O](r)}}),A||O in M||y(M,O,D)},function(t,e,r){"use strict";var n=r(0),o=r(130).end;n({target:"String",proto:!0,forced:r(181)},{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){"use strict";var n=r(0),o=r(130).start;n({target:"String",proto:!0,forced:r(181)},{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},function(t,e,r){var n=r(0),o=r(3),i=r(26),a=r(14),u=r(8),c=r(15),s=o([].push),f=o([].join);n({target:"String",stat:!0},{raw:function(t){for(var e=i(a(t).raw),r=c(e),n=arguments.length,o=[],l=0;r>l;){if(s(o,u(e[l++])),l===r)return f(o,"");l<n&&s(o,u(arguments[l]))}}})},function(t,e,r){r(0)({target:"String",proto:!0},{repeat:r(97)})},function(t,e,r){"use strict";var n=r(31),o=r(11),i=r(3),a=r(108),u=r(2),c=r(4),s=r(9),f=r(20),l=r(30),h=r(8),p=r(18),d=r(109),v=r(42),g=r(182),y=r(84),m=r(7)("replace"),b=Math.max,x=Math.min,w=i([].concat),E=i([].push),S=i("".indexOf),A=i("".slice),O="$0"==="a".replace(/./,"$0"),R=!!/./[m]&&""===/./[m]("a","$0");a("replace",(function(t,e,r){var i=R?"$":"$0";return[function(t,r){var n=p(this),i=null==t?void 0:v(t,m);return i?o(i,t,n,r):o(e,h(n),t,r)},function(t,o){var a=c(this),u=h(t);if("string"==typeof o&&-1===S(o,i)&&-1===S(o,"$<")){var p=r(e,a,u,o);if(p.done)return p.value}var v=s(o);v||(o=h(o));var m=a.global;if(m){var O=a.unicode;a.lastIndex=0}for(var R=[];;){var I=y(a,u);if(null===I)break;if(E(R,I),!m)break;""===h(I[0])&&(a.lastIndex=d(u,l(a.lastIndex),O))}for(var M,T="",k=0,j=0;j<R.length;j++){for(var P=h((I=R[j])[0]),_=b(x(f(I.index),u.length),0),L=[],D=1;D<I.length;D++)E(L,void 0===(M=I[D])?M:String(M));var N=I.groups;if(v){var C=w([P],L,_,u);void 0!==N&&E(C,N);var U=h(n(o,void 0,C))}else U=g(P,u,_,L,N,o);_>=k&&(T+=A(u,k,_)+U,k=_+P.length)}return T+A(u,k)}]}),!!u((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}))||!O||R)},function(t,e,r){"use strict";var n=r(0),o=r(1),i=r(11),a=r(3),u=r(18),c=r(9),s=r(83),f=r(8),l=r(42),h=r(58),p=r(182),d=r(7),v=r(21),g=d("replace"),y=RegExp.prototype,m=o.TypeError,b=a(h),x=a("".indexOf),w=a("".replace),E=a("".slice),S=Math.max,A=function(t,e,r){return r>t.length?-1:""===e?r:x(t,e,r)};n({target:"String",proto:!0},{replaceAll:function(t,e){var r,n,o,a,h,d,O,R,I,M=u(this),T=0,k=0,j="";if(null!=t){if((r=s(t))&&(n=f(u("flags"in y?t.flags:b(t))),!~x(n,"g")))throw m("`.replaceAll` does not allow non-global regexes");if(o=l(t,g))return i(o,t,M,e);if(v&&r)return w(f(M),t,e)}for(a=f(M),h=f(t),(d=c(e))||(e=f(e)),O=h.length,R=S(1,O),T=A(a,h,0);-1!==T;)I=d?f(e(h,T,a)):p(h,a,T,[],void 0,e),j+=E(a,k,T)+I,k=T+O,T=A(a,h,T+R);return k<a.length&&(j+=E(a,k)),j}})},function(t,e,r){"use strict";var n=r(11),o=r(108),i=r(4),a=r(18),u=r(173),c=r(8),s=r(42),f=r(84);o("search",(function(t,e,r){return[function(e){var r=a(this),o=null==e?void 0:s(e,t);return o?n(o,e,r):new RegExp(e)[t](c(r))},function(t){var n=i(this),o=c(t),a=r(e,n,o);if(a.done)return a.value;var s=n.lastIndex;u(s,0)||(n.lastIndex=0);var l=f(n,o);return u(n.lastIndex,s)||(n.lastIndex=s),null===l?-1:l.index}]}))},function(t,e,r){"use strict";var n=r(31),o=r(11),i=r(3),a=r(108),u=r(83),c=r(4),s=r(18),f=r(66),l=r(109),h=r(30),p=r(8),d=r(42),v=r(76),g=r(84),y=r(106),m=r(105),b=r(2),x=m.UNSUPPORTED_Y,w=Math.min,E=[].push,S=i(/./.exec),A=i(E),O=i("".slice);a("split",(function(t,e,r){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,r){var i=p(s(this)),a=void 0===r?4294967295:r>>>0;if(0===a)return[];if(void 0===t)return[i];if(!u(t))return o(e,i,t,a);for(var c,f,l,h=[],d=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),g=0,m=new RegExp(t.source,d+"g");(c=o(y,m,i))&&!((f=m.lastIndex)>g&&(A(h,O(i,g,c.index)),c.length>1&&c.index<i.length&&n(E,h,v(c,1)),l=c[0].length,g=f,h.length>=a));)m.lastIndex===c.index&&m.lastIndex++;return g===i.length?!l&&S(m,"")||A(h,""):A(h,O(i,g)),h.length>a?v(h,0,a):h}:"0".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:o(e,this,t,r)}:e,[function(e,r){var n=s(this),a=null==e?void 0:d(e,t);return a?o(a,e,n,r):o(i,p(n),e,r)},function(t,n){var o=c(this),a=p(t),u=r(i,o,a,n,i!==e);if(u.done)return u.value;var s=f(o,RegExp),d=o.unicode,v=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(x?"g":"y"),y=new s(x?"^(?:"+o.source+")":o,v),m=void 0===n?4294967295:n>>>0;if(0===m)return[];if(0===a.length)return null===g(y,a)?[a]:[];for(var b=0,E=0,S=[];E<a.length;){y.lastIndex=x?0:E;var R,I=g(y,x?O(a,E):a);if(null===I||(R=w(h(y.lastIndex+(x?E:0)),a.length))===b)E=l(a,E,d);else{if(A(S,O(a,b,E)),S.length===m)return S;for(var M=1;M<=I.length-1;M++)if(A(S,I[M]),S.length===m)return S;E=b=R}}return A(S,O(a,b)),S}]}),!!b((function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r="ab".split(t);return 2!==r.length||"a"!==r[0]||"b"!==r[1]})),x)},function(t,e,r){"use strict";var n,o=r(0),i=r(3),a=r(23).f,u=r(30),c=r(8),s=r(138),f=r(18),l=r(139),h=r(21),p=i("".startsWith),d=i("".slice),v=Math.min,g=l("startsWith");o({target:"String",proto:!0,forced:!!(h||g||(n=a(String.prototype,"startsWith"),!n||n.writable))&&!g},{startsWith:function(t){var e=c(f(this));s(t);var r=u(v(arguments.length>1?arguments[1]:void 0,e.length)),n=c(t);return p?p(e,n,r):d(e,r,r+n.length)===n}})},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(18),a=r(20),u=r(8),c=o("".slice),s=Math.max,f=Math.min;n({target:"String",proto:!0,forced:!"".substr||"b"!=="ab".substr(-1)},{substr:function(t,e){var r,n,o=u(i(this)),l=o.length,h=a(t);return h===1/0&&(h=0),h<0&&(h=s(l+h,0)),(r=void 0===e?l:a(e))<=0||r===1/0||h>=(n=f(h+r,l))?"":c(o,h,n)}})},function(t,e,r){"use strict";var n=r(0),o=r(67).trim;n({target:"String",proto:!0,forced:r(140)("trim")},{trim:function(){return o(this)}})},function(t,e,r){"use strict";var n=r(0),o=r(67).end,i=r(140)("trimEnd"),a=i?function(){return o(this)}:"".trimEnd;n({target:"String",proto:!0,name:"trimEnd",forced:i},{trimEnd:a,trimRight:a})},function(t,e,r){"use strict";var n=r(0),o=r(67).start,i=r(140)("trimStart"),a=i?function(){return o(this)}:"".trimStart;n({target:"String",proto:!0,name:"trimStart",forced:i},{trimStart:a,trimLeft:a})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("anchor")},{anchor:function(t){return o(this,"a","name",t)}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("big")},{big:function(){return o(this,"big","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("blink")},{blink:function(){return o(this,"blink","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("bold")},{bold:function(){return o(this,"b","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("fixed")},{fixed:function(){return o(this,"tt","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("fontcolor")},{fontcolor:function(t){return o(this,"font","color",t)}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("fontsize")},{fontsize:function(t){return o(this,"font","size",t)}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("italics")},{italics:function(){return o(this,"i","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("link")},{link:function(t){return o(this,"a","href",t)}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("small")},{small:function(){return o(this,"small","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("strike")},{strike:function(){return o(this,"strike","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("sub")},{sub:function(){return o(this,"sub","","")}})},function(t,e,r){"use strict";var n=r(0),o=r(33);n({target:"String",proto:!0,forced:r(34)("sup")},{sup:function(){return o(this,"sup","","")}})},function(t,e,r){r(48)("Float32",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){var n=r(1),o=r(20),i=n.RangeError;t.exports=function(t){var e=o(t);if(e<0)throw i("The argument can't be less than 0");return e}},function(t,e,r){r(48)("Float64",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){r(48)("Int8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){r(48)("Int16",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){r(48)("Int32",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){r(48)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){r(48)("Uint8",(function(t){return function(e,r,n){return t(this,e,r,n)}}),!0)},function(t,e,r){r(48)("Uint16",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){r(48)("Uint32",(function(t){return function(e,r,n){return t(this,e,r,n)}}))},function(t,e,r){"use strict";var n=r(10),o=r(15),i=r(20),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("at",(function(t){var e=a(this),r=o(e),n=i(t),u=n>=0?n:r+n;return u<0||u>=r?void 0:e[u]}))},function(t,e,r){"use strict";var n=r(3),o=r(10),i=n(r(156)),a=o.aTypedArray;(0,o.exportTypedArrayMethod)("copyWithin",(function(t,e){return i(a(this),t,e,arguments.length>2?arguments[2]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(22).every,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("every",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(11),i=r(123),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("fill",(function(t){var e=arguments.length;return o(i,a(this),t,e>1?arguments[1]:void 0,e>2?arguments[2]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(22).filter,i=r(408),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("filter",(function(t){var e=o(a(this),t,arguments.length>1?arguments[1]:void 0);return i(this,e)}))},function(t,e,r){var n=r(409),o=r(110);t.exports=function(t,e){return n(o(t),e)}},function(t,e,r){var n=r(15);t.exports=function(t,e){for(var r=0,o=n(e),i=new t(o);o>r;)i[r]=e[r++];return i}},function(t,e,r){"use strict";var n=r(10),o=r(22).find,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("find",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(22).findIndex,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("findIndex",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(22).forEach,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("forEach",(function(t){o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(141);(0,r(10).exportTypedArrayStaticMethod)("from",r(184),n)},function(t,e,r){"use strict";var n=r(10),o=r(72).includes,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("includes",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(72).indexOf,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("indexOf",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(1),o=r(2),i=r(3),a=r(10),u=r(94),c=r(7)("iterator"),s=n.Uint8Array,f=i(u.values),l=i(u.keys),h=i(u.entries),p=a.aTypedArray,d=a.exportTypedArrayMethod,v=s&&s.prototype,g=!o((function(){v[c].call([1])})),y=!!v&&v.values&&v[c]===v.values&&"values"===v.values.name,m=function(){return f(p(this))};d("entries",(function(){return h(p(this))}),g),d("keys",(function(){return l(p(this))}),g),d("values",m,g||!y,{name:"values"}),d(c,m,g||!y,{name:"values"})},function(t,e,r){"use strict";var n=r(10),o=r(3),i=n.aTypedArray,a=n.exportTypedArrayMethod,u=o([].join);a("join",(function(t){return u(i(this),t)}))},function(t,e,r){"use strict";var n=r(10),o=r(31),i=r(161),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("lastIndexOf",(function(t){var e=arguments.length;return o(i,a(this),e>1?[t,arguments[1]]:[t])}))},function(t,e,r){"use strict";var n=r(10),o=r(22).map,i=r(110),a=n.aTypedArray;(0,n.exportTypedArrayMethod)("map",(function(t){return o(a(this),t,arguments.length>1?arguments[1]:void 0,(function(t,e){return new(i(t))(e)}))}))},function(t,e,r){"use strict";var n=r(10),o=r(141),i=n.aTypedArrayConstructor;(0,n.exportTypedArrayStaticMethod)("of",(function(){for(var t=0,e=arguments.length,r=new(i(this))(e);e>t;)r[t]=arguments[t++];return r}),o)},function(t,e,r){"use strict";var n=r(10),o=r(95).left,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduce",(function(t){var e=arguments.length;return o(i(this),t,e,e>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=r(95).right,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("reduceRight",(function(t){var e=arguments.length;return o(i(this),t,e,e>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(10),o=n.aTypedArray,i=n.exportTypedArrayMethod,a=Math.floor;i("reverse",(function(){for(var t,e=o(this).length,r=a(e/2),n=0;n<r;)t=this[n],this[n++]=this[--e],this[e]=t;return this}))},function(t,e,r){"use strict";var n=r(1),o=r(11),i=r(10),a=r(15),u=r(183),c=r(14),s=r(2),f=n.RangeError,l=n.Int8Array,h=l&&l.prototype,p=h&&h.set,d=i.aTypedArray,v=i.exportTypedArrayMethod,g=!s((function(){var t=new Uint8ClampedArray(2);return o(p,t,{length:1,0:3},1),3!==t[1]})),y=g&&i.NATIVE_ARRAY_BUFFER_VIEWS&&s((function(){var t=new l(2);return t.set(1),t.set("2",1),0!==t[0]||2!==t[1]}));v("set",(function(t){d(this);var e=u(arguments.length>1?arguments[1]:void 0,1),r=c(t);if(g)return o(p,this,r,e);var n=this.length,i=a(r),s=0;if(i+e>n)throw f("Wrong length");for(;s<i;)this[e+s]=r[s++]}),!g||y)},function(t,e,r){"use strict";var n=r(10),o=r(110),i=r(2),a=r(55),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("slice",(function(t,e){for(var r=a(u(this),t,e),n=o(this),i=0,c=r.length,s=new n(c);c>i;)s[i]=r[i++];return s}),i((function(){new Int8Array(1).slice()})))},function(t,e,r){"use strict";var n=r(10),o=r(22).some,i=n.aTypedArray;(0,n.exportTypedArrayMethod)("some",(function(t){return o(i(this),t,arguments.length>1?arguments[1]:void 0)}))},function(t,e,r){"use strict";var n=r(1),o=r(3),i=r(2),a=r(24),u=r(126),c=r(10),s=r(162),f=r(163),l=r(50),h=r(127),p=n.Array,d=c.aTypedArray,v=c.exportTypedArrayMethod,g=n.Uint16Array,y=g&&o(g.prototype.sort),m=!(!y||i((function(){y(new g(2),null)}))&&i((function(){y(new g(2),{})}))),b=!!y&&!i((function(){if(l)return l<74;if(s)return s<67;if(f)return!0;if(h)return h<602;var t,e,r=new g(516),n=p(516);for(t=0;t<516;t++)e=t%4,r[t]=515-t,n[t]=t-2*e+3;for(y(r,(function(t,e){return(t/4|0)-(e/4|0)})),t=0;t<516;t++)if(r[t]!==n[t])return!0}));v("sort",(function(t){return void 0!==t&&a(t),b?y(this,t):u(d(this),function(t){return function(e,r){return void 0!==t?+t(e,r)||0:r!=r?-1:e!=e?1:0===e&&0===r?1/e>0&&1/r<0?1:-1:e>r}}(t))}),!b||m)},function(t,e,r){"use strict";var n=r(10),o=r(30),i=r(43),a=r(110),u=n.aTypedArray;(0,n.exportTypedArrayMethod)("subarray",(function(t,e){var r=u(this),n=r.length,c=i(t,n);return new(a(r))(r.buffer,r.byteOffset+c*r.BYTES_PER_ELEMENT,o((void 0===e?n:i(e,n))-c))}))},function(t,e,r){"use strict";var n=r(1),o=r(31),i=r(10),a=r(2),u=r(55),c=n.Int8Array,s=i.aTypedArray,f=i.exportTypedArrayMethod,l=[].toLocaleString,h=!!c&&a((function(){l.call(new c(1))}));f("toLocaleString",(function(){return o(l,h?u(s(this)):s(this),u(arguments))}),a((function(){return[1,2].toLocaleString()!=new c([1,2]).toLocaleString()}))||!a((function(){c.prototype.toLocaleString.call([1,2])})))},function(t,e,r){"use strict";var n=r(10).exportTypedArrayMethod,o=r(2),i=r(1),a=r(3),u=i.Uint8Array,c=u&&u.prototype||{},s=[].toString,f=a([].join);o((function(){s.call({})}))&&(s=function(){return f(this)});var l=c.toString!=s;n("toString",s,l)},function(t,e,r){"use strict";var n=r(0),o=r(3),i=r(8),a=String.fromCharCode,u=o("".charAt),c=o(/./.exec),s=o("".slice),f=/^[\da-f]{2}$/i,l=/^[\da-f]{4}$/i;n({global:!0},{unescape:function(t){for(var e,r,n=i(t),o="",h=n.length,p=0;p<h;){if("%"===(e=u(n,p++)))if("u"===u(n,p)){if(r=s(n,p+1,p+5),c(l,r)){o+=a(parseInt(r,16)),p+=5;continue}}else if(r=s(n,p,p+2),c(f,r)){o+=a(parseInt(r,16)),p+=2;continue}o+=e}return o}})},function(t,e,r){"use strict";var n,o=r(1),i=r(3),a=r(65),u=r(57),c=r(98),s=r(185),f=r(6),l=r(99),h=r(19).enforce,p=r(146),d=!o.ActiveXObject&&"ActiveXObject"in o,v=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},g=c("WeakMap",v,s);if(p&&d){n=s.getConstructor(v,"WeakMap",!0),u.enable();var y=g.prototype,m=i(y.delete),b=i(y.has),x=i(y.get),w=i(y.set);a(y,{delete:function(t){if(f(t)&&!l(t)){var e=h(this);return e.frozen||(e.frozen=new n),m(this,t)||e.frozen.delete(t)}return m(this,t)},has:function(t){if(f(t)&&!l(t)){var e=h(this);return e.frozen||(e.frozen=new n),b(this,t)||e.frozen.has(t)}return b(this,t)},get:function(t){if(f(t)&&!l(t)){var e=h(this);return e.frozen||(e.frozen=new n),b(this,t)?x(this,t):e.frozen.get(t)}return x(this,t)},set:function(t,e){if(f(t)&&!l(t)){var r=h(this);r.frozen||(r.frozen=new n),b(this,t)?w(this,t,e):r.frozen.set(t,e)}else w(this,t,e);return this}})}},function(t,e,r){"use strict";r(98)("WeakSet",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),r(185))},function(t,e,r){var n=r(0),o=r(16),i=r(3),a=r(2),u=r(8),c=r(12),s=r(53),f=r(186).ctoi,l=/[^\d+/a-z]/i,h=/[\t\n\f\r ]+/g,p=/[=]+$/,d=o("atob"),v=String.fromCharCode,g=i("".charAt),y=i("".replace),m=i(l.exec),b=a((function(){return""!==atob(" ")})),x=!b&&!a((function(){d()}));n({global:!0,enumerable:!0,forced:b||x},{atob:function(t){if(s(arguments.length,1),x)return d(t);var e,r,n=y(u(t),h,""),i="",a=0,b=0;if(n.length%4==0&&(n=y(n,p,"")),n.length%4==1||m(l,n))throw new(o("DOMException"))("The string is not correctly encoded","InvalidCharacterError");for(;e=g(n,a++);)c(f,e)&&(r=b%4?64*r+f[e]:f[e],b++%4&&(i+=v(255&r>>(-2*b&6))));return i}})},function(t,e,r){var n=r(0),o=r(16),i=r(3),a=r(2),u=r(8),c=r(53),s=r(186).itoc,f=o("btoa"),l=i("".charAt),h=i("".charCodeAt),p=!!f&&!a((function(){f()}));n({global:!0,enumerable:!0,forced:p},{btoa:function(t){if(c(arguments.length,1),p)return f(t);for(var e,r,n=u(t),i="",a=0,d=s;l(n,a)||(d="=",a%1);){if((r=h(n,a+=3/4))>255)throw new(o("DOMException"))("The string contains characters outside of the Latin1 range","InvalidCharacterError");i+=l(d,63&(e=e<<8|r)>>8-a%1*8)}return i}})},function(t,e,r){var n=r(1),o=r(187),i=r(188),a=r(158),u=r(25),c=function(t){if(t&&t.forEach!==a)try{u(t,"forEach",a)}catch(e){t.forEach=a}};for(var s in o)o[s]&&c(n[s]&&n[s].prototype);c(i)},function(t,e,r){var n=r(1),o=r(187),i=r(188),a=r(94),u=r(25),c=r(7),s=c("iterator"),f=c("toStringTag"),l=a.values,h=function(t,e){if(t){if(t[s]!==l)try{u(t,s,l)}catch(e){t[s]=l}if(t[f]||u(t,f,e),o[e])for(var r in a)if(t[r]!==a[r])try{u(t,r,a[r])}catch(e){t[r]=a[r]}}};for(var p in o)h(n[p]&&n[p].prototype,p);h(i,"DOMTokenList")},function(t,e,r){"use strict";var n=r(0),o=r(439),i=r(16),a=r(2),u=r(32),c=r(35),s=r(13).f,f=r(74).f,l=r(17),h=r(12),p=r(40),d=r(4),v=r(154),g=r(78),y=r(189),m=r(91),b=r(19),x=r(5),w=r(21),E=i("Error"),S=i("DOMException")||function(){try{(new(i("MessageChannel")||o("worker_threads").MessageChannel)).port1.postMessage(new WeakMap)}catch(t){if("DATA_CLONE_ERR"==t.name&&25==t.code)return t.constructor}}(),A=S&&S.prototype,O=E.prototype,R=b.set,I=b.getterFor("DOMException"),M="stack"in E("DOMException"),T=function(t){return h(y,t)&&y[t].m?y[t].c:0},k=function(){p(this,j);var t=arguments.length,e=g(t<1?void 0:arguments[0]),r=g(t<2?void 0:arguments[1],"Error"),n=T(r);if(R(this,{type:"DOMException",name:r,message:e,code:n}),x||(this.name=r,this.message=e,this.code=n),M){var o=E(e);o.name="DOMException",s(this,"stack",c(1,m(o.stack,1)))}},j=k.prototype=u(O),P=function(t){return{enumerable:!0,configurable:!0,get:t}},_=function(t){return P((function(){return I(this)[t]}))};x&&f(j,{name:_("name"),message:_("message"),code:_("code")}),s(j,"constructor",c(1,k));var L=a((function(){return!(new S instanceof E)})),D=L||a((function(){return O.toString!==v||"2: 1"!==String(new S(1,2))})),N=L||a((function(){return 25!==new S(1,"DataCloneError").code})),C=L||25!==S.DATA_CLONE_ERR||25!==A.DATA_CLONE_ERR,U=w?D||N||C:L;n({global:!0,forced:U},{DOMException:U?k:S});var $=i("DOMException"),F=$.prototype;for(var B in D&&(w||S===$)&&l(F,"toString",v),N&&x&&S===$&&s(F,"code",P((function(){return T(d(this).name)}))),y)if(h(y,B)){var z=y[B],W=z.s,q=c(6,z.c);h($,W)||s($,W,q),h(F,W)||s(F,W,q)}},function(t,e,r){var n=r(56);t.exports=function(t){try{if(n)return Function('return require("'+t+'")')()}catch(t){}}},function(t,e,r){"use strict";var n=r(0),o=r(16),i=r(35),a=r(13).f,u=r(12),c=r(40),s=r(63),f=r(78),l=r(189),h=r(91),p=r(21),d=o("Error"),v=o("DOMException"),g=function(){c(this,y);var t=arguments.length,e=f(t<1?void 0:arguments[0]),r=f(t<2?void 0:arguments[1],"Error"),n=new v(e,r),o=d(e);return o.name="DOMException",a(n,"stack",i(1,h(o.stack,1))),s(n,this,g),n},y=g.prototype=v.prototype,m="stack"in d("DOMException"),b="stack"in new v(1,2),x=m&&!b;n({global:!0,forced:p||x},{DOMException:x?g:v});var w=o("DOMException"),E=w.prototype;if(E.constructor!==w)for(var S in p||a(E,"constructor",i(1,w)),l)if(u(l,S)){var A=l[S],O=A.s;u(w,O)||a(w,O,i(6,A.c))}},function(t,e,r){var n=r(16);r(36)(n("DOMException"),"DOMException")},function(t,e,r){var n=r(0),o=r(1),i=r(134);n({global:!0,bind:!0,enumerable:!0,forced:!o.setImmediate||!o.clearImmediate},{setImmediate:i.set,clearImmediate:i.clear})},function(t,e,r){var n=r(0),o=r(1),i=r(176),a=r(24),u=r(53),c=r(56),s=o.process;n({global:!0,enumerable:!0,noTargetGet:!0},{queueMicrotask:function(t){u(arguments.length,1),a(t);var e=c&&s.domain;i(e?e.bind(t):t)}})},function(t,e,r){var n,o=r(21),i=r(0),a=r(1),u=r(16),c=r(3),s=r(2),f=r(60),l=r(9),h=r(62),p=r(6),d=r(59),v=r(45),g=r(4),y=r(52),m=r(12),b=r(44),x=r(25),w=r(15),E=r(53),S=r(58),A=r(120),O=a.Object,R=a.Date,I=a.Error,M=a.EvalError,T=a.RangeError,k=a.ReferenceError,j=a.SyntaxError,P=a.TypeError,_=a.URIError,L=a.PerformanceMark,D=a.WebAssembly,N=D&&D.CompileError||I,C=D&&D.LinkError||I,U=D&&D.RuntimeError||I,$=u("DOMException"),F=u("Set"),B=u("Map"),z=B.prototype,W=c(z.has),q=c(z.get),G=c(z.set),V=c(F.prototype.add),Y=u("Object","keys"),H=c([].push),K=c((!0).valueOf),J=c(1..valueOf),X=c("".valueOf),Q=c(S),Z=c(R.prototype.getTime),tt=f("structuredClone"),et=function(t){return!s((function(){var e=new a.Set([7]),r=t(e),n=t(O(7));return r==e||!r.has(7)||"object"!=typeof n||7!=n}))&&t},rt=a.structuredClone,nt=o||(n=rt,!(!s((function(){var t=n(new a.AggregateError([1],tt,{cause:3}));return"AggregateError"!=t.name||1!=t.errors[0]||t.message!=tt||3!=t.cause}))&&n)),ot=!rt&&et((function(t){return new L(tt,{detail:t}).detail})),it=et(rt)||ot,at=function(t){throw new $("Uncloneable type: "+t,"DataCloneError")},ut=function(t,e){throw new $((e||"Cloning")+" of "+t+" cannot be properly polyfilled in this engine","DataCloneError")},ct=function(t,e){if(d(t)&&at("Symbol"),!p(t))return t;if(e){if(W(e,t))return q(e,t)}else e=new B;var r,n,o,i,c,s,f,v,g,E,S=y(t),L=!1;switch(S){case"Array":o=[],L=!0;break;case"Object":o={},L=!0;break;case"Map":o=new B,L=!0;break;case"Set":o=new F,L=!0;break;case"RegExp":o=new RegExp(t.source,"flags"in t?t.flags:Q(t));break;case"Error":switch(n=t.name){case"AggregateError":o=u("AggregateError")([]);break;case"EvalError":o=M();break;case"RangeError":o=T();break;case"ReferenceError":o=k();break;case"SyntaxError":o=j();break;case"TypeError":o=P();break;case"URIError":o=_();break;case"CompileError":o=N();break;case"LinkError":o=C();break;case"RuntimeError":o=U();break;default:o=I()}L=!0;break;case"DOMException":o=new $(t.message,t.name),L=!0;break;case"DataView":case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":r=a[S],p(r)||ut(S),o=new r(ct(t.buffer,e),t.byteOffset,"DataView"===S?t.byteLength:t.length);break;case"DOMQuad":try{o=new DOMQuad(ct(t.p1,e),ct(t.p2,e),ct(t.p3,e),ct(t.p4,e))}catch(e){it?o=it(t):ut(S)}break;case"FileList":if(r=a.DataTransfer,h(r)){for(i=new r,c=0,s=w(t);c<s;c++)i.items.add(ct(t[c],e));o=i.files}else it?o=it(t):ut(S);break;case"ImageData":try{o=new ImageData(ct(t.data,e),t.width,t.height,{colorSpace:t.colorSpace})}catch(e){it?o=it(t):ut(S)}break;default:if(it)o=it(t);else switch(S){case"BigInt":o=O(t.valueOf());break;case"Boolean":o=O(K(t));break;case"Number":o=O(J(t));break;case"String":o=O(X(t));break;case"Date":o=new R(Z(t));break;case"ArrayBuffer":(r=a.DataView)||"function"==typeof t.slice||ut(S);try{if("function"==typeof t.slice)o=t.slice(0);else for(s=t.byteLength,o=new ArrayBuffer(s),g=new r(t),E=new r(o),c=0;c<s;c++)E.setUint8(c,g.getUint8(c))}catch(t){throw new $("ArrayBuffer is detached","DataCloneError")}break;case"SharedArrayBuffer":o=t;break;case"Blob":try{o=t.slice(0,t.size,t.type)}catch(t){ut(S)}break;case"DOMPoint":case"DOMPointReadOnly":r=a[S];try{o=r.fromPoint?r.fromPoint(t):new r(t.x,t.y,t.z,t.w)}catch(t){ut(S)}break;case"DOMRect":case"DOMRectReadOnly":r=a[S];try{o=r.fromRect?r.fromRect(t):new r(t.x,t.y,t.width,t.height)}catch(t){ut(S)}break;case"DOMMatrix":case"DOMMatrixReadOnly":r=a[S];try{o=r.fromMatrix?r.fromMatrix(t):new r(t)}catch(t){ut(S)}break;case"AudioData":case"VideoFrame":l(t.clone)||ut(S);try{o=t.clone()}catch(t){at(S)}break;case"File":try{o=new File([t],t.name,t)}catch(t){ut(S)}break;case"CryptoKey":case"GPUCompilationMessage":case"GPUCompilationInfo":case"ImageBitmap":case"RTCCertificate":case"WebAssembly.Module":ut(S);default:at(S)}}if(G(e,t,o),L)switch(S){case"Array":case"Object":for(f=Y(t),c=0,s=w(f);c<s;c++)v=f[c],b(o,v,ct(t[v],e));break;case"Map":t.forEach((function(t,r){G(o,ct(r,e),ct(t,e))}));break;case"Set":t.forEach((function(t){V(o,ct(t,e))}));break;case"Error":x(o,"message",ct(t.message,e)),m(t,"cause")&&x(o,"cause",ct(t.cause,e)),"AggregateError"==n&&(o.errors=ct(t.errors,e));case"DOMException":A&&x(o,"stack",ct(t.stack,e))}return o},st=rt&&!s((function(){var t=new ArrayBuffer(8),e=rt(t,{transfer:[t]});return 0!=t.byteLength||8!=e.byteLength})),ft=function(t,e){if(!p(t))throw P("Transfer option cannot be converted to a sequence");var r=[];v(t,(function(t){H(r,g(t))}));var n,o,i,u,c,s,f=0,d=w(r);if(st)for(u=rt(r,{transfer:r});f<d;)G(e,r[f],u[f++]);else for(;f<d;){if(n=r[f++],W(e,n))throw new $("Duplicate transferable","DataCloneError");switch(o=y(n)){case"ImageBitmap":i=a.OffscreenCanvas,h(i)||ut(o,"Transferring");try{(s=new i(n.width,n.height)).getContext("bitmaprenderer").transferFromImageBitmap(n),c=s.transferToImageBitmap()}catch(t){}break;case"AudioData":case"VideoFrame":l(n.clone)&&l(n.close)||ut(o,"Transferring");try{c=n.clone(),n.close()}catch(t){}break;case"ArrayBuffer":case"MessagePort":case"OffscreenCanvas":case"ReadableStream":case"TransformStream":case"WritableStream":ut(o,"Transferring")}if(void 0===c)throw new $("This object cannot be transferred: "+o,"DataCloneError");G(e,n,c)}};i({global:!0,enumerable:!0,sham:!st,forced:nt},{structuredClone:function(t){var e,r=E(arguments.length,1)>1?g(arguments[1]):void 0,n=r?r.transfer:void 0;return void 0!==n&&(e=new B,ft(n,e)),ct(t,e)}})},function(t,e,r){var n=r(0),o=r(1),i=r(31),a=r(9),u=r(41),c=r(55),s=r(53),f=/MSIE .\./.test(u),l=o.Function,h=function(t){return function(e,r){var n=s(arguments.length,1)>2,o=a(e)?e:l(e),u=n?c(arguments,2):void 0;return t(n?function(){i(o,this,u)}:o,r)}};n({global:!0,bind:!0,forced:f},{setTimeout:h(o.setTimeout),setInterval:h(o.setInterval)})},function(t,e,r){"use strict";r(180);var n,o=r(0),i=r(5),a=r(190),u=r(1),c=r(38),s=r(3),f=r(74).f,l=r(17),h=r(40),p=r(12),d=r(171),v=r(159),g=r(76),y=r(107).codeAt,m=r(447),b=r(8),x=r(36),w=r(53),E=r(191),S=r(19),A=S.set,O=S.getterFor("URL"),R=E.URLSearchParams,I=E.getState,M=u.URL,T=u.TypeError,k=u.parseInt,j=Math.floor,P=Math.pow,_=s("".charAt),L=s(/./.exec),D=s([].join),N=s(1..toString),C=s([].pop),U=s([].push),$=s("".replace),F=s([].shift),B=s("".split),z=s("".slice),W=s("".toLowerCase),q=s([].unshift),G=/[a-z]/i,V=/[\d+-.a-z]/i,Y=/\d/,H=/^0x/i,K=/^[0-7]+$/,J=/^\d+$/,X=/^[\da-f]+$/i,Q=/[\0\t\n\r #%/:<>?@[\\\]^|]/,Z=/[\0\t\n\r #/:<>?@[\\\]^|]/,tt=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,et=/[\t\n\r]/g,rt=function(t){var e,r,n,o;if("number"==typeof t){for(e=[],r=0;r<4;r++)q(e,t%256),t=j(t/256);return D(e,".")}if("object"==typeof t){for(e="",n=function(t){for(var e=null,r=1,n=null,o=0,i=0;i<8;i++)0!==t[i]?(o>r&&(e=n,r=o),n=null,o=0):(null===n&&(n=i),++o);return o>r&&(e=n,r=o),e}(t),r=0;r<8;r++)o&&0===t[r]||(o&&(o=!1),n===r?(e+=r?":":"::",o=!0):(e+=N(t[r],16),r<7&&(e+=":")));return"["+e+"]"}return t},nt={},ot=d({},nt,{" ":1,'"':1,"<":1,">":1,"`":1}),it=d({},ot,{"#":1,"?":1,"{":1,"}":1}),at=d({},it,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),ut=function(t,e){var r=y(t,0);return r>32&&r<127&&!p(e,t)?t:encodeURIComponent(t)},ct={ftp:21,file:null,http:80,https:443,ws:80,wss:443},st=function(t,e){var r;return 2==t.length&&L(G,_(t,0))&&(":"==(r=_(t,1))||!e&&"|"==r)},ft=function(t){var e;return t.length>1&&st(z(t,0,2))&&(2==t.length||"/"===(e=_(t,2))||"\\"===e||"?"===e||"#"===e)},lt=function(t){return"."===t||"%2e"===W(t)},ht={},pt={},dt={},vt={},gt={},yt={},mt={},bt={},xt={},wt={},Et={},St={},At={},Ot={},Rt={},It={},Mt={},Tt={},kt={},jt={},Pt={},_t=function(t,e,r){var n,o,i,a=b(t);if(e){if(o=this.parse(a))throw T(o);this.searchParams=null}else{if(void 0!==r&&(n=new _t(r,!0)),o=this.parse(a,null,n))throw T(o);(i=I(new R)).bindURL(this),this.searchParams=i}};_t.prototype={type:"URL",parse:function(t,e,r){var o,i,a,u,c,s=this,f=e||ht,l=0,h="",d=!1,y=!1,m=!1;for(t=b(t),e||(s.scheme="",s.username="",s.password="",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,t=$(t,tt,"")),t=$(t,et,""),o=v(t);l<=o.length;){switch(i=o[l],f){case ht:if(!i||!L(G,i)){if(e)return"Invalid scheme";f=dt;continue}h+=W(i),f=pt;break;case pt:if(i&&(L(V,i)||"+"==i||"-"==i||"."==i))h+=W(i);else{if(":"!=i){if(e)return"Invalid scheme";h="",f=dt,l=0;continue}if(e&&(s.isSpecial()!=p(ct,h)||"file"==h&&(s.includesCredentials()||null!==s.port)||"file"==s.scheme&&!s.host))return;if(s.scheme=h,e)return void(s.isSpecial()&&ct[s.scheme]==s.port&&(s.port=null));h="","file"==s.scheme?f=Ot:s.isSpecial()&&r&&r.scheme==s.scheme?f=vt:s.isSpecial()?f=bt:"/"==o[l+1]?(f=gt,l++):(s.cannotBeABaseURL=!0,U(s.path,""),f=kt)}break;case dt:if(!r||r.cannotBeABaseURL&&"#"!=i)return"Invalid scheme";if(r.cannotBeABaseURL&&"#"==i){s.scheme=r.scheme,s.path=g(r.path),s.query=r.query,s.fragment="",s.cannotBeABaseURL=!0,f=Pt;break}f="file"==r.scheme?Ot:yt;continue;case vt:if("/"!=i||"/"!=o[l+1]){f=yt;continue}f=xt,l++;break;case gt:if("/"==i){f=wt;break}f=Tt;continue;case yt:if(s.scheme=r.scheme,i==n)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query;else if("/"==i||"\\"==i&&s.isSpecial())f=mt;else if("?"==i)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query="",f=jt;else{if("#"!=i){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.path.length--,f=Tt;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=g(r.path),s.query=r.query,s.fragment="",f=Pt}break;case mt:if(!s.isSpecial()||"/"!=i&&"\\"!=i){if("/"!=i){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,f=Tt;continue}f=wt}else f=xt;break;case bt:if(f=xt,"/"!=i||"/"!=_(h,l+1))continue;l++;break;case xt:if("/"!=i&&"\\"!=i){f=wt;continue}break;case wt:if("@"==i){d&&(h="%40"+h),d=!0,a=v(h);for(var x=0;x<a.length;x++){var w=a[x];if(":"!=w||m){var E=ut(w,at);m?s.password+=E:s.username+=E}else m=!0}h=""}else if(i==n||"/"==i||"?"==i||"#"==i||"\\"==i&&s.isSpecial()){if(d&&""==h)return"Invalid authority";l-=v(h).length+1,h="",f=Et}else h+=i;break;case Et:case St:if(e&&"file"==s.scheme){f=It;continue}if(":"!=i||y){if(i==n||"/"==i||"?"==i||"#"==i||"\\"==i&&s.isSpecial()){if(s.isSpecial()&&""==h)return"Invalid host";if(e&&""==h&&(s.includesCredentials()||null!==s.port))return;if(u=s.parseHost(h))return u;if(h="",f=Mt,e)return;continue}"["==i?y=!0:"]"==i&&(y=!1),h+=i}else{if(""==h)return"Invalid host";if(u=s.parseHost(h))return u;if(h="",f=At,e==St)return}break;case At:if(!L(Y,i)){if(i==n||"/"==i||"?"==i||"#"==i||"\\"==i&&s.isSpecial()||e){if(""!=h){var S=k(h,10);if(S>65535)return"Invalid port";s.port=s.isSpecial()&&S===ct[s.scheme]?null:S,h=""}if(e)return;f=Mt;continue}return"Invalid port"}h+=i;break;case Ot:if(s.scheme="file","/"==i||"\\"==i)f=Rt;else{if(!r||"file"!=r.scheme){f=Tt;continue}if(i==n)s.host=r.host,s.path=g(r.path),s.query=r.query;else if("?"==i)s.host=r.host,s.path=g(r.path),s.query="",f=jt;else{if("#"!=i){ft(D(g(o,l),""))||(s.host=r.host,s.path=g(r.path),s.shortenPath()),f=Tt;continue}s.host=r.host,s.path=g(r.path),s.query=r.query,s.fragment="",f=Pt}}break;case Rt:if("/"==i||"\\"==i){f=It;break}r&&"file"==r.scheme&&!ft(D(g(o,l),""))&&(st(r.path[0],!0)?U(s.path,r.path[0]):s.host=r.host),f=Tt;continue;case It:if(i==n||"/"==i||"\\"==i||"?"==i||"#"==i){if(!e&&st(h))f=Tt;else if(""==h){if(s.host="",e)return;f=Mt}else{if(u=s.parseHost(h))return u;if("localhost"==s.host&&(s.host=""),e)return;h="",f=Mt}continue}h+=i;break;case Mt:if(s.isSpecial()){if(f=Tt,"/"!=i&&"\\"!=i)continue}else if(e||"?"!=i)if(e||"#"!=i){if(i!=n&&(f=Tt,"/"!=i))continue}else s.fragment="",f=Pt;else s.query="",f=jt;break;case Tt:if(i==n||"/"==i||"\\"==i&&s.isSpecial()||!e&&("?"==i||"#"==i)){if(".."===(c=W(c=h))||"%2e."===c||".%2e"===c||"%2e%2e"===c?(s.shortenPath(),"/"==i||"\\"==i&&s.isSpecial()||U(s.path,"")):lt(h)?"/"==i||"\\"==i&&s.isSpecial()||U(s.path,""):("file"==s.scheme&&!s.path.length&&st(h)&&(s.host&&(s.host=""),h=_(h,0)+":"),U(s.path,h)),h="","file"==s.scheme&&(i==n||"?"==i||"#"==i))for(;s.path.length>1&&""===s.path[0];)F(s.path);"?"==i?(s.query="",f=jt):"#"==i&&(s.fragment="",f=Pt)}else h+=ut(i,it);break;case kt:"?"==i?(s.query="",f=jt):"#"==i?(s.fragment="",f=Pt):i!=n&&(s.path[0]+=ut(i,nt));break;case jt:e||"#"!=i?i!=n&&("'"==i&&s.isSpecial()?s.query+="%27":s.query+="#"==i?"%23":ut(i,nt)):(s.fragment="",f=Pt);break;case Pt:i!=n&&(s.fragment+=ut(i,ot))}l++}},parseHost:function(t){var e,r,n;if("["==_(t,0)){if("]"!=_(t,t.length-1))return"Invalid host";if(!(e=function(t){var e,r,n,o,i,a,u,c=[0,0,0,0,0,0,0,0],s=0,f=null,l=0,h=function(){return _(t,l)};if(":"==h()){if(":"!=_(t,1))return;l+=2,f=++s}for(;h();){if(8==s)return;if(":"!=h()){for(e=r=0;r<4&&L(X,h());)e=16*e+k(h(),16),l++,r++;if("."==h()){if(0==r)return;if(l-=r,s>6)return;for(n=0;h();){if(o=null,n>0){if(!("."==h()&&n<4))return;l++}if(!L(Y,h()))return;for(;L(Y,h());){if(i=k(h(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;l++}c[s]=256*c[s]+o,2!=++n&&4!=n||s++}if(4!=n)return;break}if(":"==h()){if(l++,!h())return}else if(h())return;c[s++]=e}else{if(null!==f)return;l++,f=++s}}if(null!==f)for(a=s-f,s=7;0!=s&&a>0;)u=c[s],c[s--]=c[f+a-1],c[f+--a]=u;else if(8!=s)return;return c}(z(t,1,-1))))return"Invalid host";this.host=e}else if(this.isSpecial()){if(t=m(t),L(Q,t))return"Invalid host";if(null===(e=function(t){var e,r,n,o,i,a,u,c=B(t,".");if(c.length&&""==c[c.length-1]&&c.length--,(e=c.length)>4)return t;for(r=[],n=0;n<e;n++){if(""==(o=c[n]))return t;if(i=10,o.length>1&&"0"==_(o,0)&&(i=L(H,o)?16:8,o=z(o,8==i?1:2)),""===o)a=0;else{if(!L(10==i?J:8==i?K:X,o))return t;a=k(o,i)}U(r,a)}for(n=0;n<e;n++)if(a=r[n],n==e-1){if(a>=P(256,5-e))return null}else if(a>255)return null;for(u=C(r),n=0;n<r.length;n++)u+=r[n]*P(256,3-n);return u}(t)))return"Invalid host";this.host=e}else{if(L(Z,t))return"Invalid host";for(e="",r=v(t),n=0;n<r.length;n++)e+=ut(r[n],nt);this.host=e}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return p(ct,this.scheme)},shortenPath:function(){var t=this.path,e=t.length;!e||"file"==this.scheme&&1==e&&st(t[0],!0)||t.length--},serialize:function(){var t=this,e=t.scheme,r=t.username,n=t.password,o=t.host,i=t.port,a=t.path,u=t.query,c=t.fragment,s=e+":";return null!==o?(s+="//",t.includesCredentials()&&(s+=r+(n?":"+n:"")+"@"),s+=rt(o),null!==i&&(s+=":"+i)):"file"==e&&(s+="//"),s+=t.cannotBeABaseURL?a[0]:a.length?"/"+D(a,"/"):"",null!==u&&(s+="?"+u),null!==c&&(s+="#"+c),s},setHref:function(t){var e=this.parse(t);if(e)throw T(e);this.searchParams.update()},getOrigin:function(){var t=this.scheme,e=this.port;if("blob"==t)try{return new Lt(t.path[0]).origin}catch(t){return"null"}return"file"!=t&&this.isSpecial()?t+"://"+rt(this.host)+(null!==e?":"+e:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(t){this.parse(b(t)+":",ht)},getUsername:function(){return this.username},setUsername:function(t){var e=v(b(t));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var r=0;r<e.length;r++)this.username+=ut(e[r],at)}},getPassword:function(){return this.password},setPassword:function(t){var e=v(b(t));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var r=0;r<e.length;r++)this.password+=ut(e[r],at)}},getHost:function(){var t=this.host,e=this.port;return null===t?"":null===e?rt(t):rt(t)+":"+e},setHost:function(t){this.cannotBeABaseURL||this.parse(t,Et)},getHostname:function(){var t=this.host;return null===t?"":rt(t)},setHostname:function(t){this.cannotBeABaseURL||this.parse(t,St)},getPort:function(){var t=this.port;return null===t?"":b(t)},setPort:function(t){this.cannotHaveUsernamePasswordPort()||(""==(t=b(t))?this.port=null:this.parse(t,At))},getPathname:function(){var t=this.path;return this.cannotBeABaseURL?t[0]:t.length?"/"+D(t,"/"):""},setPathname:function(t){this.cannotBeABaseURL||(this.path=[],this.parse(t,Mt))},getSearch:function(){var t=this.query;return t?"?"+t:""},setSearch:function(t){""==(t=b(t))?this.query=null:("?"==_(t,0)&&(t=z(t,1)),this.query="",this.parse(t,jt)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var t=this.fragment;return t?"#"+t:""},setHash:function(t){""!=(t=b(t))?("#"==_(t,0)&&(t=z(t,1)),this.fragment="",this.parse(t,Pt)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Lt=function(t){var e=h(this,Dt),r=w(arguments.length,1)>1?arguments[1]:void 0,n=A(e,new _t(t,!1,r));i||(e.href=n.serialize(),e.origin=n.getOrigin(),e.protocol=n.getProtocol(),e.username=n.getUsername(),e.password=n.getPassword(),e.host=n.getHost(),e.hostname=n.getHostname(),e.port=n.getPort(),e.pathname=n.getPathname(),e.search=n.getSearch(),e.searchParams=n.getSearchParams(),e.hash=n.getHash())},Dt=Lt.prototype,Nt=function(t,e){return{get:function(){return O(this)[t]()},set:e&&function(t){return O(this)[e](t)},configurable:!0,enumerable:!0}};if(i&&f(Dt,{href:Nt("serialize","setHref"),origin:Nt("getOrigin"),protocol:Nt("getProtocol","setProtocol"),username:Nt("getUsername","setUsername"),password:Nt("getPassword","setPassword"),host:Nt("getHost","setHost"),hostname:Nt("getHostname","setHostname"),port:Nt("getPort","setPort"),pathname:Nt("getPathname","setPathname"),search:Nt("getSearch","setSearch"),searchParams:Nt("getSearchParams"),hash:Nt("getHash","setHash")}),l(Dt,"toJSON",(function(){return O(this).serialize()}),{enumerable:!0}),l(Dt,"toString",(function(){return O(this).serialize()}),{enumerable:!0}),M){var Ct=M.createObjectURL,Ut=M.revokeObjectURL;Ct&&l(Lt,"createObjectURL",c(Ct,M)),Ut&&l(Lt,"revokeObjectURL",c(Ut,M))}x(Lt,"URL"),o({global:!0,forced:!a,sham:!i},{URL:Lt})},function(t,e,r){"use strict";var n=r(1),o=r(3),i=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,u="Overflow: input needs wider integers to process",c=n.RangeError,s=o(a.exec),f=Math.floor,l=String.fromCharCode,h=o("".charCodeAt),p=o([].join),d=o([].push),v=o("".replace),g=o("".split),y=o("".toLowerCase),m=function(t){return t+22+75*(t<26)},b=function(t,e,r){var n=0;for(t=r?f(t/700):t>>1,t+=f(t/e);t>455;)t=f(t/35),n+=36;return f(n+36*t/(t+38))},x=function(t){var e,r,n=[],o=(t=function(t){for(var e=[],r=0,n=t.length;r<n;){var o=h(t,r++);if(o>=55296&&o<=56319&&r<n){var i=h(t,r++);56320==(64512&i)?d(e,((1023&o)<<10)+(1023&i)+65536):(d(e,o),r--)}else d(e,o)}return e}(t)).length,i=128,a=0,s=72;for(e=0;e<t.length;e++)(r=t[e])<128&&d(n,l(r));var v=n.length,g=v;for(v&&d(n,"-");g<o;){var y=2147483647;for(e=0;e<t.length;e++)(r=t[e])>=i&&r<y&&(y=r);var x=g+1;if(y-i>f((2147483647-a)/x))throw c(u);for(a+=(y-i)*x,i=y,e=0;e<t.length;e++){if((r=t[e])<i&&++a>2147483647)throw c(u);if(r==i){for(var w=a,E=36;;){var S=E<=s?1:E>=s+26?26:E-s;if(w<S)break;var A=w-S,O=36-S;d(n,l(m(S+A%O))),w=f(A/O),E+=36}d(n,l(m(w))),s=b(a,x,g==v),a=0,g++}}a++,i++}return p(n,"")};t.exports=function(t){var e,r,n=[],o=g(v(y(t),a,"."),".");for(e=0;e<o.length;e++)r=o[e],d(n,s(i,r)?"xn--"+x(r):r);return p(n,".")}},function(t,e,r){"use strict";var n=r(0),o=r(11);n({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return o(URL.prototype.toString,this)}})},function(t,e,r){"use strict";r.r(e);r(192),r(193);function n(){}function o(t){return t()}function i(){return Object.create(null)}function a(t){t.forEach(o)}function u(t){return"function"==typeof t}function c(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function s(t){return 0===Object.keys(t).length}new Set;let f=!1;function l(t,e){t.appendChild(e)}function h(t,e,r){t.insertBefore(e,r||null)}function p(t){t.parentNode.removeChild(t)}function d(t){return document.createElement(t)}function v(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function g(t){return document.createTextNode(t)}function y(){return g(" ")}function m(t,e,r){null==r?t.removeAttribute(e):t.getAttribute(e)!==r&&t.setAttribute(e,r)}function b(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function x(t,e,r,n){null===r?t.style.removeProperty(e):t.style.setProperty(e,r,n?"important":"")}new Map;let w;function E(t){w=t}function S(){if(!w)throw new Error("Function called outside component initialization");return w}function A(t){S().$$.on_mount.push(t)}const O=[],R=[],I=[],M=[],T=Promise.resolve();let k=!1;function j(){k||(k=!0,T.then(D))}function P(t){I.push(t)}const _=new Set;let L=0;function D(){const t=w;do{for(;L<O.length;){const t=O[L];L++,E(t),N(t.$$)}for(E(null),O.length=0,L=0;R.length;)R.pop()();for(let t=0;t<I.length;t+=1){const e=I[t];_.has(e)||(_.add(e),e())}I.length=0}while(O.length);for(;M.length;)M.pop()();k=!1,_.clear(),E(t)}function N(t){if(null!==t.fragment){t.update(),a(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(P)}}const C=new Set;function U(t,e){t&&t.i&&(C.delete(t),t.i(e))}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let $;function F(t,e){const r=t.$$;null!==r.fragment&&(a(r.on_destroy),r.fragment&&r.fragment.d(e),r.on_destroy=r.fragment=null,r.ctx=[])}function B(t,e,r,c,s,l,h,d=[-1]){const v=w;E(t);const g=t.$$={fragment:null,ctx:null,props:l,update:n,not_equal:s,bound:i(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(v?v.$$.context:[])),callbacks:i(),dirty:d,skip_bound:!1,root:e.target||v.$$.root};h&&h(g.root);let y=!1;if(g.ctx=r?r(t,e.props||{},(e,r,...n)=>{const o=n.length?n[0]:r;return g.ctx&&s(g.ctx[e],g.ctx[e]=o)&&(!g.skip_bound&&g.bound[e]&&g.bound[e](o),y&&function(t,e){-1===t.$$.dirty[0]&&(O.push(t),j(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),r}):[],g.update(),y=!0,a(g.before_update),g.fragment=!!c&&c(g.ctx),e.target){if(e.hydrate){f=!0;const t=(m=e.target,Array.from(m.childNodes));g.fragment&&g.fragment.l(t),t.forEach(p)}else g.fragment&&g.fragment.c();e.intro&&U(t.$$.fragment),function(t,e,r,n){const{fragment:i,on_mount:c,on_destroy:s,after_update:f}=t.$$;i&&i.m(e,r),n||P(()=>{const e=c.map(o).filter(u);s?s.push(...e):a(e),t.$$.on_mount=[]}),f.forEach(P)}(t,e.target,e.anchor,e.customElement),f=!1,D()}var m;E(v)}"function"==typeof HTMLElement&&($=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(o).filter(u);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,r){this[t]=r}disconnectedCallback(){a(this.$$.on_disconnect)}$destroy(){F(this,1),this.$destroy=n}$on(t,e){const r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(e),()=>{const t=r.indexOf(e);-1!==t&&r.splice(t,1)}}$set(t){this.$$set&&!s(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class z{$destroy(){F(this,1),this.$destroy=n}$on(t,e){const r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(e),()=>{const t=r.indexOf(e);-1!==t&&r.splice(t,1)}}$set(t){this.$$set&&!s(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function W(t){return function(t){if(Array.isArray(t))return q(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return q(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return q(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function q(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function G(t){return Array(t).fill().map((function(t,e){return e}))}function V(t,e,r){var n=e[0],o=e[1],i=(-t[2]-n*t[0])/t[1],a=(-t[2]-o*t[0])/t[1],u=[],c=[[n,r[0]],[n,r[1]],[o,r[1]],[o,r[0]],[n,r[0]]];if(i>r[1]&&a>r[1]){var s=[u,c];c=s[0],u=s[1]}else u=[[n,i],[o,a],[o,Math.min(i,r[0])],[n,Math.min(i,r[0])],[n,i]],c=[[n,i],[o,a],[o,Math.max(i,r[1])],[n,Math.max(i,r[1])],[n,i]];return{boundary:[[n,i],[o,a]],below:u,above:c}}var Y={state:1,m:2147483648,a:1103515245,c:12345};function H(){return Y.state=(Y.a*Y.state+Y.c)%Y.m,Y.state/(Y.m-1)}function K(){for(var t=0,e=0;0===t;)t=H();for(;0===e;)e=H();return Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*e)}function J(t){return parseInt(t*H())%t}function X(t,e,r,n){var o=[],i=[];Y.state=n;J(2),J(2);[-1,1].forEach((function(n){for(var a=H()+.5,u=H()+.5,c=K()/2,s=G(t/2).map((function(){var t=[n*r+a*K(),n*r+u*K()];return t[1]+=c*t[0],t})),f=0;f<2;++f);o=o.concat(s),i=i.concat(G(t/2).map((function(){return 2*H()<e?-n:n})))}));for(var a=function(t){var e=[Math.min.apply(Math,W(o.map((function(e){return e[t]})))),Math.max.apply(Math,W(o.map((function(e){return e[t]}))))],r=e[0],n=e[1]-r;o=o.map((function(e){return e[t]=(e[t]-r)/n,e}))},u=0;u<2;++u)a(u);return o.map((function(t,e){return{x:t,y:i[e],subpops:[]}}))}function Q(t){let e,r,o,i,a,u,c,s,f,w,E,S,A,O,R,I,M,T,k,j,P,_;return{c(){e=v("svg"),r=v("text"),o=g(t[6]),i=g(" / "),a=g(t[7]),u=g(" Poisons"),c=y(),s=d("canvas"),f=y(),w=d("button"),E=v("svg"),S=v("path"),A=y(),O=d("button"),R=v("svg"),I=v("path"),M=y(),T=d("button"),k=v("svg"),j=v("path"),P=y(),_=d("input"),m(r,"text-anchor","middle"),m(r,"x","50%"),m(r,"y","99%"),m(e,"width",Z),m(e,"height",tt),m(e,"class","overlay"),m(s,"width",Z),m(s,"height",tt),m(S,"d",et),m(S,"fill","#888"),m(E,"width","10"),m(E,"height","10"),m(E,"viewBox","0 0 10 10"),m(w,"class","button play-button"),x(w,"cursor","pointer"),m(I,"d",rt),m(I,"fill","#888"),m(R,"width","10"),m(R,"height","10"),m(R,"viewBox","0 0 10 10"),m(O,"class","button step-forward-button"),x(O,"cursor","pointer"),m(j,"d",nt),m(j,"fill","#888"),m(k,"width","10"),m(k,"height","10"),m(k,"viewBox","0 0 10 10"),m(T,"class","button step-back-button"),x(T,"cursor","pointer"),m(_,"type","range"),m(_,"class","slider attack-slider"),m(_,"min","0"),m(_,"max","1"),_.value="0"},m(n,p){h(n,e,p),l(e,r),l(r,o),l(r,i),l(r,a),l(r,u),t[11](e),h(n,c,p),h(n,s,p),t[12](s),h(n,f,p),h(n,w,p),l(w,E),l(E,S),t[13](w),h(n,A,p),h(n,O,p),l(O,R),l(R,I),t[14](O),h(n,M,p),h(n,T,p),l(T,k),l(k,j),t[15](T),h(n,P,p),h(n,_,p),t[16](_)},p(t,[e]){64&e&&b(o,t[6]),128&e&&b(a,t[7])},i:n,o:n,d(r){r&&p(e),t[11](null),r&&p(c),r&&p(s),t[12](null),r&&p(f),r&&p(w),t[13](null),r&&p(A),r&&p(O),t[14](null),r&&p(M),r&&p(T),t[15](null),r&&p(P),r&&p(_),t[16](null)}}}const Z=704,tt=600,et="M 0 0 L 0 10 L 3 10 L 3 0 Z M 6 0 L 6 10 L 9 10 L 9 0 Z",rt="M 0 0 L 3 0 L 9 5 L 3 10 L 0 10 L 0 10 L 6 5 L 0 0",nt="M 9 0 L 6 0 L 0 5 L 6 10 L 9 10 L 9 10 L 3 5 L 9 0";function ot(t,e,r){let n,o,i,a,u,c,{initSpIndex:s}=e,{data:f}=e,{fID:l}=e,h=s,p=-1,d=0,v=[],g=f.attacks[h].poisons.length,y=Math.max(Math.min(15,parseInt((g+1)/10)),1),m=!0,b=!1;const x=()=>{let t=f.dset;const e=t=>t.x[0],s=t=>t.x[1],x=t=>null==t.subpops?1==t.y?"blue-poison":"red-poison":t.subpops.includes(h)?"target-point":t.subpops.includes(p)?"selected-point":1==t.y?"blue-point":"red-point",w=60,E=40,S=Z-E-40,A=tt-w-60;let O=d3.extent(t,e);O=[O[0]-.1,O[1]+.1];const R=d3.scaleLinear().domain(O).range([0,S]).nice();let I=d3.extent(t,s);I=[I[0]-.1,I[1]+.1];const M=d3.scaleLinear().domain(I).range([A,0]).nice(),T=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${E},${w})`),k=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${E},${w})`),j=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${E},${w})`),P=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${E},${w})`),_=d3.axisBottom(R).tickSize(-A).tickPadding(15),L=d3.axisLeft(M).tickSize(-S).tickPadding(10);k.append("g").call(L),k.append("g").call(_).attr("transform",`translate(0,${A})`);let D=d3.line().x(t=>R(t[0])).y(t=>M(t[1]));P.append("clipPath").attr("id","rect-clip"+l).append("rect").attr("x",0).attr("y",0).attr("width",S).attr("height",A);const N=P.append("line").style("stroke","darkgray").style("stroke-width",5).attr("clip-path",`url(#rect-clip${l})`),C=P.append("line").style("stroke","black").style("stroke-width",5).attr("clip-path",`url(#rect-clip${l})`),U=T.append("path").attr("clip-path",`url(#rect-clip${l})`),$=T.append("path").attr("clip-path",`url(#rect-clip${l})`);let F=k.selectAll("circle").data(t).enter().append("circle").attr("class",x).attr("cx",t=>R(e(t))).attr("cy",t=>M(s(t))),B=j.selectAll("path");const z=d3.Delaunay.from(f.cluster_centers),W=()=>{B.attr("class",x),F.attr("class",x)},q=t=>{m=null==t?!m:t,d3.select(a).select("svg").select("path").attr("d",m?et:"M 0 0 L 10 5 L 0 10 Z")},G=()=>{m&&!b&&(r(2,i.value=(+i.value+1)%(g+1),i),K(!1),d==g&&(b=!0,setTimeout(()=>b=!1,1e3))),setTimeout(G,1e3/y)},Y=()=>{let t,e=f.attacks[h].im_models[0],r=f.attacks[h].im_models[d];t=V(e,O,I),N.attr("x1",R(t.boundary[0][0])).attr("x2",R(t.boundary[1][0])).attr("y1",M(t.boundary[0][1])).attr("y2",M(t.boundary[1][1])),t=V(r,O,I),C.attr("x1",R(t.boundary[0][0])).attr("x2",R(t.boundary[1][0])).attr("y1",M(t.boundary[0][1])).attr("y2",M(t.boundary[1][1])),U.attr("d",D(t.below)).attr("class",r[1]<0?"area-blue":"area-red"),$.attr("d",D(t.above)).attr("class",r[1]<0?"area-red":"area-blue")},H=()=>{v.forEach((t,e)=>t.id=e.toString()),B=j.selectAll("path").data(v,t=>t.id),B.enter().append("path").attr("class",t=>x(t)).attr("d",d3.symbol().type(d3.symbolCross).size(600)).attr("transform",t=>`translate(${R(e(t))},${M(s(t))})`).transition().duration(200).attr("d",d3.symbol().type(d3.symbolCross).size(200)),B.exit().remove()},K=t=>{t&&q(!1),r(6,d=+i.value),v=f.attacks[h].poisons.slice(0,d),H(),Y()};d3.select(n).on("mousemove",t=>{let[e,r]=d3.pointer(t);var n,o,i,a;e-=E,r-=w,[e,r]=[R.invert(e),M.invert(r)],p=z.find(e,r,h),n=f.cluster_centers[p],i=(o=[e,r])[0]-n[0],a=o[1]-n[1],i*i+a*a>.05&&(p=-1),W()}).on("click",t=>{-1!=p&&p!=h&&(h=p,r(7,g=f.attacks[h].poisons.length),y=Math.max(Math.min(15,parseInt((g+1)/10)),1),r(2,i.value=r(6,d=0),i),d3.select(i).attr("max",g),K(),W())}).on("mouseout",t=>{p=-1,W(),Y()}),d3.select(i).attr("max",g).on("input",()=>K(!0)),d3.select(a).on("click",()=>q()),d3.select(u).on("click",()=>{r(2,i.value=Math.min(+i.value+1,g),i),K(!0)}),d3.select(c).on("click",()=>{r(2,i.value=Math.max(+i.value-1,0),i),K(!0)}),H(),H(),Y(),setTimeout(G,1e3/y)};return A(()=>{x()}),t.$$set=t=>{"initSpIndex"in t&&r(8,s=t.initSpIndex),"data"in t&&r(9,f=t.data),"fID"in t&&r(10,l=t.fID)},[n,o,i,a,u,c,d,g,s,f,l,function(t){R[t?"unshift":"push"](()=>{o=t,r(1,o)})},function(t){R[t?"unshift":"push"](()=>{n=t,r(0,n)})},function(t){R[t?"unshift":"push"](()=>{a=t,r(3,a)})},function(t){R[t?"unshift":"push"](()=>{u=t,r(4,u)})},function(t){R[t?"unshift":"push"](()=>{c=t,r(5,c)})},function(t){R[t?"unshift":"push"](()=>{i=t,r(2,i)})}]}var it=class extends z{constructor(t){super(),B(this,t,ot,Q,c,{initSpIndex:8,data:9,fID:10})}};function at(t){return function(t){if(Array.isArray(t))return ut(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return ut(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return ut(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ut(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function ct(t,e,r,n,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}function st(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){ct(i,n,o,a,u,"next",t)}function u(t){ct(i,n,o,a,u,"throw",t)}a(void 0)}))}}function ft(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function lt(t,e,r){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.set(t,r)}function ht(t,e){return function(t,e){if(e.get)return e.get.call(t);return e.value}(t,dt(t,e,"get"))}function pt(t,e,r){return function(t,e,r){if(e.set)e.set.call(t,r);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=r}}(t,dt(t,e,"set"),r),r}function dt(t,e,r){if(!e.has(t))throw new TypeError("attempted to "+r+" private field on non-instance");return e.get(t)}function vt(t){return Math.floor(Math.random()*t)}function gt(t,e){return t[0]*e[0]+t[1]*e[1]}var yt=new WeakMap,mt=new WeakMap,bt=new WeakMap,xt=new WeakMap,wt=new WeakMap,Et=new WeakMap,St=new WeakMap,At=new WeakMap,Ot=function(){function t(e,r,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),lt(this,yt,{writable:!0,value:[]}),lt(this,mt,{writable:!0,value:gt}),lt(this,bt,{writable:!0,value:200}),lt(this,xt,{writable:!0,value:1e-4}),lt(this,wt,{writable:!0,value:1e5}),lt(this,Et,{writable:!0,value:new Array(2).fill(0)}),lt(this,St,{writable:!0,value:0}),lt(this,At,{writable:!0,value:0}),void 0!==e&&pt(this,wt,e),void 0!==r&&pt(this,bt,r),void 0!==n&&pt(this,xt,n)}var e,r,n,o,i;return e=t,(r=[{key:"fit",value:(i=st(regeneratorRuntime.mark((function t(e,r,n){var o,i,a,u,c,s,f,l,h,p,d,v,g,y,m,b,x,w,E,S=arguments;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:for(o=!(S.length>3&&void 0!==S[3])||S[3],i=pt(this,At,+ht(this,At)+1),o&&(pt(this,yt,Array(a).fill(0)),pt(this,Et,Array(2).fill(0)),pt(this,St,0)),a=e.length;ht(this,yt).length<a;)ht(this,yt).push(0);u=0;case 6:if(!(u<ht(this,bt)&&i===ht(this,At))){t.next=44;break}c=0,s=0;case 9:if(!(s<a)){t.next=39;break}for(f=ht(this,St)-r[s],l=0;l<a;++l)f+=ht(this,yt)[l]*r[l]*ht(this,mt).call(this,e[s],e[l]);if(r[s]*f<-ht(this,xt)&&ht(this,yt)[s]<ht(this,wt)||r[s]*f>ht(this,xt)&&ht(this,yt)[s]>0){t.next=14;break}return t.abrupt("continue",36);case 14:for(h=s;h===s;)h=vt(a);for(p=ht(this,St)-r[h],d=0;d<a;++d)p+=ht(this,yt)[d]*r[d]*ht(this,mt).call(this,e[h],e[d]);if(v=ht(this,yt)[s],g=ht(this,yt)[h],y=void 0,m=void 0,r[s]===r[h]?(y=Math.max(0,v+g-ht(this,wt)),m=Math.min(ht(this,wt),v+g)):(y=Math.max(0,g-v),m=Math.min(ht(this,wt),ht(this,wt)+g-v)),!(Math.abs(y-m)<1e-5)){t.next=24;break}return t.abrupt("continue",36);case 24:if(!((b=2*ht(this,mt).call(this,e[s],e[h])-ht(this,mt).call(this,e[s],e[s])-ht(this,mt).call(this,e[h],e[h]))>=0)){t.next=27;break}return t.abrupt("continue",36);case 27:if(ht(this,yt)[h]=g-r[h]*(f-p)/b,ht(this,yt)[h]=Math.min(Math.max(ht(this,yt)[h],y),m),ht(this,yt)[s]=v+r[s]*r[h]*(g-ht(this,yt)[h]),!(Math.abs(ht(this,yt)[h]-g)<1e-5)){t.next=32;break}return t.abrupt("continue",36);case 32:x=ht(this,St)-f-r[s]*(ht(this,yt)[s]-v)*ht(this,mt).call(this,e[s],e[s])-r[h]*(ht(this,yt)[h]-g)*ht(this,mt).call(this,e[s],e[h]),w=ht(this,St)-p-r[s]*(ht(this,yt)[s]-v)*ht(this,mt).call(this,e[s],e[h])-r[h]*(ht(this,yt)[h]-g)*ht(this,mt).call(this,e[h],e[h]),0<ht(this,yt)[s]&&ht(this,yt)[s]<ht(this,wt)?pt(this,St,x):0<ht(this,yt)[h]&&ht(this,yt)[h]<ht(this,wt)?pt(this,St,w):pt(this,St,.5*(x+w)),c+=1;case 36:++s,t.next=9;break;case 39:if(0===c)u+=1;else{for(u=0,pt(this,Et,new Array(2).fill(0)),E=0;E<a;++E)ht(this,Et)[0]+=ht(this,yt)[E]*r[E]*e[E][0],ht(this,Et)[1]+=ht(this,yt)[E]*r[E]*e[E][1];n()}return t.next=42,new Promise((function(t){return setTimeout(t,1)}));case 42:t.next=6;break;case 44:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return i.apply(this,arguments)})},{key:"fitGD",value:(o=st(regeneratorRuntime.mark((function t(e,r,n){var o,i,a,u,c;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:o=pt(this,At,+ht(this,At)+1),i=e.length,a=.25,u=new Array(3).fill(0),new Array(3).fill(0);case 5:for(at(u),u.fill(0),c=0;c<i;++c)r[c]*(gt(ht(this,Et),e[c])+ht(this,St))<1&&(u[0]-=r[c]*e[c][0],u[1]-=r[c]*e[c][1],u[2]-=r[c]);return u[0]/=i,u[1]/=i,u[2]/=i,u[0]+=ht(this,Et)[0]/ht(this,wt),u[1]+=ht(this,Et)[1]/ht(this,wt),ht(this,Et)[0]-=a*u[0],ht(this,Et)[1]-=a*u[1],pt(this,St,ht(this,St)-a*u[2]),n(),t.next=19,new Promise((function(t){return setTimeout(t,1)}));case 19:if(Math.abs(gt(u,u))>1e-6&&o==ht(this,At)){t.next=5;break}case 20:case"end":return t.stop()}}),t,this)}))),function(t,e,r){return o.apply(this,arguments)})},{key:"parameters",get:function(){return[].concat(at(ht(this,Et)),[ht(this,St)])}}])&&ft(e.prototype,r),n&&ft(e,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function Rt(t){let e,r,o;return{c(){e=v("svg"),r=y(),o=d("canvas"),m(e,"width",It),m(e,"height",Mt),m(e,"class","overlay"),m(o,"width",It),m(o,"height",Mt)},m(n,i){h(n,e,i),t[4](e),h(n,r,i),h(n,o,i),t[5](o)},p:n,i:n,o:n,d(n){n&&p(e),t[4](null),n&&p(r),n&&p(o),t[5](null)}}}const It=984,Mt=450;function Tt(t,e,r){let n,o,i,a,u,c,s,f,{fID:l}=e,{controls:h}=e,p=0,d=1,v=1,g=X(128,p,d,v),y=new Ot,m=new Ot,b=-1,x=[],w=[];const E=()=>{const t=t=>t.x[0],e=t=>t.x[1],r=t=>null==t.subpops?1==t.y?"blue-poison":"red-poison":t.subpops.includes(0)?"target-point":t.subpops.includes(b)?"selected-point":1==t.y?"blue-point":"red-point",E=5,S=40,A=It-S-40,O=Mt-E-150;let R=[0,1],I=[R[0]-.1,R[1]+.1];const M=d3.scaleLinear().domain(I).range([0,A]).nice();let T=[-0,1],k=[T[0]-.1,T[1]+.1];const j=d3.scaleLinear().domain(k).range([O,0]).nice(),P=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${S},${E})`),_=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${S},${E})`),L=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${S},${E})`),D=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${S},${E})`),N=d3.select(o).attr("pointer-events","none").append("g").attr("transform",`translate(${S},${E})`),C=d3.axisBottom(M).tickSize(-O).tickPadding(15),U=d3.axisLeft(j).tickSize(-A).tickPadding(10);_.append("g").call(U),_.append("g").call(C).attr("transform",`translate(0,${O})`);let $=d3.line().x(t=>M(t[0])).y(t=>j(t[1]));N.append("clipPath").attr("id","rect-clip"+l).append("rect").attr("x",0).attr("y",0).attr("width",A).attr("height",O);const F=N.append("line").style("stroke","darkgray").style("stroke-width",5).attr("clip-path",`url(#rect-clip${l})`),B=N.append("line").style("stroke","black").style("stroke-width",5).attr("clip-path",`url(#rect-clip${l})`),z=P.append("path").attr("clip-path",`url(#rect-clip${l})`),W=P.append("path").attr("clip-path",`url(#rect-clip${l})`);let q=_.selectAll("circle").data(g).enter().append("circle").attr("class",r).attr("cx",e=>M(t(e))).attr("cy",t=>j(e(t))),G=L.selectAll("path"),Y=D.selectAll("path");i=d3.select(h).select("#alphaSlider"),a=d3.select(h).select("#betaSlider"),u=d3.select(h).select("#seedSlider"),c=d3.select(h).selectAll("svg").select("#alphaText"),s=d3.select(h).selectAll("svg").select("#betaText"),f=d3.select(h).selectAll("svg").select("#seedText");const H=()=>{G.attr("class",r),q.attr("class",r)},K=()=>{let t,e=y.parameters,r=m.parameters;t=V(e,I,k),F.attr("x1",M(t.boundary[0][0])).attr("x2",M(t.boundary[1][0])).attr("y1",j(t.boundary[0][1])).attr("y2",j(t.boundary[1][1])),t=V(r,I,k),B.attr("x1",M(t.boundary[0][0])).attr("x2",M(t.boundary[1][0])).attr("y1",j(t.boundary[0][1])).attr("y2",j(t.boundary[1][1])),z.attr("d",$(t.below)).attr("class",r[1]<0?"area-blue":"area-red"),W.attr("d",$(t.above)).attr("class",r[1]<0?"area-red":"area-blue")},J=t=>{let e=g.concat(x);t&&y.fitGD(g.map(t=>t.x),g.map(t=>t.y),K),m.fitGD(e.map(t=>t.x),e.map(t=>t.y),K)},Q=n=>{switch(n){case"alpha":d=.25*+i.node().value,c.text("Class Separation α = "+d.toFixed(2));break;case"beta":p=.1*+a.node().value,s.text("Random Label Fraction β = "+p.toFixed(2));break;case"seed":v=+u.node().value,f.text("Dataset Seed s = "+v)}g=X(128,p,d,v),q=_.selectAll("circle").data(g),q.data(g).attr("class",r).transition().duration(250).attr("cx",e=>M(t(e))).attr("cy",t=>j(e(t))),q.exit().remove(),x=[],G=L.selectAll("path").data(x).exit().remove(),J(!0)};d3.select(n).on("mousemove",n=>{let[o,i]=d3.pointer(n);o-=S,i-=E,[o,i]=[M.invert(o),j.invert(i)],w=o>=R[0]&&o<=R[1]&&i>=T[0]&&i<=T[1]?[{x:[o,i],y:1}]:[],Y=D.selectAll("path").data(w),Y.exit().remove(),Y.attr("d",d3.symbol().type(d3.symbolCross).size(200)).attr("transform",r=>`translate(${M(t(r))},${j(e(r))})`).enter().append("path").attr("class",r).attr("d",d3.symbol().type(d3.symbolCross).size(200)).attr("transform",r=>`translate(${M(t(r))},${j(e(r))})`),H()}).on("click",n=>{let[o,i]=d3.pointer(n);o-=S,i-=E,[o,i]=[M.invert(o),j.invert(i)];let a=[o,i];o>=R[0]&&o<=R[1]&&i>=T[0]&&i<=T[1]&&(x.push({x:a,y:1}),G=L.selectAll("path").data(x),G.enter().append("path").attr("class",r).attr("d",d3.symbol().type(d3.symbolCross).size(200)).attr("transform",r=>`translate(${M(t(r))},${j(e(r))})`),J(!1))}).on("mouseout",t=>{b=-1,H(),Y.data([]).exit().remove()}),i.on("input",()=>Q("alpha")),a.on("input",()=>Q("beta")),u.on("change",()=>Q("seed")),J(!0)};return A(()=>{E()}),t.$$set=t=>{"fID"in t&&r(2,l=t.fID),"controls"in t&&r(3,h=t.controls)},[n,o,l,h,function(t){R[t?"unshift":"push"](()=>{o=t,r(1,o)})},function(t){R[t?"unshift":"push"](()=>{n=t,r(0,n)})}]}var kt=class extends z{constructor(t){super(),B(this,t,Tt,Rt,c,{fID:2,controls:3})}},jt=0,Pt=document.getElementById("svelte-poison-demo-dfigure");Pt.addEventListener("ready",(function(){var t=Pt.querySelector("#svelte-demo-target"),e=Pt.querySelector("#svelte-demo-controls");new kt({target:t,props:{fID:jt++,controls:e}})}));var _t=document.getElementById("svelte-scatterplot-dfigure-example1");_t.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/1.00-0.1-5.json").then((function(t){return t.json()})).then((function(t){var e=_t.querySelector("#svelte-scatterplot-target");new it({target:e,props:{data:t,initSpIndex:6,fID:jt++}})}))}));var Lt=document.getElementById("svelte-scatterplot-dfigure-example2");Lt.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/2.00-1.0-4.json").then((function(t){return t.json()})).then((function(t){var e=Lt.querySelector("#svelte-scatterplot-target");new it({target:e,props:{data:t,initSpIndex:6,fID:jt++}})}))}));var Dt=document.getElementById("svelte-scatterplot-dfigure-example3");Dt.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/0.00-0.0-4.json").then((function(t){return t.json()})).then((function(t){var e=Dt.querySelector("#svelte-scatterplot-target");new it({target:e,props:{data:t,initSpIndex:8,fID:jt++}})}))}));var Nt=document.getElementById("svelte-scatterplot-dfigure-example4");Nt.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/2.00-0.0-4.json").then((function(t){return t.json()})).then((function(t){var e=Nt.querySelector("#svelte-scatterplot-target");new it({target:e,props:{data:t,initSpIndex:4,fID:jt++}})}))}));var Ct=document.getElementById("svelte-scatterplot-dfigure-example5");Ct.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/2.00-0.0-4.json").then((function(t){return t.json()})).then((function(t){var e=Ct.querySelector("#svelte-scatterplot-target");new it({target:e,props:{data:t,initSpIndex:3,fID:jt++}})}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LXNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZyZWV6aW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXJlZHVjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctcmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1leHBtMS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3doaXRlc3BhY2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXVuc3VwcG9ydGVkLWRvdC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93cmFwLWVycm9yLWNvbnN0cnVjdG9yLXdpdGgtY2F1c2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lcnJvci10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzEwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1kYXRhLWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2Zmc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXdlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Jhc2U2NC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS11cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zdGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5lcnJvci5jYXVzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmVycm9yLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFnZ3JlZ2F0ZS1lcnJvci5jYXVzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZWVlNzU0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLmlzLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRhLXZpZXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLmdldC15ZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS5ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnNldC15ZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1nbXQtc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kYXRlLXRvLWlzby1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5oYXMtaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hdGFuaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguaW11bC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1leHBvbmVudGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1wcmVjaXNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtc2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyb20tZW50cmllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaGFzLW93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9xdWV1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmZpbmFsbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZG90LWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5zdGlja3kuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudGVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYXQtYWx0ZXJuYXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc2VhcmNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1YnN0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ib2xkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wb3NpdGl2ZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDE2LWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS1zcGVjaWVzLWFuZC1saXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLWNvbnN0cnVjdG9yLWFuZC1saXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zdWJhcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy51bmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMud2Vhay1zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuYXRvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5idG9hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWV4Y2VwdGlvbi5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHJ5LW5vZGUtcmVxdWlyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnN0YWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1leGNlcHRpb24udG8tc3RyaW5nLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIucXVldWUtbWljcm90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnN0cnVjdHVyZWQtY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXgubWpzIiwid2VicGFjazovLy8uL3NyYy91dGlsLmpzIiwid2VicGFjazovLy9hdHRhY2stYW5pbWF0aW9uLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvc3ZtLmpzIiwid2VicGFjazovLy9wb2lzb25pbmctZGVtby5zdmVsdGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZ2xvYmFsIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwib3B0aW9ucyIsInNvdXJjZSIsInRhcmdldCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJkZXNjcmlwdG9yIiwiVEFSR0VUIiwiR0xPQkFMIiwiU1RBVElDIiwic3RhdCIsIm5vVGFyZ2V0R2V0IiwiZm9yY2VkIiwidW5kZWZpbmVkIiwic2hhbSIsIml0IiwiTWF0aCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJ0aGlzIiwiRnVuY3Rpb24iLCJleGVjIiwiZXJyb3IiLCJOQVRJVkVfQklORCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwidW5jdXJyeVRoaXMiLCJmbiIsImFwcGx5IiwiYXJndW1lbnRzIiwiaXNPYmplY3QiLCJTdHJpbmciLCJUeXBlRXJyb3IiLCJhcmd1bWVudCIsImZhaWxzIiwiaXNDYWxsYWJsZSIsInNoYXJlZCIsImhhc093biIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsInN5bWJvbEZvciIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJkZXNjcmlwdGlvbiIsImNsYXNzb2YiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJQcm90b3R5cGUiLCJOQVRJVkVfQVJSQVlfQlVGRkVSIiwiREVTQ1JJUFRPUlMiLCJ0cnlUb1N0cmluZyIsImlzUHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwid2VsbEtub3duU3ltYm9sIiwiSW50OEFycmF5IiwiSW50OEFycmF5UHJvdG90eXBlIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSIsIlR5cGVkQXJyYXkiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiT2JqZWN0UHJvdG90eXBlIiwiVE9fU1RSSU5HX1RBRyIsIlRZUEVEX0FSUkFZX1RBRyIsIlRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SIiwiTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyIsIm9wZXJhIiwiVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QiLCJVaW50OEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiaXNUeXBlZEFycmF5Iiwia2xhc3MiLCJhVHlwZWRBcnJheSIsImFUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJDIiwiZXhwb3J0VHlwZWRBcnJheU1ldGhvZCIsIktFWSIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXJyb3IyIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImlzVmlldyIsInRvT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyIsImFuT2JqZWN0IiwidG9Qcm9wZXJ0eUtleSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJjdXJyZW50IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwidG9MZW5ndGgiLCJvYmoiLCJsZW5ndGgiLCJhRnVuY3Rpb24iLCJuYW1lc3BhY2UiLCJtZXRob2QiLCJpbnNwZWN0U291cmNlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsIkNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FIiwiQ09ORklHVVJBQkxFIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwic3BsaXQiLCJzdGF0ZSIsInVuc2FmZSIsInNpbXBsZSIsInNsaWNlIiwicmVwbGFjZSIsImpvaW4iLCJzZXQiLCJoYXMiLCJOQVRJVkVfV0VBS19NQVAiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsInN0b3JlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImdldHRlckZvciIsIlRZUEUiLCJ0eXBlIiwiY2VpbCIsImZsb29yIiwibnVtYmVyIiwiSW5kZXhlZE9iamVjdCIsImxlbmd0aE9mQXJyYXlMaWtlIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwicHVzaCIsImNyZWF0ZU1ldGhvZCIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJJU19GSUxURVJfUkVKRUNUIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJ0aGF0Iiwic3BlY2lmaWNDcmVhdGUiLCJyZXN1bHQiLCJib3VuZEZ1bmN0aW9uIiwiaW5kZXgiLCJmb3JFYWNoIiwibWFwIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwidG9JbmRleGVkT2JqZWN0IiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJwYXRoIiwid3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSIsInRvU3RyaW5nIiwic3RyaW5nU2xpY2UiLCJ0b0ludGVnZXJPckluZmluaXR5IiwibWluIiwiUmVmbGVjdCIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXNNb2R1bGUiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYIiwid3JpdGUiLCJjbG9zZSIsInRlbXAiLCJwYXJlbnRXaW5kb3ciLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJkb2N1bWVudCIsImRvbWFpbiIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJGIiwiUHJvcGVydGllcyIsInF1b3QiLCJzdHJpbmciLCJ0YWciLCJhdHRyaWJ1dGUiLCJTIiwicDEiLCJNRVRIT0RfTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsImJpdG1hcCIsIlRBRyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsImNvbnN0cnVjdG9yIiwiYUNhbGxhYmxlIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJBcnJheSIsInByb3RvIiwiX19wcm90b19fIiwiZ2V0QnVpbHRJbiIsIlYiLCJmdW5jIiwibWF4IiwiaW50ZWdlciIsInByb3BlcnR5S2V5IiwiaXNBcnJheUl0ZXJhdG9yTWV0aG9kIiwiZ2V0SXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGhvZCIsIml0ZXJhdG9yQ2xvc2UiLCJSZXN1bHQiLCJzdG9wcGVkIiwiUmVzdWx0UHJvdG90eXBlIiwiaXRlcmFibGUiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyYXRvciIsIml0ZXJGbiIsIm5leHQiLCJzdGVwIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwiZG9uZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCIkIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsImFuSW5zdGFuY2UiLCJpc0ludGVncmFsTnVtYmVyIiwidG9JbmRleCIsInRvT2Zmc2V0IiwiaXNTeW1ib2wiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidHlwZWRBcnJheUZyb20iLCJzZXRTcGVjaWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJzZXRJbnRlcm5hbFN0YXRlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyb3VuZCIsIlJhbmdlRXJyb3IiLCJBcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyUHJvdG90eXBlIiwiRGF0YVZpZXciLCJmcm9tTGlzdCIsImxpc3QiLCJhZGRHZXR0ZXIiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5Iiwid3JhcHBlciIsIkNMQU1QRUQiLCJCWVRFUyIsIm1hdGNoIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImV4cG9ydGVkIiwiYWRkRWxlbWVudCIsImRhdGEiLCJ2aWV3IiwiYnl0ZU9mZnNldCIsImR1bW15IiwidHlwZWRBcnJheU9mZnNldCIsIiRsZW5ndGgiLCJvZmZzZXQiLCJidWZmZXIiLCJieXRlTGVuZ3RoIiwiJGxlbiIsInRvUHJpbWl0aXZlIiwidmVyc2lvbiIsInVzZXJBZ2VudCIsInByb2Nlc3MiLCJEZW5vIiwidmVyc2lvbnMiLCJ2OCIsImludGVybmFsT2JqZWN0S2V5cyIsImNvbmNhdCIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsInBhc3NlZCIsInJlcXVpcmVkIiwiaXNBcnJheSIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUiLCJpc0V4dGVuc2libGUiLCJGUkVFWklORyIsIlJFUVVJUkVEIiwiTUVUQURBVEEiLCJpZCIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsIm1ldGEiLCJlbmFibGUiLCJzcGxpY2UiLCJmYXN0S2V5IiwiZ2V0V2Vha0RhdGEiLCJvbkZyZWV6ZSIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJkb3RBbGwiLCJ1bmljb2RlIiwic3RpY2t5IiwiJFN5bWJvbCIsInBvc3RmaXgiLCJyYW5kb20iLCJnZXREZXNjcmlwdG9yIiwiRVhJU1RTIiwiUFJPUEVSIiwibm9vcCIsImVtcHR5IiwiY29uc3RydWN0IiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJjYWxsZWQiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwiU1BFQ0lFUyIsImFDb25zdHJ1Y3RvciIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIndoaXRlc3BhY2VzIiwid2hpdGVzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJzdGFydCIsImVuZCIsInRyaW0iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImluZGV4T2YiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsIm9iamVjdEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJrZXlzIiwiY3JlYXRlUHJvcGVydHkiLCJrIiwiZmluIiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJvcmlnaW5hbEFycmF5IiwiJGRlZmF1bHQiLCJnZXRNZXRob2QiLCJJdGVyYXRvcnMiLCJJVEVSQVRPUiIsIlY4X1ZFUlNJT04iLCJhcnJheSIsImZvbyIsIkJvb2xlYW4iLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIk1BVENIIiwiaXNSZWdFeHAiLCJyZWdleHBFeGVjIiwiUiIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIklTX1BVUkUiLCJjb3B5cmlnaHQiLCJsaWNlbnNlIiwiY3JlYXRlRWxlbWVudCIsImZ1bmN0aW9uVG9TdHJpbmciLCJvd25LZXlzIiwiZXhjZXB0aW9ucyIsIlRFU1QiLCJFcnJvciIsInN0YWNrIiwiVjhfT1JfQ0hBS1JBX1NUQUNLX0VOVFJZIiwiSVNfVjhfT1JfQ0hBS1JBX1NUQUNLIiwiZHJvcEVudHJpZXMiLCJ1c2luZ0l0ZXJhdG9yIiwiaXRlcmF0b3JNZXRob2QiLCJTQUZFX0NMT1NJTkciLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJmcm9tIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJhZGRUb1Vuc2NvcGFibGVzIiwiZGVmaW5lSXRlcmF0b3IiLCJpdGVyYXRlZCIsImtpbmQiLCJ2YWx1ZXMiLCJBcmd1bWVudHMiLCJJU19SSUdIVCIsImFyZ3VtZW50c0xlbmd0aCIsIm1lbW8iLCJsZWZ0IiwicmlnaHQiLCJGdW5jdGlvbk5hbWUiLCJyZWRlZmluZUFsbCIsIklFRUU3NTQiLCJhcnJheUZpbGwiLCJhcnJheVNsaWNlIiwic2V0VG9TdHJpbmdUYWciLCJQUk9QRVJfRlVOQ1RJT05fTkFNRSIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiJERhdGFWaWV3IiwiRGF0YVZpZXdQcm90b3R5cGUiLCJmaWxsIiwicmV2ZXJzZSIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImNvdW50IiwiaXNMaXR0bGVFbmRpYW4iLCJpbnRJbmRleCIsImJ5dGVzIiwiY29udmVyc2lvbiIsIklOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSIsIk5hTiIsImoiLCJ0ZXN0VmlldyIsIiRzZXRJbnQ4Iiwic2V0SW50OCIsImdldEludDgiLCJzZXRVaW50OCIsImJ1ZmZlckxlbmd0aCIsImdldFVpbnQ4IiwiZ2V0SW50MTYiLCJnZXRVaW50MTYiLCJnZXRJbnQzMiIsImdldFVpbnQzMiIsImdldEZsb2F0MzIiLCJnZXRGbG9hdDY0Iiwic2V0SW50MTYiLCJzZXRVaW50MTYiLCJzZXRJbnQzMiIsInNldFVpbnQzMiIsInNldEZsb2F0MzIiLCJzZXRGbG9hdDY0Iiwic3RyIiwiSW5maW5pdHkiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiaXRlcmF0ZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsIk5hdGl2ZUNvbnN0cnVjdG9yIiwiTmF0aXZlUHJvdG90eXBlIiwiZml4TWV0aG9kIiwidW5jdXJyaWVkTmF0aXZlTWV0aG9kIiwiZW50cmllcyIsImdldENvbnN0cnVjdG9yIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsInNldFN0cm9uZyIsIkFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSIsIiRpc0V4dGVuc2libGUiLCJGQUlMU19PTl9QUklNSVRJVkVTIiwiJGV4cG0xIiwiZXhwbTEiLCJleHAiLCJ4IiwidmFsdWVPZiIsIldFQktJVCIsIl9fZGVmaW5lU2V0dGVyX18iLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCIkUmVnRXhwIiwiVU5TVVBQT1JURURfWSIsInJlIiwibGFzdEluZGV4IiwiTUlTU0VEX1NUSUNLWSIsIkJST0tFTl9DQVJFVCIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsInBhdGNoZWRFeGVjIiwiY2hhckF0IiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsImdyb3VwIiwicmF3IiwiZ3JvdXBzIiwiZmxhZ3MiLCJjaGFyc0FkZGVkIiwic3RyQ29weSIsImlucHV0IiwiY2hhckNvZGVBdCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwiZmlyc3QiLCJzZWNvbmQiLCJwb3NpdGlvbiIsInNpemUiLCJjb2RlQXQiLCJSZWdFeHBQcm90b3R5cGUiLCJGT1JDRUQiLCJTSEFNIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsInVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZCIsIm1ldGhvZHMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCIkZXhlYyIsInNwZWNpZXNDb25zdHJ1Y3RvciIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJUT19QUklNSVRJVkUiLCJwcmVmIiwiZXhvdGljVG9QcmltIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9sIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiZW5kUG9zIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkl0ZXJhdG9yc0NvcmUiLCJJdGVyYXRvclByb3RvdHlwZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJyZXR1cm5UaGlzIiwiSXRlcmFibGUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJFTlVNRVJBQkxFX05FWFQiLCJtZXJnZVNvcnQiLCJjb21wYXJlZm4iLCJtaWRkbGUiLCJpbnNlcnRpb25Tb3J0IiwibWVyZ2UiLCJlbGVtZW50IiwibGxlbmd0aCIsInJsZW5ndGgiLCJsaW5kZXgiLCJyaW5kZXgiLCJ3ZWJraXQiLCJpc0NvbnN0cnVjdG9yIiwiJHJlcGVhdCIsInJlcGVhdCIsIklTX0VORCIsIm1heExlbmd0aCIsImZpbGxTdHJpbmciLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaW50TWF4TGVuZ3RoIiwic3RyaW5nTGVuZ3RoIiwiZmlsbFN0ciIsInNpZ24iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJpc0Zpbml0ZSIsImxvY2F0aW9uIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwiSVNfSU9TIiwiSVNfTk9ERSIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiRGlzcGF0Y2giLCJNZXNzYWdlQ2hhbm5lbCIsImNvdW50ZXIiLCJxdWV1ZSIsInJ1biIsInJ1bm5lciIsImxpc3RlbmVyIiwiZXZlbnQiLCJwb3N0IiwicG9zdE1lc3NhZ2UiLCJwcm90b2NvbCIsImhvc3QiLCJoYW5kbGVyIiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiZXJyb3IxIiwidmFsIiwiYSIsIm5hbWVzIiwibm9ybWFsaXplU3RyaW5nQXJndW1lbnQiLCJpbnN0YWxsRXJyb3JDYXVzZSIsImNsZWFyRXJyb3JTdGFjayIsIkVSUk9SX1NUQUNLX0lOU1RBTExBQkxFIiwiRlVMTF9OQU1FIiwiSVNfQUdHUkVHQVRFX0VSUk9SIiwiT1BUSU9OU19QT1NJVElPTiIsIkVSUk9SX05BTUUiLCJPcmlnaW5hbEVycm9yIiwiT3JpZ2luYWxFcnJvclByb3RvdHlwZSIsImNhdXNlIiwiQmFzZUVycm9yIiwiV3JhcHBlZEVycm9yIiwiYiIsIm1lc3NhZ2UiLCJuYXRpdmVFcnJvclRvU3RyaW5nIiwiaW5uZXJSZXN1bHQiLCJpbm5lckVycm9yIiwiY29weVdpdGhpbiIsImxlbiIsInRvIiwiaW5jIiwiZmxhdHRlbkludG9BcnJheSIsIm9yaWdpbmFsIiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudExlbiIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJtYXBGbiIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiYXJyYXlMaWtlIiwiSVNfQ09OU1RSVUNUT1IiLCJtYXBmbiIsIm1hcHBpbmciLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiJGxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwic2VhcmNoRWxlbWVudCIsImZpcmVmb3giLCJVQSIsImZhY3RvcmllcyIsImFyZ3NMZW5ndGgiLCJwYXJ0QXJncyIsImludGVybmFsU3RhdGVHZXR0ZXJGb3IiLCJsYXN0IiwiZGVmaW5lIiwicHJldmlvdXMiLCJlbnRyeSIsImdldEVudHJ5IiwicmVtb3ZlZCIsInByZXYiLCJhZGQiLCJJVEVSQVRPUl9OQU1FIiwiZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUiLCJnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUiLCJsb2ciLCJsb2cxcCIsIkxPRzEwRSIsImxvZzEwIiwibiRQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsInRyaW1tZWRTdHJpbmciLCIkcGFyc2VJbnQiLCJwYXJzZUludCIsImhleCIsInJhZGl4IiwiJGFzc2lnbiIsImFzc2lnbiIsIkEiLCJCIiwiY2hyIiwiVCIsIlRPX0VOVFJJRVMiLCJpcyIsInkiLCJQcm9taXNlIiwiZmx1c2giLCJoZWFkIiwibm90aWZ5IiwidG9nZ2xlIiwibm9kZSIsInRoZW4iLCJtYWNyb3Rhc2siLCJJU19JT1NfUEVCQkxFIiwiSVNfV0VCT1NfV0VCS0lUIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsInBhcmVudCIsImV4aXQiLCJlbnRlciIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInBvaW50IiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJjYXB0dXJlcyIsIm5hbWVkQ2FwdHVyZXMiLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoIiwiY2FwdHVyZSIsInRvUG9zaXRpdmVJbnRlZ2VyIiwiQXJyYXlJdGVyYXRpb25Nb2R1bGUiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsIml0b2MiLCJjdG9pIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjbGFzc0xpc3QiLCJET01Ub2tlbkxpc3RQcm90b3R5cGUiLCJJbmRleFNpemVFcnJvciIsIkRPTVN0cmluZ1NpemVFcnJvciIsIkhpZXJhcmNoeVJlcXVlc3RFcnJvciIsIldyb25nRG9jdW1lbnRFcnJvciIsIkludmFsaWRDaGFyYWN0ZXJFcnJvciIsIk5vRGF0YUFsbG93ZWRFcnJvciIsIk5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yIiwiTm90Rm91bmRFcnJvciIsIk5vdFN1cHBvcnRlZEVycm9yIiwiSW5Vc2VBdHRyaWJ1dGVFcnJvciIsIkludmFsaWRTdGF0ZUVycm9yIiwiU3ludGF4RXJyb3IiLCJJbnZhbGlkTW9kaWZpY2F0aW9uRXJyb3IiLCJOYW1lc3BhY2VFcnJvciIsIkludmFsaWRBY2Nlc3NFcnJvciIsIlZhbGlkYXRpb25FcnJvciIsIlR5cGVNaXNtYXRjaEVycm9yIiwiU2VjdXJpdHlFcnJvciIsIk5ldHdvcmtFcnJvciIsIkFib3J0RXJyb3IiLCJVUkxNaXNtYXRjaEVycm9yIiwiUXVvdGFFeGNlZWRlZEVycm9yIiwiVGltZW91dEVycm9yIiwiSW52YWxpZE5vZGVUeXBlRXJyb3IiLCJEYXRhQ2xvbmVFcnJvciIsInVybCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsInBhdGhuYW1lIiwidG9KU09OIiwic29ydCIsImhyZWYiLCJVUkxTZWFyY2hQYXJhbXMiLCJ1c2VybmFtZSIsImhhc2giLCJVU0VfTkFUSVZFX1VSTCIsIiR0b1N0cmluZyIsImFycmF5U29ydCIsImdldEludGVybmFsUGFyYW1zU3RhdGUiLCJVUkxfU0VBUkNIX1BBUkFNUyIsIm4kRmV0Y2giLCJOJFJlcXVlc3QiLCJIZWFkZXJzIiwiUmVxdWVzdFByb3RvdHlwZSIsIkhlYWRlcnNQcm90b3R5cGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzaGlmdCIsInBsdXMiLCJzZXF1ZW5jZXMiLCJwZXJjZW50U2VxdWVuY2UiLCJwZXJjZW50RGVjb2RlIiwic2VxdWVuY2UiLCJkZXNlcmlhbGl6ZSIsInJlcGxhY2VtZW50cyIsInJlcGxhY2VyIiwic2VyaWFsaXplIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXNTdGF0ZSIsImluaXQiLCJwYXJzZU9iamVjdCIsInBhcnNlUXVlcnkiLCJiaW5kVVJMIiwidXBkYXRlIiwiZW50cnlJdGVyYXRvciIsImVudHJ5TmV4dCIsInF1ZXJ5IiwiYXR0cmlidXRlcyIsInVwZGF0ZVVSTCIsIlVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yIiwiVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlIiwiYXBwZW5kIiwiZ2V0QWxsIiwiZm91bmQiLCJjYWxsYmFjayIsImhlYWRlcnNIYXMiLCJoZWFkZXJzU2V0Iiwid3JhcFJlcXVlc3RPcHRpb25zIiwiaGVhZGVycyIsImJvZHkiLCJmZXRjaCIsIlJlcXVlc3RDb25zdHJ1Y3RvciIsIlJlcXVlc3QiLCJnZXRTdGF0ZSIsInJ1bnRpbWUiLCJPcCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJjb250ZXh0IiwiQ29udGV4dCIsIl9pbnZva2UiLCJhcmciLCJkb25lUmVzdWx0IiwiZGVsZWdhdGUiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJDb250aW51ZVNlbnRpbmVsIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJyZWNvcmQiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJhc3luYyIsIml0ZXIiLCJwb3AiLCJza2lwVGVtcFJlc2V0Iiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsIkhJRERFTiIsIlN5bWJvbFByb3RvdHlwZSIsIlFPYmplY3QiLCIkc3RyaW5naWZ5IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlVTRV9TRVRURVIiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjcmlwdG9yIiwiT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PQkpFQ1RfUFJPVE9UWVBFIiwia2V5Rm9yIiwic3ltIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwic3RyaW5naWZ5Iiwic3BhY2UiLCIkcmVwbGFjZXIiLCJoaW50IiwiZyIsImUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwic3ltYm9sVG9TdHJpbmciLCJzeW1ib2xWYWx1ZU9mIiwiZGVzYyIsIndyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlIiwiV2ViQXNzZW1ibHkiLCJleHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlciIsImV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIiLCJXRUJfQVNTRU1CTFkiLCJlcnJvclRvU3RyaW5nIiwiRXJyb3JQcm90b3R5cGUiLCIkQWdncmVnYXRlRXJyb3IiLCJlcnJvcnMiLCJpc0luc3RhbmNlIiwiQWdncmVnYXRlRXJyb3JQcm90b3R5cGUiLCJlcnJvcnNBcnJheSIsIkFnZ3JlZ2F0ZUVycm9yIiwiYXQiLCJyZWxhdGl2ZUluZGV4IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsIlNQRUNJRVNfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJFIiwiJGV2ZXJ5IiwiJGZpbHRlciIsIiRmaW5kIiwiU0tJUFNfSE9MRVMiLCIkZmluZEluZGV4IiwiZmxhdCIsImRlcHRoQXJnIiwiZmxhdE1hcCIsIkVOVFJJRVMiLCIkaW5jbHVkZXMiLCIkSW5kZXhPZiIsInVuJEluZGV4T2YiLCJ1biRKb2luIiwiRVMzX1NUUklOR1MiLCJzZXBhcmF0b3IiLCIkbWFwIiwib2YiLCIkcmVkdWNlIiwiQ0hST01FX1ZFUlNJT04iLCJyZWR1Y2UiLCIkcmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsInVuJFJldmVyc2UiLCJ1biRTbGljZSIsIkhBU19TUEVDSUVTX1NVUFBPUlQiLCIkc29tZSIsImludGVybmFsU29ydCIsIkZGIiwiSUVfT1JfRURHRSIsIlY4IiwidW4kU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJTVEFCTEVfU09SVCIsImNvZGUiLCJmcm9tQ2hhckNvZGUiLCJ2IiwiaXRlbXNMZW5ndGgiLCJpdGVtcyIsImFycmF5TGVuZ3RoIiwiZ2V0U29ydENvbXBhcmUiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJhY3R1YWxTdGFydCIsImFycmF5QnVmZmVyTW9kdWxlIiwiYWJzIiwicG93IiwiTE4yIiwibWFudGlzc2FMZW5ndGgiLCJleHBvbmVudCIsIm1hbnRpc3NhIiwiZXhwb25lbnRMZW5ndGgiLCJlTWF4IiwiZUJpYXMiLCJydCIsIm5CaXRzIiwidW4kQXJyYXlCdWZmZXJTbGljZSIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiRGF0ZSIsImdldFllYXIiLCJnZXRGdWxsWWVhciIsImdldFRpbWUiLCJEYXRlUHJvdG90eXBlIiwic2V0RnVsbFllYXIiLCJzZXRZZWFyIiwieWVhciIsInlpIiwidG9HTVRTdHJpbmciLCJ0b1VUQ1N0cmluZyIsInRvSVNPU3RyaW5nIiwicGFkU3RhcnQiLCJuJERhdGVUb0lTT1N0cmluZyIsImdldFVUQ0RhdGUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbGxpc2Vjb25kcyIsInB2IiwiZGF0ZVRvUHJpbWl0aXZlIiwidW4kRGF0ZVRvU3RyaW5nIiwibnVtYmVyVG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImVzY2FwZSIsIkhBU19JTlNUQU5DRSIsIkZVTkNUSU9OX05BTUVfRVhJU1RTIiwibmFtZVJFIiwicmVnRXhwRXhlYyIsInRlc3RlciIsImxvdyIsImhpIiwiZml4IiwiSlNPTiIsImNvbGxlY3Rpb24iLCIkYWNvc2giLCJhY29zaCIsInNxcnQiLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsIkxPRzJFIiwiY2x6MzIiLCIkY29zaCIsImNvc2giLCJmcm91bmQiLCJFUFNJTE9OIiwiRVBTSUxPTjMyIiwiTUFYMzIiLCJNSU4zMiIsIiRhYnMiLCIkc2lnbiIsIiRoeXBvdCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwiYUxlbiIsImxhcmciLCIkaW11bCIsImltdWwiLCJ4biIsInluIiwieGwiLCJ5bCIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwidGhpc051bWJlclZhbHVlIiwiTmF0aXZlTnVtYmVyIiwiTnVtYmVyUHJvdG90eXBlIiwidG9OdW1lcmljIiwicHJpbVZhbHVlIiwidG9OdW1iZXIiLCJ0aGlyZCIsIm1heENvZGUiLCJkaWdpdHMiLCJOdW1iZXJXcmFwcGVyIiwiZ2xvYmFsSXNGaW5pdGUiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJ1biRUb0V4cG9uZW50aWFsIiwidG9FeHBvbmVudGlhbCIsIlJPVU5EU19QUk9QRVJMWSIsIlRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiIsIlBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0siLCJmcmFjdGlvbkRpZ2l0cyIsInciLCJ1biRUb0ZpeGVkIiwidG9GaXhlZCIsImFjYyIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJkYXRhVG9TdHJpbmciLCJ6IiwiZnJhY3REaWdpdHMiLCJ4MiIsInVuJFRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfX2RlZmluZUdldHRlcl9fIiwiJGVudHJpZXMiLCIkZnJlZXplIiwiZnJlZXplIiwiZnJvbUVudHJpZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCIkaXNGcm96ZW4iLCJpc0Zyb3plbiIsIiRpc1NlYWxlZCIsImlzU2VhbGVkIiwibmF0aXZlS2V5cyIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJHNlYWwiLCJzZWFsIiwiJHZhbHVlcyIsIiRwYXJzZUZsb2F0IiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIlByb21pc2VXcmFwcGVyIiwibmF0aXZlVGhlbiIsIk5hdGl2ZVByb21pc2UiLCJtaWNyb3Rhc2siLCJwcm9taXNlUmVzb2x2ZSIsImhvc3RSZXBvcnRFcnJvcnMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJRdWV1ZSIsIklTX0JST1dTRVIiLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJOYXRpdmVQcm9taXNlUHJvdG90eXBlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiUHJvbWlzZVByb3RvdHlwZSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTkFUSVZFX1JFSkVDVElPTl9FVkVOVCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsIlNVQkNMQVNTSU5HIiwiUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UiLCJHTE9CQUxfQ09SRV9KU19QUk9NSVNFIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiYWxsIiwiaXNUaGVuYWJsZSIsImNhbGxSZWFjdGlvbiIsInJlYWN0aW9uIiwiZXhpdGVkIiwib2siLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwicmVhY3Rpb25zIiwib25VbmhhbmRsZWQiLCJyZWFzb24iLCJpbml0RXZlbnQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJ1bndyYXAiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2FwYWJpbGl0eSIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiUGViYmxlIiwiY29uc29sZSIsInRhaWwiLCJpdGVtIiwiYWxsU2V0dGxlZCIsInN0YXR1cyIsImFueSIsImFscmVhZHlSZXNvbHZlZCIsImFscmVhZHlSZWplY3RlZCIsInJlYWwiLCJvbkZpbmFsbHkiLCJpc0Z1bmN0aW9uIiwiZnVuY3Rpb25BcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJuYXRpdmVDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJkZWxldGVQcm9wZXJ0eSIsImlzRGF0YURlc2NyaXB0b3IiLCJyZWNlaXZlciIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJldmVudEV4dGVuc2lvbnMiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjcmlwdG9yIiwib2JqZWN0U2V0UHJvdG90eXBlT2YiLCJyZWdFeHBGbGFncyIsIk5hdGl2ZVJlZ0V4cCIsImdldEZsYWdzIiwic3RyaW5nSW5kZXhPZiIsIklTX05DRyIsIkNPUlJFQ1RfTkVXIiwiQkFTRV9GT1JDRUQiLCJSZWdFeHBXcmFwcGVyIiwicGF0dGVybiIsInJhd0ZsYWdzIiwiaGFuZGxlZCIsInRoaXNJc1JlZ0V4cCIsInBhdHRlcm5Jc1JlZ0V4cCIsImZsYWdzQXJlVW5kZWZpbmVkIiwicmF3UGF0dGVybiIsIm5hbWVkIiwiYnJhY2tldHMiLCJuY2ciLCJncm91cGlkIiwiZ3JvdXBuYW1lIiwiaGFuZGxlTkNHIiwiaGFuZGxlRG90QWxsIiwicHJveHkiLCJvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSIsInVuJFRlc3QiLCJuJFRvU3RyaW5nIiwiTk9UX0dFTkVSSUMiLCJJTkNPUlJFQ1RfTkFNRSIsInJmIiwiY29kZVBvaW50QXQiLCJub3RBUmVnRXhwIiwiY29ycmVjdElzUmVnRXhwTG9naWMiLCJ1biRFbmRzV2l0aCIsImVuZHNXaXRoIiwiQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMiLCJzZWFyY2hTdHJpbmciLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsImVsZW1lbnRzIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJuYXRpdmVNYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsIm1hdGNoZXIiLCJyeCIsInJlcyIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJNQVRDSF9BTEwiLCJSRUdFWFBfU1RSSU5HIiwidW4kTWF0Y2hBbGwiLCJtYXRjaEFsbCIsIldPUktTX1dJVEhfTk9OX0dMT0JBTF9SRUdFWCIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIiRnbG9iYWwiLCIkbWF0Y2hBbGwiLCJmbGFnc1ZhbHVlIiwiJHBhZEVuZCIsInBhZEVuZCIsIiRwYWRTdGFydCIsInRlbXBsYXRlIiwicmF3VGVtcGxhdGUiLCJsaXRlcmFsU2VnbWVudHMiLCJnZXRTdWJzdGl0dXRpb24iLCJSRVBMQUNFIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiXyIsIlVOU0FGRV9TVUJTVElUVVRFIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VBbGwiLCJJU19SRUdfRVhQIiwic2VhcmNoTGVuZ3RoIiwiYWR2YW5jZUJ5IiwiZW5kT2ZMYXN0TWF0Y2giLCJzYW1lVmFsdWUiLCJTRUFSQ0giLCJuYXRpdmVTZWFyY2giLCJzZWFyY2hlciIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkcHVzaCIsIlNQTElUIiwibmF0aXZlU3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsaW0iLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNlcGFyYXRvckNvcHkiLCJzcGxpdHRlciIsInVuaWNvZGVNYXRjaGluZyIsInEiLCJvcmlnaW5hbEV4ZWMiLCJ1biRTdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsInN1YnN0ciIsImludExlbmd0aCIsImludEVuZCIsImludFN0YXJ0IiwiJHRyaW0iLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwiJHRyaW1FbmQiLCJ0cmltRW5kIiwidHJpbVJpZ2h0IiwiJHRyaW1TdGFydCIsInRyaW1TdGFydCIsInRyaW1MZWZ0IiwiY3JlYXRlSFRNTCIsImZvcmNlZFN0cmluZ0hUTUxNZXRob2QiLCJhbmNob3IiLCJiaWciLCJibGluayIsImJvbGQiLCJmaXhlZCIsImZvbnRjb2xvciIsImNvbG9yIiwiZm9udHNpemUiLCJpdGFsaWNzIiwibGluayIsInNtYWxsIiwic3RyaWtlIiwic3ViIiwic3VwIiwiY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwidSRBcnJheUNvcHlXaXRoaW4iLCIkZmlsbCIsImZyb21TcGVjaWVzQW5kTGlzdCIsImFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCIsInR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJwcmVkaWNhdGUiLCIkaW5kZXhPZiIsIkFycmF5SXRlcmF0b3JzIiwiYXJyYXlWYWx1ZXMiLCJhcnJheUtleXMiLCJhcnJheUVudHJpZXMiLCJHRU5FUklDIiwiSVRFUkFUT1JfSVNfVkFMVUVTIiwidHlwZWRBcnJheVZhbHVlcyIsIiRqb2luIiwiJHNldCIsIldPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyIsIjAiLCJUT19PQkpFQ1RfQlVHIiwiQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMiLCJtb2QiLCJleHBlY3RlZCIsImJlZ2luIiwiYmVnaW5JbmRleCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHRvTG9jYWxlU3RyaW5nIiwidG9Mb2NhbGVTdHJpbmciLCJUT19MT0NBTEVfU1RSSU5HX0JVRyIsIlVpbnQ4QXJyYXlQcm90b3R5cGUiLCJhcnJheVRvU3RyaW5nIiwiSVNfTk9UX0FSUkFZX01FVEhPRCIsImhleDIiLCJoZXg0IiwidW5lc2NhcGUiLCJwYXJ0IiwiSW50ZXJuYWxXZWFrTWFwIiwiY29sbGVjdGlvbldlYWsiLCJJU19JRTExIiwiJFdlYWtNYXAiLCJXZWFrTWFwUHJvdG90eXBlIiwibmF0aXZlRGVsZXRlIiwibmF0aXZlSGFzIiwibmF0aXZlR2V0IiwibmF0aXZlU2V0IiwiZGlzYWxsb3dlZCIsImZpbmFsRXEiLCIkYXRvYiIsIk5PX1NQQUNFU19JR05PUkUiLCJhdG9iIiwiTk9fQVJHX1JFQ0VJVklOR19DSEVDSyIsImJzIiwiYmMiLCIkYnRvYSIsImJ0b2EiLCJibG9jayIsImNoYXJDb2RlIiwiRE9NSXRlcmFibGVzIiwiaGFuZGxlUHJvdG90eXBlIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkNPTExFQ1RJT05fTkFNRSIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJ0cnlOb2RlUmVxdWlyZSIsIkRPTUV4Y2VwdGlvbkNvbnN0YW50cyIsIk5hdGl2ZURPTUV4Y2VwdGlvbiIsIk5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZSIsIkhBU19TVEFDSyIsImNvZGVGb3IiLCIkRE9NRXhjZXB0aW9uIiwiRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiY3JlYXRlR2V0dGVyRGVzY3JpcHRvciIsIklOQ09SUkVDVF9DT05TVFJVQ1RPUiIsIklOQ09SUkVDVF9DT0RFIiwiTUlTU0VEX0NPTlNUQU5UUyIsIkZPUkNFRF9DT05TVFJVQ1RPUiIsIkRPTUV4Y2VwdGlvbiIsIlBvbHlmaWxsZWRET01FeGNlcHRpb24iLCJQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlIiwiY29uc3RhbnQiLCJjb25zdGFudE5hbWUiLCJFUlJPUl9IQVNfU1RBQ0siLCJET01fRVhDRVBUSU9OX0hBU19TVEFDSyIsInN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uIiwiZ2V0QnVpbHRpbiIsIkV2YWxFcnJvciIsIlJlZmVyZW5jZUVycm9yIiwiVVJJRXJyb3IiLCJQZXJmb3JtYW5jZU1hcmsiLCJDb21waWxlRXJyb3IiLCJMaW5rRXJyb3IiLCJSdW50aW1lRXJyb3IiLCJTZXQiLCJNYXAiLCJNYXBQcm90b3R5cGUiLCJtYXBIYXMiLCJtYXBHZXQiLCJtYXBTZXQiLCJzZXRBZGQiLCJib29sZWFuVmFsdWVPZiIsIm51bWJlclZhbHVlT2YiLCJzdHJpbmdWYWx1ZU9mIiwiUEVSRk9STUFOQ0VfTUFSSyIsImNoZWNrQmFzaWNTZW1hbnRpYyIsInNldDEiLCJzZXQyIiwibmF0aXZlU3RydWN0dXJlZENsb25lIiwic3RydWN0dXJlZENsb25lIiwiRk9SQ0VEX1JFUExBQ0VNRU5UIiwic3RydWN0dXJlZENsb25lRnJvbU1hcmsiLCJkZXRhaWwiLCJuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lIiwidGhyb3dVbmNsb25lYWJsZSIsInRocm93VW5wb2x5ZmlsbGFibGUiLCJzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCIsImNsb25lZCIsImRhdGFUcmFuc2ZlciIsImRlZXAiLCJET01RdWFkIiwicDIiLCJwMyIsInA0IiwiRGF0YVRyYW5zZmVyIiwiZmlsZXMiLCJJbWFnZURhdGEiLCJ3aWR0aCIsImhlaWdodCIsImNvbG9yU3BhY2UiLCJmcm9tUG9pbnQiLCJmcm9tUmVjdCIsImZyb21NYXRyaXgiLCJjbG9uZSIsIkZpbGUiLCJQUk9QRVJfVFJBTlNGRVIiLCJ0cmFuc2ZlciIsInRyeVRvVHJhbnNmZXIiLCJyYXdUcmFuc2ZlciIsInRyYW5zZmVycmVkQXJyYXkiLCJ0cmFuc2ZlcnJlZCIsImNhbnZhcyIsIk9mZnNjcmVlbkNhbnZhcyIsImdldENvbnRleHQiLCJ0cmFuc2ZlckZyb21JbWFnZUJpdG1hcCIsInRyYW5zZmVyVG9JbWFnZUJpdG1hcCIsIk1TSUUiLCJzY2hlZHVsZXIiLCJ0aW1lb3V0IiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCJFT0YiLCJhcnJheUZyb20iLCJ0b0FTQ0lJIiwiVVJMU2VhcmNoUGFyYW1zTW9kdWxlIiwiZ2V0SW50ZXJuYWxVUkxTdGF0ZSIsImdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUiLCJOYXRpdmVVUkwiLCJ1bnNoaWZ0IiwiQUxQSEEiLCJBTFBIQU5VTUVSSUMiLCJESUdJVCIsIkhFWF9TVEFSVCIsIk9DVCIsIkRFQyIsIkhFWCIsIkZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UIiwiTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSIsIlRBQl9BTkRfTkVXX0xJTkUiLCJzZXJpYWxpemVIb3N0IiwiY29tcHJlc3MiLCJpZ25vcmUwIiwiaXB2NiIsIm1heEluZGV4IiwiY3VyclN0YXJ0IiwiY3Vyckxlbmd0aCIsImZpbmRMb25nZXN0WmVyb1NlcXVlbmNlIiwiQzBDb250cm9sUGVyY2VudEVuY29kZVNldCIsImZyYWdtZW50UGVyY2VudEVuY29kZVNldCIsInBhdGhQZXJjZW50RW5jb2RlU2V0IiwidXNlcmluZm9QZXJjZW50RW5jb2RlU2V0IiwicGVyY2VudEVuY29kZSIsInNwZWNpYWxTY2hlbWVzIiwiZnRwIiwiZmlsZSIsImh0dHAiLCJodHRwcyIsIndzIiwid3NzIiwiaXNXaW5kb3dzRHJpdmVMZXR0ZXIiLCJub3JtYWxpemVkIiwic3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciIsImlzU2luZ2xlRG90Iiwic2VnbWVudCIsIlNDSEVNRV9TVEFSVCIsIlNDSEVNRSIsIk5PX1NDSEVNRSIsIlNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZIiwiUEFUSF9PUl9BVVRIT1JJVFkiLCJSRUxBVElWRSIsIlJFTEFUSVZFX1NMQVNIIiwiU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyIsIlNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTIiwiQVVUSE9SSVRZIiwiSE9TVCIsIkhPU1ROQU1FIiwiUE9SVCIsIkZJTEUiLCJGSUxFX1NMQVNIIiwiRklMRV9IT1NUIiwiUEFUSF9TVEFSVCIsIlBBVEgiLCJDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIIiwiUVVFUlkiLCJGUkFHTUVOVCIsIlVSTFN0YXRlIiwiaXNCYXNlIiwiYmFzZSIsImJhc2VTdGF0ZSIsImZhaWx1cmUiLCJ1cmxTdHJpbmciLCJwYXJzZSIsInN0YXRlT3ZlcnJpZGUiLCJjb2RlUG9pbnRzIiwiYnVmZmVyQ29kZVBvaW50cyIsInBvaW50ZXIiLCJzZWVuQXQiLCJzZWVuQnJhY2tldCIsInNlZW5QYXNzd29yZFRva2VuIiwic2NoZW1lIiwicGFzc3dvcmQiLCJmcmFnbWVudCIsImNhbm5vdEJlQUJhc2VVUkwiLCJpc1NwZWNpYWwiLCJpbmNsdWRlc0NyZWRlbnRpYWxzIiwiY29kZVBvaW50IiwiZW5jb2RlZENvZGVQb2ludHMiLCJwYXJzZUhvc3QiLCJzaG9ydGVuUGF0aCIsIm51bWJlcnNTZWVuIiwiaXB2NFBpZWNlIiwic3dhcHMiLCJzd2FwIiwiYWRkcmVzcyIsInBpZWNlSW5kZXgiLCJwYXJzZUlQdjYiLCJwYXJ0c0xlbmd0aCIsIm51bWJlcnMiLCJpcHY0IiwicGFydHMiLCJwYXJzZUlQdjQiLCJjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQiLCJwYXRoU2l6ZSIsInNldEhyZWYiLCJnZXRPcmlnaW4iLCJVUkxDb25zdHJ1Y3RvciIsIm9yaWdpbiIsImdldFByb3RvY29sIiwic2V0UHJvdG9jb2wiLCJnZXRVc2VybmFtZSIsInNldFVzZXJuYW1lIiwiZ2V0UGFzc3dvcmQiLCJzZXRQYXNzd29yZCIsImdldEhvc3QiLCJzZXRIb3N0IiwiZ2V0SG9zdG5hbWUiLCJzZXRIb3N0bmFtZSIsImhvc3RuYW1lIiwiZ2V0UG9ydCIsInNldFBvcnQiLCJnZXRQYXRobmFtZSIsInNldFBhdGhuYW1lIiwiZ2V0U2VhcmNoIiwic2V0U2VhcmNoIiwiZ2V0U2VhcmNoUGFyYW1zIiwiZ2V0SGFzaCIsInNldEhhc2giLCJVUkxQcm90b3R5cGUiLCJhY2Nlc3NvckRlc2NyaXB0b3IiLCJuYXRpdmVDcmVhdGVPYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJuYXRpdmVSZXZva2VPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiT1ZFUkZMT1dfRVJST1IiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiZW5jb2RlIiwiY3VycmVudFZhbHVlIiwiaW5wdXRMZW5ndGgiLCJleHRyYSIsInVjczJkZWNvZGUiLCJiaWFzIiwiYmFzaWNMZW5ndGgiLCJoYW5kbGVkQ1BDb3VudCIsImhhbmRsZWRDUENvdW50UGx1c09uZSIsInFNaW51c1QiLCJiYXNlTWludXNUIiwibGFiZWwiLCJlbmNvZGVkIiwibGFiZWxzIiwiYmxhbmtfb2JqZWN0IiwicnVuX2FsbCIsImZucyIsImlzX2Z1bmN0aW9uIiwidGhpbmciLCJzYWZlX25vdF9lcXVhbCIsImlzX2VtcHR5IiwiaXNfaHlkcmF0aW5nIiwiaW5zZXJ0IiwiaW5zZXJ0QmVmb3JlIiwiZGV0YWNoIiwicGFyZW50Tm9kZSIsInN2Z19lbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiYXR0ciIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldF9kYXRhIiwidGV4dCIsIndob2xlVGV4dCIsInNldF9zdHlsZSIsImltcG9ydGFudCIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJjdXJyZW50X2NvbXBvbmVudCIsInNldF9jdXJyZW50X2NvbXBvbmVudCIsImNvbXBvbmVudCIsImdldF9jdXJyZW50X2NvbXBvbmVudCIsIm9uTW91bnQiLCIkJCIsIm9uX21vdW50IiwiZGlydHlfY29tcG9uZW50cyIsImJpbmRpbmdfY2FsbGJhY2tzIiwicmVuZGVyX2NhbGxiYWNrcyIsImZsdXNoX2NhbGxiYWNrcyIsInJlc29sdmVkX3Byb21pc2UiLCJ1cGRhdGVfc2NoZWR1bGVkIiwic2NoZWR1bGVfdXBkYXRlIiwiYWRkX3JlbmRlcl9jYWxsYmFjayIsInNlZW5fY2FsbGJhY2tzIiwiZmx1c2hpZHgiLCJzYXZlZF9jb21wb25lbnQiLCJiZWZvcmVfdXBkYXRlIiwiZGlydHkiLCJjdHgiLCJhZnRlcl91cGRhdGUiLCJvdXRyb2luZyIsInRyYW5zaXRpb25faW4iLCJsb2NhbCIsImRlbGV0ZSIsIlN2ZWx0ZUVsZW1lbnQiLCJkZXN0cm95X2NvbXBvbmVudCIsImRldGFjaGluZyIsIm9uX2Rlc3Ryb3kiLCJjcmVhdGVfZnJhZ21lbnQiLCJub3RfZXF1YWwiLCJhcHBlbmRfc3R5bGVzIiwicGFyZW50X2NvbXBvbmVudCIsImJvdW5kIiwib25fZGlzY29ubmVjdCIsImNhbGxiYWNrcyIsInNraXBfYm91bmQiLCJyb290IiwicmVhZHkiLCJyZXQiLCJyZXN0IiwibWFrZV9kaXJ0eSIsImh5ZHJhdGUiLCJub2RlcyIsImNoaWxkTm9kZXMiLCJpbnRybyIsImN1c3RvbUVsZW1lbnQiLCJuZXdfb25fZGVzdHJveSIsIm1vdW50X2NvbXBvbmVudCIsIkhUTUxFbGVtZW50Iiwic3VwZXIiLCJhdHRhY2hTaGFkb3ciLCJzbG90dGVkIiwiX29sZFZhbHVlIiwibmV3VmFsdWUiLCIkZGVzdHJveSIsIiQkcHJvcHMiLCIkJHNldCIsIlN2ZWx0ZUNvbXBvbmVudCIsInJhbmdlIiwiZ2V0TW9kZWxTaGFwZSIsInRoZXRhIiwieGxpbSIsInlsaW0iLCJ4MSIsInkxIiwieTIiLCJiZWxvdyIsImFib3ZlIiwiYm91bmRhcnkiLCJybmciLCJyYW5kR2F1c3MiLCJ1IiwiY29zIiwiUEkiLCJyYW5kSW50IiwibWFrZV9jbGFzc2lmaWNhdGlvbiIsIm5fc2FtcGxlcyIsImZsaXBfeSIsImNsYXNzX3NlcCIsInNlZWQiLCJYIiwiczEiLCJzMiIsImNsdXN0ZXIiLCJ4TWluIiwicDJwIiwic3VicG9wcyIsInBhdXNlUGF0aCIsInN0ZXBGb3J3YXJkUGF0aCIsInN0ZXBCYWNrUGF0aCIsInN2ZyIsInNsaWRlciIsInBsYXlCdXR0b24iLCJzdGVwRm9yd2FyZEJ1dHRvbiIsInN0ZXBCYWNrQnV0dG9uIiwiaW5pdFNwSW5kZXgiLCJmSUQiLCJzcF9pbmRleCIsImhvdmVyX2luZGV4IiwicG9pc29uSW5kZXgiLCJwb2lzb25zIiwiblBvaXNvbnMiLCJhdHRhY2tzIiwiZnJhbWVyYXRlIiwiaXNQbGF5aW5nIiwid2FpdGluZyIsInJlbmRlciIsImRzZXQiLCJ4VmFsdWUiLCJ5VmFsdWUiLCJnZXRDbGFzcyIsIm1hcmdpbiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImV4dGVudFgiLCJkMyIsImV4dGVudCIsInhTY2FsZSIsInNjYWxlTGluZWFyIiwibmljZSIsImV4dGVudFkiLCJ5U2NhbGUiLCJzaGFkaW5nRyIsInNlbGVjdCIsImRzZXRHIiwicG9pc29uRyIsIm1vZGVsRyIsInhBeGlzIiwiYXhpc0JvdHRvbSIsInRpY2tTaXplIiwidGlja1BhZGRpbmciLCJ5QXhpcyIsImF4aXNMZWZ0IiwibGluZSIsIm1vZGVsX2MiLCJtb2RlbF90IiwiYmVsb3dBcmVhIiwiYWJvdmVBcmVhIiwiZHNldFNjYXR0ZXIiLCJzZWxlY3RBbGwiLCJwb2lzb25TY2F0dGVyIiwiZGVsYXVuYXkiLCJEZWxhdW5heSIsImNsdXN0ZXJfY2VudGVycyIsInVwZGF0ZUNsYXNzZXMiLCJwYXVzZSIsInBhdXNlZCIsImFuaW1TdGVwRnJhbWUiLCJzbGlkZXJIYW5kbGVyIiwidXBkYXRlTW9kZWxzIiwibW9kZWxTaGFwZSIsInRoZXRhX2MiLCJpbV9tb2RlbHMiLCJ0aGV0YV90IiwidXBkYXRlRGF0YSIsInN5bWJvbENyb3NzIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwicmVtb3ZlIiwiaXNVc2VyIiwib24iLCJkeCIsImR5IiwiaW52ZXJ0IiwiZG90IiwiU1ZNIiwibWF4SXRlcnMiLCJ0b2wiLCJvblVwZGF0ZSIsIk4iLCJuQ2hhbmdlZEFscGhhcyIsIkVfaSIsIkVfaiIsImFscGhhX2kiLCJhbHBoYV9qIiwiTCIsIkgiLCJldGEiLCJiXzEiLCJiXzIiLCJncmFkIiwiYWxwaGFTbGlkZXIiLCJiZXRhU2xpZGVyIiwic2VlZFNsaWRlciIsImFscGhhVGV4dCIsImJldGFUZXh0Iiwic2VlZFRleHQiLCJjb250cm9scyIsInN2bUNsZWFuIiwic3ZtIiwicHJldmlld1BvaXNvbiIsImV4dGVudFhQYWQiLCJleHRlbnRZUGFkIiwicHJldmlld1BvaXNvbkciLCJwcmV2aWV3UG9pc29uU2NhdHRlciIsInBhcmFtZXRlcnMiLCJyZXRyYWluTW9kZWxzIiwicmV0cmFpbkNsZWFuIiwiZml0R0QiLCJwb2lzb24iLCJmaWd1cmUiLCJnZXRFbGVtZW50QnlJZCIsInF1ZXJ5U2VsZWN0b3IiLCJQb2lzb25EZW1vIiwicmVzcCIsImpzb24iLCJkYXRhSnNvbiIsIkF0dGFja0FuaW1hdGlvbiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJ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QUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FDUixFQUFRLEtBQ1IsRUFBUSxLQUNSLEVBQVEsS0FFUjk3QixFQUFPRCxRQUFVLEVBQVEsTSw2QkNoUHpCLElBQUlnVCxFQUFJLEVBQVEs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QixTQUFTLFdBQy9Cc1AsTUFBTSxpRUFDSHJKLE1BQUssU0FBQ3N0QyxHQUFELE9BQVVBLEVBQUtDLFVBQ3BCdnRDLE1BQUssU0FBQ3d0QyxHQUNMLElBQU1sOUQsRUFBUzQ4RCxHQUFPRSxjQUFjLDhCQUN0QixJQUFJSyxHQUFnQixDQUNoQ245RCxPQUFRQSxFQUNSdVksTUFBTyxDQUNMM0YsS0FBTXNxRCxFQUNOL0csWUFBYSxFQUNiQyxJQUFLQSxjQVFmLElBQU13RyxHQUFTbHdELFNBQVNtd0QsZUFBZSx1Q0FFdkNELEdBQU9uekMsaUJBQWlCLFNBQVMsV0FDL0JzUCxNQUFNLGlFQUNIckosTUFBSyxTQUFDc3RDLEdBQUQsT0FBVUEsRUFBS0MsVUFDcEJ2dEMsTUFBSyxTQUFDd3RDLEdBQ0wsSUFBTWw5RCxFQUFTNDhELEdBQU9FLGNBQWMsOEJBQ3RCLElBQUlLLEdBQWdCLENBQ2hDbjlELE9BQVFBLEVBQ1J1WSxNQUFPLENBQ0wzRixLQUFNc3FELEVBQ04vRyxZQUFhLEVBQ2JDLElBQUtBIiwiZmlsZSI6ImluZGV4LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0NDkpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuICBvcHRpb25zLm5hbWUgICAgICAgIC0gdGhlIC5uYW1lIG9mIHRoZSBmdW5jdGlvbiBpZiBpdCBkb2VzIG5vdCBtYXRjaCB0aGUga2V5XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlXG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2tcbiAgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pKCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgTkFUSVZFX0JJTkQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUnKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGJpbmQgPSBGdW5jdGlvblByb3RvdHlwZS5iaW5kO1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xudmFyIHVuY3VycnlUaGlzID0gTkFUSVZFX0JJTkQgJiYgYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiAmJiB1bmN1cnJ5VGhpcyhmbik7XG59IDogZnVuY3Rpb24gKGZuKSB7XG4gIHJldHVybiBmbiAmJiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGwuYXBwbHkoZm4sIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIFN0cmluZyA9IGdsb2JhbC5TdHJpbmc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgc3ltYm9sRm9yID0gU3ltYm9sICYmIFN5bWJvbFsnZm9yJ107XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzT3duKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkgfHwgIShOQVRJVkVfU1lNQk9MIHx8IHR5cGVvZiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPT0gJ3N0cmluZycpKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gJ1N5bWJvbC4nICsgbmFtZTtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKSkge1xuICAgICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIH0gZWxzZSBpZiAoVVNFX1NZTUJPTF9BU19VSUQgJiYgc3ltYm9sRm9yKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBzeW1ib2xGb3IoZGVzY3JpcHRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIH1cbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoY2xhc3NvZihhcmd1bWVudCkgPT09ICdTeW1ib2wnKSB0aHJvdyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG4gIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsIi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgSW50OEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5ICYmIEludDhBcnJheS5wcm90b3R5cGU7XG52YXIgVWludDhDbGFtcGVkQXJyYXkgPSBnbG9iYWwuVWludDhDbGFtcGVkQXJyYXk7XG52YXIgVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OENsYW1wZWRBcnJheSAmJiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGU7XG52YXIgVHlwZWRBcnJheSA9IEludDhBcnJheSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXkpO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXlQcm90b3R5cGUgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5UHJvdG90eXBlKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IHVpZCgnVFlQRURfQVJSQVlfVEFHJyk7XG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSB1aWQoJ1RZUEVEX0FSUkFZX0NPTlNUUlVDVE9SJyk7XG4vLyBGaXhpbmcgbmF0aXZlIHR5cGVkIGFycmF5cyBpbiBPcGVyYSBQcmVzdG8gY3Jhc2hlcyB0aGUgYnJvd3Nlciwgc2VlICM1OTVcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gTkFUSVZFX0FSUkFZX0JVRkZFUiAmJiAhIXNldFByb3RvdHlwZU9mICYmIGNsYXNzb2YoZ2xvYmFsLm9wZXJhKSAhPT0gJ09wZXJhJztcbnZhciBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBOQU1FLCBDb25zdHJ1Y3RvciwgUHJvdG90eXBlO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEludDhBcnJheTogMSxcbiAgVWludDhBcnJheTogMSxcbiAgVWludDhDbGFtcGVkQXJyYXk6IDEsXG4gIEludDE2QXJyYXk6IDIsXG4gIFVpbnQxNkFycmF5OiAyLFxuICBJbnQzMkFycmF5OiA0LFxuICBVaW50MzJBcnJheTogNCxcbiAgRmxvYXQzMkFycmF5OiA0LFxuICBGbG9hdDY0QXJyYXk6IDhcbn07XG5cbnZhciBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QgPSB7XG4gIEJpZ0ludDY0QXJyYXk6IDgsXG4gIEJpZ1VpbnQ2NEFycmF5OiA4XG59O1xuXG52YXIgaXNWaWV3ID0gZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4ga2xhc3MgPT09ICdEYXRhVmlldydcbiAgICB8fCBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKVxuICAgIHx8IGhhc093bihCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTtcbn07XG5cbnZhciBpc1R5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKVxuICAgIHx8IGhhc093bihCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNUeXBlZEFycmF5KGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgYSB0eXBlZCBhcnJheScpO1xufTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoQykge1xuICBpZiAoaXNDYWxsYWJsZShDKSAmJiAoIXNldFByb3RvdHlwZU9mIHx8IGlzUHJvdG90eXBlT2YoVHlwZWRBcnJheSwgQykpKSByZXR1cm4gQztcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKEMpICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvcicpO1xufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkLCBvcHRpb25zKSB7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybjtcbiAgaWYgKGZvcmNlZCkgZm9yICh2YXIgQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlLCBLRVkpKSB0cnkge1xuICAgICAgZGVsZXRlIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGVbS0VZXTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gb2xkIFdlYktpdCBidWcgLSBzb21lIG1ldGhvZHMgYXJlIG5vbi1jb25maWd1cmFibGVcbiAgICAgIHRyeSB7XG4gICAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGVbS0VZXSA9IHByb3BlcnR5O1xuICAgICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFUeXBlZEFycmF5UHJvdG90eXBlW0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgcmVkZWZpbmUoVHlwZWRBcnJheVByb3RvdHlwZSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eVxuICAgICAgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVByb3RvdHlwZVtLRVldIHx8IHByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIHZhciBBUlJBWSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIGlmIChmb3JjZWQpIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSkpIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9XG4gICAgaWYgKCFUeXBlZEFycmF5W0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgICAvLyBWOCB+IENocm9tZSA0OS01MCBgJVR5cGVkQXJyYXklYCBtZXRob2RzIGFyZSBub24td3JpdGFibGUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZGVmaW5lKFR5cGVkQXJyYXksIEtFWSwgZm9yY2VkID8gcHJvcGVydHkgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIFR5cGVkQXJyYXlbS0VZXSB8fCBwcm9wZXJ0eSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfSBlbHNlIHJldHVybjtcbiAgfVxuICBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0FSUkFZXTtcbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmICghVHlwZWRBcnJheUNvbnN0cnVjdG9yW0tFWV0gfHwgZm9yY2VkKSkge1xuICAgICAgcmVkZWZpbmUoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVksIHByb3BlcnR5KTtcbiAgICB9XG4gIH1cbn07XG5cbmZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICBDb25zdHJ1Y3RvciA9IGdsb2JhbFtOQU1FXTtcbiAgUHJvdG90eXBlID0gQ29uc3RydWN0b3IgJiYgQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICBpZiAoUHJvdG90eXBlKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiwgQ29uc3RydWN0b3IpO1xuICBlbHNlIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBmYWxzZTtcbn1cblxuZm9yIChOQU1FIGluIEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICBDb25zdHJ1Y3RvciA9IGdsb2JhbFtOQU1FXTtcbiAgUHJvdG90eXBlID0gQ29uc3RydWN0b3IgJiYgQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICBpZiAoUHJvdG90eXBlKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiwgQ29uc3RydWN0b3IpO1xufVxuXG4vLyBXZWJLaXQgYnVnIC0gdHlwZWQgYXJyYXlzIGNvbnN0cnVjdG9ycyBwcm90b3R5cGUgaXMgT2JqZWN0LnByb3RvdHlwZVxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFpc0NhbGxhYmxlKFR5cGVkQXJyYXkpIHx8IFR5cGVkQXJyYXkgPT09IEZ1bmN0aW9uLnByb3RvdHlwZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93IC0tIHNhZmVcbiAgVHlwZWRBcnJheSA9IGZ1bmN0aW9uIFR5cGVkQXJyYXkoKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xuICB9O1xuICBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgaWYgKGdsb2JhbFtOQU1FXSkgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLCBUeXBlZEFycmF5KTtcbiAgfVxufVxuXG5pZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgIVR5cGVkQXJyYXlQcm90b3R5cGUgfHwgVHlwZWRBcnJheVByb3RvdHlwZSA9PT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5LnByb3RvdHlwZTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXS5wcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICB9XG59XG5cbi8vIFdlYktpdCBidWcgLSBvbmUgbW9yZSBvYmplY3QgaW4gVWludDhDbGFtcGVkQXJyYXkgcHJvdG90eXBlIGNoYWluXG5pZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBnZXRQcm90b3R5cGVPZihVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSkgIT09IFR5cGVkQXJyYXlQcm90b3R5cGUpIHtcbiAgc2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpO1xufVxuXG5pZiAoREVTQ1JJUFRPUlMgJiYgIWhhc093bihUeXBlZEFycmF5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICBUWVBFRF9BUlJBWV9UQUdfUkVRVUlSRUQgPSB0cnVlO1xuICBkZWZpbmVQcm9wZXJ0eShUeXBlZEFycmF5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc09iamVjdCh0aGlzKSA/IHRoaXNbVFlQRURfQVJSQVlfVEFHXSA6IHVuZGVmaW5lZDtcbiAgfSB9KTtcbiAgZm9yIChOQU1FIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSBpZiAoZ2xvYmFsW05BTUVdKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbFtOQU1FXSwgVFlQRURfQVJSQVlfVEFHLCBOQU1FKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUzogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyxcbiAgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1I6IFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SLFxuICBUWVBFRF9BUlJBWV9UQUc6IFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCAmJiBUWVBFRF9BUlJBWV9UQUcsXG4gIGFUeXBlZEFycmF5OiBhVHlwZWRBcnJheSxcbiAgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjogYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcixcbiAgZXhwb3J0VHlwZWRBcnJheU1ldGhvZDogZXhwb3J0VHlwZWRBcnJheU1ldGhvZCxcbiAgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDogZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCxcbiAgaXNWaWV3OiBpc1ZpZXcsXG4gIGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuICBUeXBlZEFycmF5OiBUeXBlZEFycmF5LFxuICBUeXBlZEFycmF5UHJvdG90eXBlOiBUeXBlZEFycmF5UHJvdG90eXBlXG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGNhbGwsIGFyZ3VtZW50cyk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB1bmN1cnJ5VGhpcyh7fS5oYXNPd25Qcm9wZXJ0eSk7XG5cbi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWhhc293bnByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5KHRvT2JqZWN0KGl0KSwga2V5KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1ZycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIEVOVU1FUkFCTEUgPSAnZW51bWVyYWJsZSc7XG52YXIgQ09ORklHVVJBQkxFID0gJ2NvbmZpZ3VyYWJsZSc7XG52YXIgV1JJVEFCTEUgPSAnd3JpdGFibGUnO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAodHlwZW9mIE8gPT09ICdmdW5jdGlvbicgJiYgUCA9PT0gJ3Byb3RvdHlwZScgJiYgJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzICYmIFdSSVRBQkxFIGluIEF0dHJpYnV0ZXMgJiYgIUF0dHJpYnV0ZXNbV1JJVEFCTEVdKSB7XG4gICAgdmFyIGN1cnJlbnQgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7XG4gICAgICBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sXG4gICAgICAgIGVudW1lcmFibGU6IEVOVU1FUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbRU5VTUVSQUJMRV0gOiBjdXJyZW50W0VOVU1FUkFCTEVdLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG59IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xuXG4vLyBgTGVuZ3RoT2ZBcnJheUxpa2VgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0b0xlbmd0aChvYmoubGVuZ3RoKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gaXNDYWxsYWJsZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSkgOiBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBuYW1lID0gb3B0aW9ucyAmJiBvcHRpb25zLm5hbWUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubmFtZSA6IGtleTtcbiAgdmFyIHN0YXRlO1xuICBpZiAoaXNDYWxsYWJsZSh2YWx1ZSkpIHtcbiAgICBpZiAoU3RyaW5nKG5hbWUpLnNsaWNlKDAsIDcpID09PSAnU3ltYm9sKCcpIHtcbiAgICAgIG5hbWUgPSAnWycgKyBTdHJpbmcobmFtZSkucmVwbGFjZSgvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgICB9XG4gICAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywgbmFtZSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnID8gbmFtZSA6ICcnKTtcbiAgICB9XG4gIH1cbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICAgIGVsc2Ugc2V0R2xvYmFsKGtleSwgdmFsdWUpO1xuICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICghdW5zYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgfSBlbHNlIGlmICghbm9UYXJnZXRHZXQgJiYgT1trZXldKSB7XG4gICAgc2ltcGxlID0gdHJ1ZTtcbiAgfVxuICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKHRoaXMpICYmIGdldEludGVybmFsU3RhdGUodGhpcykuc291cmNlIHx8IGluc3BlY3RTb3VyY2UodGhpcyk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQgPSAnT2JqZWN0IGFscmVhZHkgaW5pdGlhbGl6ZWQnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCB8fCBzaGFyZWQuc3RhdGUpIHtcbiAgdmFyIHN0b3JlID0gc2hhcmVkLnN0YXRlIHx8IChzaGFyZWQuc3RhdGUgPSBuZXcgV2Vha01hcCgpKTtcbiAgdmFyIHdtZ2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuZ2V0KTtcbiAgdmFyIHdtaGFzID0gdW5jdXJyeVRoaXMoc3RvcmUuaGFzKTtcbiAgdmFyIHdtc2V0ID0gdW5jdXJyeVRoaXMoc3RvcmUuc2V0KTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGlmICh3bWhhcyhzdG9yZSwgaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldChzdG9yZSwgaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gd21oYXMoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoaXQsIFNUQVRFLCBtZXRhZGF0YSk7XG4gICAgcmV0dXJuIG1ldGFkYXRhO1xuICB9O1xuICBnZXQgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSkgPyBpdFtTVEFURV0gOiB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGdldDogZ2V0LFxuICBoYXM6IGhhcyxcbiAgZW5mb3JjZTogZW5mb3JjZSxcbiAgZ2V0dGVyRm9yOiBnZXR0ZXJGb3Jcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIG51bWJlciA9ICthcmd1bWVudDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBzYWZlXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogKG51bWJlciA+IDAgPyBmbG9vciA6IGNlaWwpKG51bWJlcik7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXNPd24oTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIWNhbGwocHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZiwgTywgUCksIE9bUF0pO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FKSB7XG4gIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7XG4gIGlmICghaGFzT3duKFN5bWJvbCwgTkFNRSkpIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwge1xuICAgIHZhbHVlOiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYoTkFNRSlcbiAgfSk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoe30uaXNQcm90b3R5cGVPZik7XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgUmVmbGVjdCA9PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmFwcGx5IHx8IChOQVRJVkVfQklORCA/IGNhbGwuYmluZChhcHBseSkgOiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBjYWxsLmFwcGx5KGFwcGx5LCBhcmd1bWVudHMpO1xufSk7XG4iLCIvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAtLSBvbGQgSUUsIFdTSCAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSB0eXBlb2YgZG9jdW1lbnQgIT0gJ3VuZGVmaW5lZCdcbiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnRcbiAgICAgID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIC8vIG9sZCBJRVxuICAgICAgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKVxuICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0hcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHF1b3QgPSAvXCIvZztcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG5cbi8vIGBDcmVhdGVIVE1MYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaHRtbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIHJlcGxhY2UodG9TdHJpbmcodmFsdWUpLCBxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gY2hlY2sgdGhlIGV4aXN0ZW5jZSBvZiBhIG1ldGhvZCwgbG93ZXJjYXNlXG4vLyBvZiBhIHRhZyBhbmQgZXNjYXBpbmcgcXVvdGVzIGluIGFyZ3VtZW50c1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW01FVEhPRF9OQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBUQUcsIFNUQVRJQykge1xuICBpZiAodGFyZ2V0ICYmICFTVEFUSUMpIHRhcmdldCA9IHRhcmdldC5wcm90b3R5cGU7XG4gIGlmICh0YXJnZXQgJiYgIWhhc093bih0YXJnZXQsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzT3duKG9iamVjdCwgSUVfUFJPVE8pKSByZXR1cm4gb2JqZWN0W0lFX1BST1RPXTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBiaW5kID0gdW5jdXJyeVRoaXModW5jdXJyeVRoaXMuYmluZCk7XG5cbi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQpIHtcbiAgYUNhbGxhYmxlKGZuKTtcbiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG4gICAgc2V0dGVyID0gdW5jdXJyeVRoaXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0KTtcbiAgICBzZXR0ZXIodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkge1xuICBpZiAoaXNQcm90b3R5cGVPZihQcm90b3R5cGUsIGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBpbnZvY2F0aW9uJyk7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbi8vIGBHZXRNZXRob2RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRtZXRob2Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHtcbiAgdmFyIGZ1bmMgPSBWW1BdO1xuICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpO1xufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ25vcm1hbCcsIGNvbmRpdGlvbik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICghaXRlckZuKSB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoaXRlcmFibGUpICsgJyBpcyBub3QgaXRlcmFibGUnKTtcbiAgICAvLyBvcHRpbWlzYXRpb24gZm9yIGFycmF5IGl0ZXJhdG9yc1xuICAgIGlmIChpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlckZuKSkge1xuICAgICAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGl0ZXJhYmxlKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgaXNQcm90b3R5cGVPZihSZXN1bHRQcm90b3R5cGUsIHJlc3VsdCkpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihpdGVyYWJsZSwgaXRlckZuKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIGFyZ3VtZW50KSB7XG4gIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBpc0ludGVncmFsTnVtYmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXgnKTtcbnZhciB0b09mZnNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vZmZzZXQnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIHR5cGVkQXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20nKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGU7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xudmFyIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UWVBFRF9BUlJBWV9DT05TVFJVQ1RPUjtcbnZhciBUWVBFRF9BUlJBWV9UQUcgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX1RBRztcbnZhciBUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5UeXBlZEFycmF5O1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXlQcm90b3R5cGU7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBpc1R5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVHlwZWRBcnJheTtcbnZhciBCWVRFU19QRVJfRUxFTUVOVCA9ICdCWVRFU19QRVJfRUxFTUVOVCc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG5cbnZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gIGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9IH0pO1xufTtcblxudmFyIGlzQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGtsYXNzO1xuICByZXR1cm4gaXNQcm90b3R5cGVPZihBcnJheUJ1ZmZlclByb3RvdHlwZSwgaXQpIHx8IChrbGFzcyA9IGNsYXNzb2YoaXQpKSA9PSAnQXJyYXlCdWZmZXInIHx8IGtsYXNzID09ICdTaGFyZWRBcnJheUJ1ZmZlcic7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5SW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgcmV0dXJuIGlzVHlwZWRBcnJheSh0YXJnZXQpXG4gICAgJiYgIWlzU3ltYm9sKGtleSlcbiAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgJiYgaXNJbnRlZ3JhbE51bWJlcigra2V5KVxuICAgICYmIGtleSA+PSAwO1xufTtcblxudmFyIHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICByZXR1cm4gaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgPyBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMiwgdGFyZ2V0W2tleV0pXG4gICAgOiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xufTtcblxudmFyIHdyYXBwZWREZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gIGtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGlzVHlwZWRBcnJheUluZGV4KHRhcmdldCwga2V5KVxuICAgICYmIGlzT2JqZWN0KGRlc2NyaXB0b3IpXG4gICAgJiYgaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpXG4gICAgJiYgIWhhc093bihkZXNjcmlwdG9yLCAnZ2V0JylcbiAgICAmJiAhaGFzT3duKGRlc2NyaXB0b3IsICdzZXQnKVxuICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgJiYgIWRlc2NyaXB0b3IuY29uZmlndXJhYmxlXG4gICAgJiYgKCFoYXNPd24oZGVzY3JpcHRvciwgJ3dyaXRhYmxlJykgfHwgZGVzY3JpcHRvci53cml0YWJsZSlcbiAgICAmJiAoIWhhc093bihkZXNjcmlwdG9yLCAnZW51bWVyYWJsZScpIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSlcbiAgKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcbn07XG5cbmlmIChERVNDUklQVE9SUykge1xuICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9IHdyYXBwZWREZWZpbmVQcm9wZXJ0eTtcbiAgICBhZGRHZXR0ZXIoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZU9mZnNldCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnl0ZUxlbmd0aCcpO1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnbGVuZ3RoJyk7XG4gIH1cblxuICAkKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB9LCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiB3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGRlZmluZVByb3BlcnR5OiB3cmFwcGVkRGVmaW5lUHJvcGVydHlcbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIHZhciBCWVRFUyA9IFRZUEUubWF0Y2goL1xcZCskLylbMF0gLyA4O1xuICAgIHZhciBDT05TVFJVQ1RPUl9OQU1FID0gVFlQRSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5JztcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBUWVBFO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIFRZUEU7XG4gICAgdmFyIE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgICB2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgICB2YXIgZXhwb3J0ZWQgPSB7fTtcblxuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHJldHVybiBkYXRhLnZpZXdbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IHJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhGRiA/IDB4RkYgOiB2YWx1ZSAmIDB4RkY7XG4gICAgICBkYXRhLnZpZXdbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5ieXRlT2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsIG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHZhciBieXRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoO1xuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICAgICAgbGVuZ3RoID0gdG9JbmRleChkYXRhKTtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlCdWZmZXIoZGF0YSkpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIGJ5dGVPZmZzZXQgPSB0b09mZnNldChvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIGJ5dGVPZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LFxuICAgICAgICAgIGJ5dGVMZW5ndGg6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgdmlldzogbmV3IERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKFR5cGVkQXJyYXlQcm90b3R5cGUpO1xuICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAoZHVtbXksIGRhdGEsIHR5cGVkQXJyYXlPZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICAgICAgcmV0dXJuIGluaGVyaXRJZlJlcXVpcmVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgICBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogdHlwZWRBcnJheU9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhLCB0b09mZnNldCh0eXBlZEFycmF5T2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IE5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihkYXRhKTtcbiAgICAgICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgICByZXR1cm4gY2FsbCh0eXBlZEFycmF5RnJvbSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBkYXRhKTtcbiAgICAgICAgfSgpLCBkdW1teSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHNldFByb3RvdHlwZU9mKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgVHlwZWRBcnJheSk7XG4gICAgICBmb3JFYWNoKGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIGtleSwgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGU7XG4gICAgfVxuXG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZS5jb25zdHJ1Y3RvciAhPT0gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgIH1cblxuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsIFRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuXG4gICAgaWYgKFRZUEVEX0FSUkFZX1RBRykge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgVFlQRURfQVJSQVlfVEFHLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB9XG5cbiAgICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxuICAgICQoe1xuICAgICAgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAhPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IsIHNoYW06ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTXG4gICAgfSwgZXhwb3J0ZWQpO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuICAgIH1cblxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG5cbi8vIGBUb1Byb3BlcnR5S2V5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcm9wZXJ0eWtleVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnc3RyaW5nJyk7XG4gIHJldHVybiBpc1N5bWJvbChrZXkpID8ga2V5IDoga2V5ICsgJyc7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiBpc0NhbGxhYmxlKE8uY2FsbGVlKSA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzZWQsIHJlcXVpcmVkKSB7XG4gIGlmIChwYXNzZWQgPCByZXF1aXJlZCkgdGhyb3cgVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICByZXR1cm4gcGFzc2VkO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNhcnJheVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWlzYXJyYXkgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJndW1lbnQpID09ICdBcnJheSc7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNsYXNzb2YoZ2xvYmFsLnByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcblxudmFyIFJFUVVJUkVEID0gZmFsc2U7XG52YXIgTUVUQURBVEEgPSB1aWQoJ21ldGEnKTtcbnZhciBpZCA9IDA7XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgaWQrKywgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXNPd24oaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXNPd24oaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIFJFUVVJUkVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhc093bihpdCwgTUVUQURBVEEpKSBzZXRNZXRhZGF0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG5cbnZhciBlbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIG1ldGEuZW5hYmxlID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuICBSRVFVSVJFRCA9IHRydWU7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mO1xuICB2YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdGVzdFtNRVRBREFUQV0gPSAxO1xuXG4gIC8vIHByZXZlbnQgZXhwb3Npbmcgb2YgbWV0YWRhdGEga2V5XG4gIGlmIChnZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QpLmxlbmd0aCkge1xuICAgIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGZ1bmN0aW9uIChpdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocmVzdWx0W2ldID09PSBNRVRBREFUQSkge1xuICAgICAgICAgIHNwbGljZShyZXN1bHQsIGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgZ2V0T3duUHJvcGVydHlOYW1lczogZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsTW9kdWxlLmZcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5hYmxlOiBlbmFibGUsXG4gIGZhc3RLZXk6IGZhc3RLZXksXG4gIGdldFdlYWtEYXRhOiBnZXRXZWFrRGF0YSxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5oaWRkZW5LZXlzW01FVEFEQVRBXSA9IHRydWU7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3Ncbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC5kb3RBbGwpIHJlc3VsdCArPSAncyc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7XG4gIHJldHVybiBpc0NhbGxhYmxlKCRTeW1ib2wpICYmIGlzUHJvdG90eXBlT2YoJFN5bWJvbC5wcm90b3R5cGUsIE9iamVjdChpdCkpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcbnZhciB0b1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArIHRvU3RyaW5nKCsraWQgKyBwb3N0Zml4LCAzNik7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxudmFyIGdldERlc2NyaXB0b3IgPSBERVNDUklQVE9SUyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG52YXIgRVhJU1RTID0gaGFzT3duKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpO1xuLy8gYWRkaXRpb25hbCBwcm90ZWN0aW9uIGZyb20gbWluaWZpZWQgLyBtYW5nbGVkIC8gZHJvcHBlZCBmdW5jdGlvbiBuYW1lc1xudmFyIFBST1BFUiA9IEVYSVNUUyAmJiAoZnVuY3Rpb24gc29tZXRoaW5nKCkgeyAvKiBlbXB0eSAqLyB9KS5uYW1lID09PSAnc29tZXRoaW5nJztcbnZhciBDT05GSUdVUkFCTEUgPSBFWElTVFMgJiYgKCFERVNDUklQVE9SUyB8fCAoREVTQ1JJUFRPUlMgJiYgZ2V0RGVzY3JpcHRvcihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKS5jb25maWd1cmFibGUpKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEVYSVNUUzogRVhJU1RTLFxuICBQUk9QRVI6IFBST1BFUixcbiAgQ09ORklHVVJBQkxFOiBDT05GSUdVUkFCTEVcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIGVtcHR5ID0gW107XG52YXIgY29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi87XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMpO1xudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAuZXhlYyhub29wKTtcblxudmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdHJ1Y3Qobm9vcCwgZW1wdHksIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHN3aXRjaCAoY2xhc3NvZihhcmd1bWVudCkpIHtcbiAgICBjYXNlICdBc3luY0Z1bmN0aW9uJzpcbiAgICBjYXNlICdHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6IHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXRcbiAgICAvLyBgRnVuY3Rpb24jdG9TdHJpbmdgIHRocm93cyBvbiBzb21lIGJ1aWx0LWl0IGZ1bmN0aW9uIGluIHNvbWUgbGVnYWN5IGVuZ2luZXNcbiAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGVkO1xuICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfSlcbiAgICB8fCBjYWxsZWQ7XG59KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgaXNDYWxsYWJsZShOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgU3BlY2llc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgbHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRlc3QgPSAoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KS5iaW5kKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIE9iamVjdCA9IGdsb2JhbC5PYmplY3Q7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiBTdHJpbmcoYXJndW1lbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiAnT2JqZWN0JztcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiBpc0NhbGxhYmxlKGRldGVjdGlvbikgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIG1heCA9IE1hdGgubWF4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gIHZhciByZXN1bHQgPSBBcnJheShtYXgoZmluIC0gaywgMCkpO1xuICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7XG4gIHJlc3VsdC5sZW5ndGggPSBuO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBhcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChhcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5KSkobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgJGRlZmF1bHQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID09PSB1bmRlZmluZWQgPyBhcmd1bWVudHMubGVuZ3RoIDwgMiA/ICcnIDogJGRlZmF1bHQgOiB0b1N0cmluZyhhcmd1bWVudCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gZ2V0TWV0aG9kKGl0LCBJVEVSQVRPUilcbiAgICB8fCBnZXRNZXRob2QoaXQsICdAQGl0ZXJhdG9yJylcbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzdcbiAgcmV0dXJuIFY4X1ZFUlNJT04gPj0gNTEgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBhcnJheS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZm9vOiAxIH07XG4gICAgfTtcbiAgICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTtcbiAgfSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1wcmV2ZW50ZXh0ZW5zaW9ucyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG4vLyBgSXNSZWdFeHBgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc3JlZ2V4cFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY2xhc3NvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmIChpc0NhbGxhYmxlKGV4ZWMpKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNhbGwoZXhlYywgUiwgUyk7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgYW5PYmplY3QocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpID09PSAnUmVnRXhwJykgcmV0dXJuIGNhbGwocmVnZXhwRXhlYywgUiwgUyk7XG4gIHRocm93IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjEuMScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIyIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjEuMS9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvbi50b1N0cmluZyk7XG5cbi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICghaXNDYWxsYWJsZShzdG9yZS5pbnNwZWN0U291cmNlKSkge1xuICBzdG9yZS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlLCBleGNlcHRpb25zKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSAmJiAhKGV4Y2VwdGlvbnMgJiYgaGFzT3duKGV4Y2VwdGlvbnMsIGtleSkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xuXG52YXIgVEVTVCA9IChmdW5jdGlvbiAoYXJnKSB7IHJldHVybiBTdHJpbmcoRXJyb3IoYXJnKS5zdGFjayk7IH0pKCd6eGNhc2QnKTtcbnZhciBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlkgPSAvXFxuXFxzKmF0IFteOl0qOlteXFxuXSovO1xudmFyIElTX1Y4X09SX0NIQUtSQV9TVEFDSyA9IFY4X09SX0NIQUtSQV9TVEFDS19FTlRSWS50ZXN0KFRFU1QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdGFjaywgZHJvcEVudHJpZXMpIHtcbiAgaWYgKElTX1Y4X09SX0NIQUtSQV9TVEFDSyAmJiB0eXBlb2Ygc3RhY2sgPT0gJ3N0cmluZycpIHtcbiAgICB3aGlsZSAoZHJvcEVudHJpZXMtLSkgc3RhY2sgPSByZXBsYWNlKHN0YWNrLCBWOF9PUl9DSEFLUkFfU1RBQ0tfRU5UUlksICcnKTtcbiAgfSByZXR1cm4gc3RhY2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCwgdXNpbmdJdGVyYXRvcikge1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kKGFyZ3VtZW50KSA6IHVzaW5nSXRlcmF0b3I7XG4gIGlmIChhQ2FsbGFibGUoaXRlcmF0b3JNZXRob2QpKSByZXR1cm4gYW5PYmplY3QoY2FsbChpdGVyYXRvck1ldGhvZCwgYXJndW1lbnQpKTtcbiAgdGhyb3cgVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20sIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxudmFyIHZhbHVlcyA9IEl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG4vLyBWOCB+IENocm9tZSA0NS0gYnVnXG5pZiAoIUlTX1BVUkUgJiYgREVTQ1JJUFRPUlMgJiYgdmFsdWVzLm5hbWUgIT09ICd2YWx1ZXMnKSB0cnkge1xuICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZXMsICduYW1lJywgeyB2YWx1ZTogJ3ZhbHVlcycgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgcmVkdWNlLCByZWR1Y2VSaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX1JJR0hUKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYXJndW1lbnRzTGVuZ3RoLCBtZW1vKSB7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gICAgdmFyIHNlbGYgPSBJbmRleGVkT2JqZWN0KE8pO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgaW5kZXggPSBJU19SSUdIVCA/IGxlbmd0aCAtIDEgOiAwO1xuICAgIHZhciBpID0gSVNfUklHSFQgPyAtMSA6IDE7XG4gICAgaWYgKGFyZ3VtZW50c0xlbmd0aCA8IDIpIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGlmIChJU19SSUdIVCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICg7SVNfUklHSFQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICAgIH1cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuICBsZWZ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiAgcmlnaHQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1uYXRpdmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXIgJiYgJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZmlsbCA9IHVuY3VycnlUaGlzKGFycmF5RmlsbCk7XG52YXIgcmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBhcnJheVNsaWNlKGJ5dGVzLCBzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiByZXZlcnNlKHBhY2spO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGZpbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIERhdGFWaWV3UHJvdG90eXBlKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBEYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlld1tQUk9UT1RZUEVdO1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICB2YXIgSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgTmF0aXZlQXJyYXlCdWZmZXIubmFtZSAhPT0gQVJSQVlfQlVGRkVSO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgIUNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FO1xuICB9KSkge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBBcnJheUJ1ZmZlclByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gbmV3IE5hdGl2ZUFycmF5QnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XG4gICAgfTtcblxuICAgICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQXJyYXlCdWZmZXJQcm90b3R5cGU7XG5cbiAgICBmb3IgKHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVBcnJheUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KCRBcnJheUJ1ZmZlciwga2V5LCBOYXRpdmVBcnJheUJ1ZmZlcltrZXldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBBcnJheUJ1ZmZlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfSBlbHNlIGlmIChJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTmF0aXZlQXJyYXlCdWZmZXIsICduYW1lJywgQVJSQVlfQlVGRkVSKTtcbiAgfVxuXG4gIC8vIFdlYktpdCBidWcgLSB0aGUgc2FtZSBwYXJlbnQgcHJvdG90eXBlIGZvciB0eXBlZCBhcnJheXMgYW5kIGRhdGEgdmlld1xuICBpZiAoc2V0UHJvdG90eXBlT2YgJiYgZ2V0UHJvdG90eXBlT2YoRGF0YVZpZXdQcm90b3R5cGUpICE9PSBPYmplY3RQcm90b3R5cGUpIHtcbiAgICBzZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSwgT2JqZWN0UHJvdG90eXBlKTtcbiAgfVxuXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdGVzdFZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRJbnQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdGVzdFZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHRlc3RWaWV3LmdldEludDgoMCkgfHwgIXRlc3RWaWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDgodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cblxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcixcbiAgRGF0YVZpZXc6ICREYXRhVmlld1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlck9ySW5maW5pdHkoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbnVtYmVyIG9mIHJlcGV0aXRpb25zJyk7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIEludGVybmFsTWV0YWRhdGFNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMoTmF0aXZlUHJvdG90eXBlW0tFWV0pO1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb3RvdHlwZSwgS0VZLFxuICAgICAgS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSA6IEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gdW5kZWZpbmVkIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAhaXNDYWxsYWJsZShOYXRpdmVDb25zdHJ1Y3RvcikgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpO1xuICAgIH0pKVxuICApO1xuXG4gIGlmIChSRVBMQUNFKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLmVuYWJsZSgpO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9IGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHsgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGl0ZXJhYmxlKTsgfSk7XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcblxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgTmF0aXZlUHJvdG90eXBlKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlQ29uc3RydWN0b3IoKSwgZHVtbXksIENvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHsgdGhhdDogdGhhdCwgQVNfRU5UUklFUzogSVNfTUFQIH0pO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gTmF0aXZlUHJvdG90eXBlO1xuICAgICAgTmF0aXZlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgfVxuXG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuXG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG5cbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIE5hdGl2ZVByb3RvdHlwZS5jbGVhcikgZGVsZXRlIE5hdGl2ZVByb3RvdHlwZS5jbGVhcjtcbiAgfVxuXG4gIGV4cG9ydGVkW0NPTlNUUlVDVE9SX05BTUVdID0gQ29uc3RydWN0b3I7XG4gICQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogQ29uc3RydWN0b3IgIT0gTmF0aXZlQ29uc3RydWN0b3IgfSwgZXhwb3J0ZWQpO1xuXG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlIC0tIHNhZmVcbnZhciAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNFeHRlbnNpYmxlKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNleHRlbnNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IChGQUlMU19PTl9QUklNSVRJVkVTIHx8IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSkgPyBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgaWYgKEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSAmJiBjbGFzc29mKGl0KSA9PSAnQXJyYXlCdWZmZXInKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlO1xufSA6ICRpc0V4dGVuc2libGU7XG4iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1leHBtMSAtLSBzYWZlXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gYE1hdGguZXhwbTFgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmV4cG0xXG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbi8vIGB0aGlzTnVtYmVyVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10aGlzbnVtYmVydmFsdWVcbm1vZHVsZS5leHBvcnRzID0gdW5jdXJyeVRoaXMoMS4wLnZhbHVlT2YpO1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbm1vZHVsZS5leHBvcnRzID0gJ1xcdTAwMDlcXHUwMDBBXFx1MDAwQlxcdTAwMENcXHUwMDBEXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MjAwMFxcdTIwMDFcXHUyMDAyJyArXG4gICdcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgb2JqZWN0IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBJU19QVVJFIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gY3Jhc2hlcyBvbGQgV2ViS2l0XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yMzJcbiAgaWYgKFdFQktJVCAmJiBXRUJLSVQgPCA1MzUpIHJldHVybjtcbiAgdmFyIGtleSA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZiwgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBrZXksIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIGRlbGV0ZSBnbG9iYWxba2V5XTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhQ2FsbGFibGUocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUNhbGxhYmxlKHJlamVjdCk7XG59O1xuXG4vLyBgTmV3UHJvbWlzZUNhcGFiaWxpdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1uZXdwcm9taXNlY2FwYWJpbGl0eVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG4vLyBVQyBCcm93c2VyIGJ1Z1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzEwMDhcbnZhciBNSVNTRURfU1RJQ0tZID0gVU5TVVBQT1JURURfWSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhJFJlZ0V4cCgnYScsICd5Jykuc3RpY2t5O1xufSk7XG5cbnZhciBCUk9LRU5fQ0FSRVQgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9ICRSZWdFeHAoJ15yJywgJ2d5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdzdHInKSAhPSBudWxsO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBCUk9LRU5fQ0FSRVQ6IEJST0tFTl9DQVJFVCxcbiAgTUlTU0VEX1NUSUNLWTogTUlTU0VEX1NUSUNLWSxcbiAgVU5TVVBQT1JURURfWTogVU5TVVBQT1JURURfWVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1lbXB0eS1jYXB0dXJpbmctZ3JvdXAsIHJlZ2V4cC9uby1lbXB0eS1ncm91cCwgcmVnZXhwL25vLWxhenktZW5kcyAtLSB0ZXN0aW5nICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tdXNlbGVzcy1xdWFudGlmaWVyIC0tIHRlc3RpbmcgKi9cbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBuYXRpdmVSZXBsYWNlID0gc2hhcmVkKCduYXRpdmUtc3RyaW5nLXJlcGxhY2UnLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciByZTEgPSAvYS87XG4gIHZhciByZTIgPSAvYiovZztcbiAgY2FsbChuYXRpdmVFeGVjLCByZTEsICdhJyk7XG4gIGNhbGwobmF0aXZlRXhlYywgcmUyLCAnYScpO1xuICByZXR1cm4gcmUxLmxhc3RJbmRleCAhPT0gMCB8fCByZTIubGFzdEluZGV4ICE9PSAwO1xufSkoKTtcblxudmFyIFVOU1VQUE9SVEVEX1kgPSBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQgfHwgVU5TVVBQT1JURURfWSB8fCBVTlNVUFBPUlRFRF9ET1RfQUxMIHx8IFVOU1VQUE9SVEVEX05DRztcblxuaWYgKFBBVENIKSB7XG4gIHBhdGNoZWRFeGVjID0gZnVuY3Rpb24gZXhlYyhzdHJpbmcpIHtcbiAgICB2YXIgcmUgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocmUpO1xuICAgIHZhciBzdHIgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgIHZhciByYXcgPSBzdGF0ZS5yYXc7XG4gICAgdmFyIHJlc3VsdCwgcmVDb3B5LCBsYXN0SW5kZXgsIG1hdGNoLCBpLCBvYmplY3QsIGdyb3VwO1xuXG4gICAgaWYgKHJhdykge1xuICAgICAgcmF3Lmxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgIHJlc3VsdCA9IGNhbGwocGF0Y2hlZEV4ZWMsIHJhdywgc3RyKTtcbiAgICAgIHJlLmxhc3RJbmRleCA9IHJhdy5sYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBncm91cHMgPSBzdGF0ZS5ncm91cHM7XG4gICAgdmFyIHN0aWNreSA9IFVOU1VQUE9SVEVEX1kgJiYgcmUuc3RpY2t5O1xuICAgIHZhciBmbGFncyA9IGNhbGwocmVnZXhwRmxhZ3MsIHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gcmVwbGFjZShmbGFncywgJ3knLCAnJyk7XG4gICAgICBpZiAoaW5kZXhPZihmbGFncywgJ2cnKSA9PT0gLTEpIHtcbiAgICAgICAgZmxhZ3MgKz0gJ2cnO1xuICAgICAgfVxuXG4gICAgICBzdHJDb3B5ID0gc3RyaW5nU2xpY2Uoc3RyLCByZS5sYXN0SW5kZXgpO1xuICAgICAgLy8gU3VwcG9ydCBhbmNob3JlZCBzdGlja3kgYmVoYXZpb3IuXG4gICAgICBpZiAocmUubGFzdEluZGV4ID4gMCAmJiAoIXJlLm11bHRpbGluZSB8fCByZS5tdWx0aWxpbmUgJiYgY2hhckF0KHN0ciwgcmUubGFzdEluZGV4IC0gMSkgIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IGNhbGwobmF0aXZlRXhlYywgc3RpY2t5ID8gcmVDb3B5IDogcmUsIHN0ckNvcHkpO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIG1hdGNoLmlucHV0ID0gc3RyaW5nU2xpY2UobWF0Y2guaW5wdXQsIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaFswXSA9IHN0cmluZ1NsaWNlKG1hdGNoWzBdLCBjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXJPckluZmluaXR5KHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbik7XG4gICAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZVxuICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IGNoYXJBdChTLCBwb3NpdGlvbilcbiAgICAgICAgICA6IGZpcnN0XG4gICAgICAgIDogQ09OVkVSVF9UT19TVFJJTkdcbiAgICAgICAgICA/IHN0cmluZ1NsaWNlKFMsIHBvc2l0aW9uLCBwb3NpdGlvbiArIDIpXG4gICAgICAgICAgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0XG4gIGNvZGVBdDogY3JlYXRlTWV0aG9kKGZhbHNlKSxcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG4gIGNoYXJBdDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEZPUkNFRCwgU0hBTSkge1xuICB2YXIgU1lNQk9MID0gd2VsbEtub3duU3ltYm9sKEtFWSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19TWU1CT0wgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSk7XG5cbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG5cbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgcmVhbCByZWdleCBoZXJlIHNpbmNlIGl0IGNhdXNlcyBkZW9wdGltaXphdGlvblxuICAgICAgLy8gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb24gaW4gVjhcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMDZcbiAgICAgIHJlID0ge307XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgICByZS5mbGFncyA9ICcnO1xuICAgICAgcmVbU1lNQk9MXSA9IC8uL1tTWU1CT0xdO1xuICAgIH1cblxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcblxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSk7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgRk9SQ0VEXG4gICkge1xuICAgIHZhciB1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QgPSB1bmN1cnJ5VGhpcygvLi9bU1lNQk9MXSk7XG4gICAgdmFyIG1ldGhvZHMgPSBleGVjKFNZTUJPTCwgJydbS0VZXSwgZnVuY3Rpb24gKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICB2YXIgdW5jdXJyaWVkTmF0aXZlTWV0aG9kID0gdW5jdXJyeVRoaXMobmF0aXZlTWV0aG9kKTtcbiAgICAgIHZhciAkZXhlYyA9IHJlZ2V4cC5leGVjO1xuICAgICAgaWYgKCRleGVjID09PSByZWdleHBFeGVjIHx8ICRleGVjID09PSBSZWdFeHBQcm90b3R5cGUuZXhlYykge1xuICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmN1cnJpZWROYXRpdmVNZXRob2Qoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgIH0pO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICByZWRlZmluZShSZWdFeHBQcm90b3R5cGUsIFNZTUJPTCwgbWV0aG9kc1sxXSk7XG4gIH1cblxuICBpZiAoU0hBTSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZVtTWU1CT0xdLCAnc2hhbScsIHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcblxuLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcbiAgcmV0dXJuIGluZGV4ICsgKHVuaWNvZGUgPyBjaGFyQXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsInZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlRZUEVEX0FSUkFZX0NPTlNUUlVDVE9SO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbi8vIGEgcGFydCBvZiBgVHlwZWRBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3R5cGVkYXJyYXktc3BlY2llcy1jcmVhdGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsQXJyYXkpIHtcbiAgcmV0dXJuIGFUeXBlZEFycmF5Q29uc3RydWN0b3Ioc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsQXJyYXksIG9yaWdpbmFsQXJyYXlbVFlQRURfQVJSQVlfQ09OU1RSVUNUT1JdKSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBwcmVmKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpO1xuICB2YXIgcmVzdWx0O1xuICBpZiAoZXhvdGljVG9QcmltKSB7XG4gICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JztcbiAgICByZXN1bHQgPSBjYWxsKGV4b3RpY1RvUHJpbSwgaW5wdXQsIHByZWYpO1xuICAgIGlmICghaXNPYmplY3QocmVzdWx0KSB8fCBpc1N5bWJvbChyZXN1bHQpKSByZXR1cm4gcmVzdWx0O1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbiAgfVxuICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBwcmVmKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3Rpbmdcbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gYGdldC1vd24tcHJvcGVydHktc3ltYm9sc2AgcG9seWZpbGwgc3ltYm9scyBjb252ZXJ0ZWQgdG8gb2JqZWN0IGFyZSBub3QgU3ltYm9sIGluc3RhbmNlc1xuICByZXR1cm4gIVN0cmluZyhzeW1ib2wpIHx8ICEoT2JqZWN0KHN5bWJvbCkgaW5zdGFuY2VvZiBTeW1ib2wpIHx8XG4gICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXNcbiAgICAhU3ltYm9sLnNoYW0gJiYgVjhfVkVSU0lPTiAmJiBWOF9WRVJTSU9OIDwgNDE7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBkZWZpbmVQcm9wZXJ0eShnbG9iYWwsIGtleSwgeyB2YWx1ZTogdmFsdWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KGtleXMsIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmUgKi9cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBhcnJheVNsaWNlKHdpbmRvd05hbWVzKTtcbiAgfVxufTtcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIGNsYXNzb2YoaXQpID09ICdXaW5kb3cnXG4gICAgPyBnZXRXaW5kb3dOYW1lcyhpdClcbiAgICA6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzKHRvSW5kZXhlZE9iamVjdChpdCkpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBlcnJvciA9IEVycm9yKCdhJyk7XG4gIGlmICghKCdzdGFjaycgaW4gZXJyb3IpKSByZXR1cm4gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlcnJvciwgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIDcpKTtcbiAgcmV0dXJuIGVycm9yLnN0YWNrICE9PSA3O1xufSk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBGdW5jdGlvbk5hbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5QUk9QRVI7XG52YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0NhbGxhYmxlKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gICAgICAgICAgcmVkZWZpbmUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgLy8gZGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUlTX1BVUkUgfHwgRk9SQ0VEKSAmJiBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl0gIT09IGRlZmF1bHRJdGVyYXRvcikge1xuICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yLCB7IG5hbWU6IERFRkFVTFQgfSk7XG4gIH1cbiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yO1xuXG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCwgRU5VTUVSQUJMRV9ORVhUKSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoKyFFTlVNRVJBQkxFX05FWFQsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG52YXIgbWVyZ2VTb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICByZXR1cm4gbGVuZ3RoIDwgOCA/IGluc2VydGlvblNvcnQoYXJyYXksIGNvbXBhcmVmbikgOiBtZXJnZShcbiAgICBhcnJheSxcbiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgMCwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBjb21wYXJlZm5cbiAgKTtcbn07XG5cbnZhciBpbnNlcnRpb25Tb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIGkgPSAxO1xuICB2YXIgZWxlbWVudCwgajtcblxuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIGogPSBpO1xuICAgIGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICB3aGlsZSAoaiAmJiBjb21wYXJlZm4oYXJyYXlbaiAtIDFdLCBlbGVtZW50KSA+IDApIHtcbiAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXTtcbiAgICB9XG4gICAgaWYgKGogIT09IGkrKykgYXJyYXlbal0gPSBlbGVtZW50O1xuICB9IHJldHVybiBhcnJheTtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIChhcnJheSwgbGVmdCwgcmlnaHQsIGNvbXBhcmVmbikge1xuICB2YXIgbGxlbmd0aCA9IGxlZnQubGVuZ3RoO1xuICB2YXIgcmxlbmd0aCA9IHJpZ2h0Lmxlbmd0aDtcbiAgdmFyIGxpbmRleCA9IDA7XG4gIHZhciByaW5kZXggPSAwO1xuXG4gIHdoaWxlIChsaW5kZXggPCBsbGVuZ3RoIHx8IHJpbmRleCA8IHJsZW5ndGgpIHtcbiAgICBhcnJheVtsaW5kZXggKyByaW5kZXhdID0gKGxpbmRleCA8IGxsZW5ndGggJiYgcmluZGV4IDwgcmxlbmd0aClcbiAgICAgID8gY29tcGFyZWZuKGxlZnRbbGluZGV4XSwgcmlnaHRbcmluZGV4XSkgPD0gMCA/IGxlZnRbbGluZGV4KytdIDogcmlnaHRbcmluZGV4KytdXG4gICAgICA6IGxpbmRleCA8IGxsZW5ndGggPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXTtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlU29ydDtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHdlYmtpdCA9IHVzZXJBZ2VudC5tYXRjaCgvQXBwbGVXZWJLaXRcXC8oXFxkKylcXC4vKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIXdlYmtpdCAmJiArd2Via2l0WzFdO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG59O1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgcmVwZWF0ID0gdW5jdXJyeVRoaXMoJHJlcGVhdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2VpbCA9IE1hdGguY2VpbDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBwYWRTdGFydCwgcGFkRW5kIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfRU5EKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIG1heExlbmd0aCwgZmlsbFN0cmluZykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICAgIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IHRvU3RyaW5nKGZpbGxTdHJpbmcpO1xuICAgIHZhciBmaWxsTGVuLCBzdHJpbmdGaWxsZXI7XG4gICAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gICAgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgICBzdHJpbmdGaWxsZXIgPSByZXBlYXQoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ1NsaWNlKHN0cmluZ0ZpbGxlciwgMCwgZmlsbExlbik7XG4gICAgcmV0dXJuIElTX0VORCA/IFMgKyBzdHJpbmdGaWxsZXIgOiBzdHJpbmdGaWxsZXIgKyBTO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZFN0YXJ0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiLy8gRkYyNi0gYnVnOiBBcnJheUJ1ZmZlcnMgYXJlIG5vbi1leHRlbnNpYmxlLCBidXQgT2JqZWN0LmlzRXh0ZW5zaWJsZSBkb2VzIG5vdCByZXBvcnQgaXRcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcig4KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSwgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbiAgICBpZiAoT2JqZWN0LmlzRXh0ZW5zaWJsZShidWZmZXIpKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoYnVmZmVyLCAnYScsIHsgdmFsdWU6IDggfSk7XG4gIH1cbn0pO1xuIiwiLy8gYE1hdGguc2lnbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2lnblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtc2lnbiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYElzSW50ZWdyYWxOdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2ludGVncmFsbnVtYmVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLWlzaW50ZWdlciAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgbG9jYXRpb24sIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG50cnkge1xuICAvLyBEZW5vIHRocm93cyBhIFJlZmVyZW5jZUVycm9yIG9uIGBsb2NhdGlvbmAgYWNjZXNzIHdpdGhvdXQgYC0tbG9jYXRpb25gIGZsYWdcbiAgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKGhhc093bihxdWV1ZSwgaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShTdHJpbmcoaWQpLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoaGFuZGxlcikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBmbiA9IGlzQ2FsbGFibGUoaGFuZGxlcikgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcik7XG4gICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwcGx5KGZuLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKElTX05PREUpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgLy8gZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82MjRcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCAmJiAhSVNfSU9TKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ3MnKSAtPiAvLi9zIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciByZSA9ICRSZWdFeHAoJy4nLCAncycpO1xuICByZXR1cm4gIShyZS5kb3RBbGwgJiYgcmUuZXhlYygnXFxuJykgJiYgcmUuZmxhZ3MgPT09ICdzJyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUuZXhlY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUuZXhlY1xuJCh7IHRhcmdldDogJ1JlZ0V4cCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IC8uLy5leGVjICE9PSBleGVjIH0sIHtcbiAgZXhlYzogZXhlY1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIlRoZSBtZXRob2QgZG9lc24ndCBhY2NlcHQgcmVndWxhciBleHByZXNzaW9uc1wiKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5QUk9QRVI7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbm9uID0gJ1xcdTIwMEJcXHUwMDg1XFx1MTgwRSc7XG5cbi8vIGNoZWNrIHRoYXQgYSBtZXRob2Qgd29ya3Mgd2l0aCB0aGUgY29ycmVjdCBsaXN0XG4vLyBvZiB3aGl0ZXNwYWNlcyBhbmQgaGFzIGEgY29ycmVjdCBuYW1lXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXSgpXG4gICAgICB8fCBub25bTUVUSE9EX05BTUVdKCkgIT09IG5vblxuICAgICAgfHwgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIHdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXS5uYW1lICE9PSBNRVRIT0RfTkFNRSk7XG4gIH0pO1xufTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG52YXIgQXJyYXlCdWZmZXIgPSBnbG9iYWwuQXJyYXlCdWZmZXI7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSAhTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBJbnQ4QXJyYXkoMSk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBuZXcgSW50OEFycmF5KC0xKTtcbn0pIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIG5ldyBJbnQ4QXJyYXkoKTtcbiAgbmV3IEludDhBcnJheShudWxsKTtcbiAgbmV3IEludDhBcnJheSgxLjUpO1xuICBuZXcgSW50OEFycmF5KGl0ZXJhYmxlKTtcbn0sIHRydWUpIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gU2FmYXJpICgxMSspIGJ1ZyAtIGEgcmVhc29uIHdoeSBldmVuIFNhZmFyaSAxMyBzaG91bGQgbG9hZCBhIHR5cGVkIGFycmF5IHBvbHlmaWxsXG4gIHJldHVybiBuZXcgSW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcigyKSwgMSwgdW5kZWZpbmVkKS5sZW5ndGggIT09IDE7XG59KTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgJiYgIVN5bWJvbC5zaGFtXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFua3MgdG8gSUU4IGZvciBpdHMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPSA0Mjtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcCkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzT3duKGhpZGRlbktleXMsIGtleSkgJiYgaGFzT3duKE8sIGtleSkgJiYgcHVzaChyZXN1bHQsIGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+aW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcHVzaChyZXN1bHQsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBpbnN0YWxsRXJyb3JDYXVzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnN0YWxsLWVycm9yLWNhdXNlJyk7XG52YXIgY2xlYXJFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsZWFyLWVycm9yLXN0YWNrJyk7XG52YXIgRVJST1JfU1RBQ0tfSU5TVEFMTEFCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3Itc3RhY2staW5zdGFsbGFibGUnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoRlVMTF9OQU1FLCB3cmFwcGVyLCBGT1JDRUQsIElTX0FHR1JFR0FURV9FUlJPUikge1xuICB2YXIgT1BUSU9OU19QT1NJVElPTiA9IElTX0FHR1JFR0FURV9FUlJPUiA/IDIgOiAxO1xuICB2YXIgcGF0aCA9IEZVTExfTkFNRS5zcGxpdCgnLicpO1xuICB2YXIgRVJST1JfTkFNRSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgdmFyIE9yaWdpbmFsRXJyb3IgPSBnZXRCdWlsdEluLmFwcGx5KG51bGwsIHBhdGgpO1xuXG4gIGlmICghT3JpZ2luYWxFcnJvcikgcmV0dXJuO1xuXG4gIHZhciBPcmlnaW5hbEVycm9yUHJvdG90eXBlID0gT3JpZ2luYWxFcnJvci5wcm90b3R5cGU7XG5cbiAgLy8gVjggOS4zLSBidWcgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MTIwMDZcbiAgaWYgKCFJU19QVVJFICYmIGhhc093bihPcmlnaW5hbEVycm9yUHJvdG90eXBlLCAnY2F1c2UnKSkgZGVsZXRlIE9yaWdpbmFsRXJyb3JQcm90b3R5cGUuY2F1c2U7XG5cbiAgaWYgKCFGT1JDRUQpIHJldHVybiBPcmlnaW5hbEVycm9yO1xuXG4gIHZhciBCYXNlRXJyb3IgPSBnZXRCdWlsdEluKCdFcnJvcicpO1xuXG4gIHZhciBXcmFwcGVkRXJyb3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBub3JtYWxpemVTdHJpbmdBcmd1bWVudChJU19BR0dSRUdBVEVfRVJST1IgPyBiIDogYSwgdW5kZWZpbmVkKTtcbiAgICB2YXIgcmVzdWx0ID0gSVNfQUdHUkVHQVRFX0VSUk9SID8gbmV3IE9yaWdpbmFsRXJyb3IoYSkgOiBuZXcgT3JpZ2luYWxFcnJvcigpO1xuICAgIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdtZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc3RhY2snLCBjbGVhckVycm9yU3RhY2socmVzdWx0LnN0YWNrLCAyKSk7XG4gICAgaWYgKHRoaXMgJiYgaXNQcm90b3R5cGVPZihPcmlnaW5hbEVycm9yUHJvdG90eXBlLCB0aGlzKSkgaW5oZXJpdElmUmVxdWlyZWQocmVzdWx0LCB0aGlzLCBXcmFwcGVkRXJyb3IpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gT1BUSU9OU19QT1NJVElPTikgaW5zdGFsbEVycm9yQ2F1c2UocmVzdWx0LCBhcmd1bWVudHNbT1BUSU9OU19QT1NJVElPTl0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuXG4gIFdyYXBwZWRFcnJvci5wcm90b3R5cGUgPSBPcmlnaW5hbEVycm9yUHJvdG90eXBlO1xuXG4gIGlmIChFUlJPUl9OQU1FICE9PSAnRXJyb3InKSB7XG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZihXcmFwcGVkRXJyb3IsIEJhc2VFcnJvcik7XG4gICAgZWxzZSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFdyYXBwZWRFcnJvciwgQmFzZUVycm9yLCB7IG5hbWU6IHRydWUgfSk7XG4gIH1cblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFdyYXBwZWRFcnJvciwgT3JpZ2luYWxFcnJvcik7XG5cbiAgaWYgKCFJU19QVVJFKSB0cnkge1xuICAgIC8vIFNhZmFyaSAxMy0gYnVnOiBXZWJBc3NlbWJseSBlcnJvcnMgZG9lcyBub3QgaGF2ZSBhIHByb3BlciBgLm5hbWVgXG4gICAgaWYgKE9yaWdpbmFsRXJyb3JQcm90b3R5cGUubmFtZSAhPT0gRVJST1JfTkFNRSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE9yaWdpbmFsRXJyb3JQcm90b3R5cGUsICduYW1lJywgRVJST1JfTkFNRSk7XG4gICAgfVxuICAgIE9yaWdpbmFsRXJyb3JQcm90b3R5cGUuY29uc3RydWN0b3IgPSBXcmFwcGVkRXJyb3I7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICByZXR1cm4gV3JhcHBlZEVycm9yO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgU3RyaW5nID0gZ2xvYmFsLlN0cmluZztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09ICdvYmplY3QnIHx8IGlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhhcmd1bWVudCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuLy8gYEluc3RhbGxFcnJvckNhdXNlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9wcm9wb3NhbC1lcnJvci1jYXVzZS8jc2VjLWVycm9yb2JqZWN0cy1pbnN0YWxsLWVycm9yLWNhdXNlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSAmJiAnY2F1c2UnIGluIG9wdGlvbnMpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywgJ2NhdXNlJywgb3B0aW9ucy5jYXVzZSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xuXG52YXIgbmF0aXZlRXJyb3JUb1N0cmluZyA9IEVycm9yLnByb3RvdHlwZS50b1N0cmluZztcblxudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIENocm9tZSAzMi0gaW5jb3JyZWN0bHkgY2FsbCBhY2Nlc3NvclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIHZhciBvYmplY3QgPSBjcmVhdGUoT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnbmFtZScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcyA9PT0gb2JqZWN0O1xuICAgIH0gfSkpO1xuICAgIGlmIChuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwob2JqZWN0KSAhPT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBGRjEwLSBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgbm9uLXN0cmluZ3NcbiAgcmV0dXJuIG5hdGl2ZUVycm9yVG9TdHJpbmcuY2FsbCh7IG1lc3NhZ2U6IDEsIG5hbWU6IDIgfSkgIT09ICcyOiAxJ1xuICAgIC8vIElFOCBkb2VzIG5vdCBwcm9wZXJseSBoYW5kbGUgZGVmYXVsdHNcbiAgICB8fCBuYXRpdmVFcnJvclRvU3RyaW5nLmNhbGwoe30pICE9PSAnRXJyb3InO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSU5DT1JSRUNUX1RPX1NUUklORyA/IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICB2YXIgTyA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KE8ubmFtZSwgJ0Vycm9yJyk7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoTy5tZXNzYWdlKTtcbiAgcmV0dXJuICFuYW1lID8gbWVzc2FnZSA6ICFtZXNzYWdlID8gbmFtZSA6IG5hbWUgKyAnOiAnICsgbWVzc2FnZTtcbn0gOiBuYXRpdmVFcnJvclRvU3RyaW5nO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtY29weXdpdGhpbiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQgLyogPSAwICovLCBzdGFydCAvKiA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBtaW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0byk7XG4gIHZhciBpbmMgPSAxO1xuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XG4gICAgaW5jID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIGVsZW1lbnRMZW47XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50TGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoZWxlbWVudCk7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxRkZGRkZGRkZGRkZGRikgdGhyb3cgVHlwZUVycm9yKCdFeGNlZWQgdGhlIGFjY2VwdGFibGUgYXJyYXkgbGVuZ3RoJyk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxufSA6IFtdLmZvckVhY2g7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICB2YXIgSVNfQ09OU1RSVUNUT1IgPSBpc0NvbnN0cnVjdG9yKHRoaXMpO1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgJiYgISh0aGlzID09IEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdFxudmFyIEl0ZXJhdG9yUHJvdG90eXBlLCBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUsIGFycmF5SXRlcmF0b3I7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi9cbmlmIChbXS5rZXlzKSB7XG4gIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7XG4gIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSB0cnVlO1xuICBlbHNlIHtcbiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7XG4gICAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cbn1cblxudmFyIE5FV19JVEVSQVRPUl9QUk9UT1RZUEUgPSBJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgdGVzdCA9IHt9O1xuICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2VcbiAgcmV0dXJuIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXS5jYWxsKHRlc3QpICE9PSB0ZXN0O1xufSk7XG5cbmlmIChORVdfSVRFUkFUT1JfUFJPVE9UWVBFKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuZWxzZSBpZiAoSVNfUFVSRSkgSXRlcmF0b3JQcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1AQGl0ZXJhdG9yXG5pZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICByZWRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJdGVyYXRvclByb3RvdHlwZTogSXRlcmF0b3JQcm90b3R5cGUsXG4gIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlNcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gc2FmZSAqL1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRsYXN0SW5kZXhPZiA9IFtdLmxhc3RJbmRleE9mO1xudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRsYXN0SW5kZXhPZiAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2xhc3RJbmRleE9mJyk7XG52YXIgRk9SQ0VEID0gTkVHQVRJVkVfWkVSTyB8fCAhU1RSSUNUX01FVEhPRDtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiBhcHBseSgkbGFzdEluZGV4T2YsIHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IG1pbihpbmRleCwgdG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudHNbMV0pKTtcbiAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8gJiYgT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xuICByZXR1cm4gLTE7XG59IDogJGxhc3RJbmRleE9mO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgZmlyZWZveCA9IHVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS9pKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIWZpcmVmb3ggJiYgK2ZpcmVmb3hbMV07XG4iLCJ2YXIgVUEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvTVNJRXxUcmlkZW50Ly50ZXN0KFVBKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG5cbi8vIGBUb0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9pbmRleFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpdCk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChudW1iZXIpO1xuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCBvciBpbmRleCcpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgRnVuY3Rpb24gPSBnbG9iYWwuRnVuY3Rpb247XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoQywgYXJnc0xlbmd0aCwgYXJncykge1xuICBpZiAoIWhhc093bihmYWN0b3JpZXMsIGFyZ3NMZW5ndGgpKSB7XG4gICAgZm9yICh2YXIgbGlzdCA9IFtdLCBpID0gMDsgaSA8IGFyZ3NMZW5ndGg7IGkrKykgbGlzdFtpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1thcmdzTGVuZ3RoXSA9IEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBqb2luKGxpc3QsICcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/IEZ1bmN0aW9uLmJpbmQgOiBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBGID0gYUNhbGxhYmxlKHRoaXMpO1xuICB2YXIgUHJvdG90eXBlID0gRi5wcm90b3R5cGU7XG4gIHZhciBwYXJ0QXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBmdW5jdGlvbiBib3VuZCgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBjb25jYXQocGFydEFyZ3MsIGFycmF5U2xpY2UoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZEZ1bmN0aW9uID8gY29uc3RydWN0KEYsIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IEYuYXBwbHkodGhhdCwgYXJncyk7XG4gIH07XG4gIGlmIChpc09iamVjdChQcm90b3R5cGUpKSBib3VuZEZ1bmN0aW9uLnByb3RvdHlwZSA9IFByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kRnVuY3Rpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmZhc3RLZXk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGludGVybmFsU3RhdGVHZXR0ZXJGb3IgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcjtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIFByb3RvdHlwZSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaW5kZXg6IGNyZWF0ZShudWxsKSxcbiAgICAgICAgZmlyc3Q6IHVuZGVmaW5lZCxcbiAgICAgICAgbGFzdDogdW5kZWZpbmVkLFxuICAgICAgICBzaXplOiAwXG4gICAgICB9KTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMpIHRoYXQuc2l6ZSA9IDA7XG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvdG90eXBlID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgIHZhciBwcmV2aW91cywgaW5kZXg7XG4gICAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbHVlO1xuICAgICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUubGFzdCA9IGVudHJ5ID0ge1xuICAgICAgICAgIGluZGV4OiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSxcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgcHJldmlvdXM6IHByZXZpb3VzID0gc3RhdGUubGFzdCxcbiAgICAgICAgICBuZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgcmVtb3ZlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFzdGF0ZS5maXJzdCkgc3RhdGUuZmlyc3QgPSBlbnRyeTtcbiAgICAgICAgaWYgKHByZXZpb3VzKSBwcmV2aW91cy5uZXh0ID0gZW50cnk7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSsrO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSsrO1xuICAgICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHN0YXRlLmluZGV4W2luZGV4XSA9IGVudHJ5O1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIC8vIGZhc3QgY2FzZVxuICAgICAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICAgICAgdmFyIGVudHJ5O1xuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiBzdGF0ZS5pbmRleFtpbmRleF07XG4gICAgICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgICAgIGZvciAoZW50cnkgPSBzdGF0ZS5maXJzdDsgZW50cnk7IGVudHJ5ID0gZW50cnkubmV4dCkge1xuICAgICAgICBpZiAoZW50cnkua2V5ID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZWRlZmluZUFsbChQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmNsZWFyKClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5jbGVhclxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmNsZWFyXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgICAgZGVsZXRlIHN0YXRlLmluZGV4W2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wcmV2aW91cyA9IHByZXY7XG4gICAgICAgICAgaWYgKHN0YXRlLmZpcnN0ID09IGVudHJ5KSBzdGF0ZS5maXJzdCA9IG5leHQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmxhc3QgPT0gZW50cnkpIHN0YXRlLmxhc3QgPSBwcmV2O1xuICAgICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZS0tO1xuICAgICAgICAgIGVsc2UgdGhhdC5zaXplLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuZmlyc3QpIHtcbiAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXR9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmhhc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmhhc1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWRlZmluZUFsbChQcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5nZXRcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudmFsdWU7XG4gICAgICB9LFxuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIC8vIGBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eShQcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTtcbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS57IGtleXMsIHZhbHVlcywgZW50cmllcywgQEBpdGVyYXRvciB9KClgIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIGRlZmluZUl0ZXJhdG9yKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogZW50cnkua2V5LCBkb25lOiBmYWxzZSB9O1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS52YWx1ZSwgZG9uZTogZmFsc2UgfTtcbiAgICAgIHJldHVybiB7IHZhbHVlOiBbZW50cnkua2V5LCBlbnRyeS52YWx1ZV0sIGRvbmU6IGZhbHNlIH07XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGVbQEBzcGVjaWVzXWAgYWNjZXNzb3JzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtbWFwLUBAc3BlY2llc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXNldC1AQHNwZWNpZXNcbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9XG59O1xuIiwidmFyIGxvZyA9IE1hdGgubG9nO1xuXG4vLyBgTWF0aC5sb2cxcGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMXBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWxvZzFwIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IGxvZygxICsgeCk7XG59O1xuIiwidmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExPRzEwRSA9IE1hdGguTE9HMTBFO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1sb2cxMCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMTAgfHwgZnVuY3Rpb24gbG9nMTAoeCkge1xuICByZXR1cm4gbG9nKHgpICogTE9HMTBFO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBuJFBhcnNlRmxvYXQgPSBnbG9iYWwucGFyc2VGbG9hdDtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIElURVJBVE9SID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGT1JDRUQgPSAxIC8gbiRQYXJzZUZsb2F0KHdoaXRlc3BhY2VzICsgJy0wJykgIT09IC1JbmZpbml0eVxuICAvLyBNUyBFZGdlIDE4LSBicm9rZW4gd2l0aCBib3hlZCBzeW1ib2xzXG4gIHx8IChJVEVSQVRPUiAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgeyBuJFBhcnNlRmxvYXQoT2JqZWN0KElURVJBVE9SKSk7IH0pKTtcblxuLy8gYHBhcnNlRmxvYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWZsb2F0LXN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cmluZykge1xuICB2YXIgdHJpbW1lZFN0cmluZyA9IHRyaW0odG9TdHJpbmcoc3RyaW5nKSk7XG4gIHZhciByZXN1bHQgPSBuJFBhcnNlRmxvYXQodHJpbW1lZFN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgY2hhckF0KHRyaW1tZWRTdHJpbmcsIDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6IG4kUGFyc2VGbG9hdDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgJHBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgSVRFUkFUT1IgPSBTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIGhleCA9IC9eWystXT8weC9pO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcyhoZXguZXhlYyk7XG52YXIgRk9SQ0VEID0gJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzB4MTYnKSAhPT0gMjJcbiAgLy8gTVMgRWRnZSAxOC0gYnJva2VuIHdpdGggYm94ZWQgc3ltYm9sc1xuICB8fCAoSVRFUkFUT1IgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsgJHBhcnNlSW50KE9iamVjdChJVEVSQVRPUikpOyB9KSk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4KSB7XG4gIHZhciBTID0gdHJpbSh0b1N0cmluZyhzdHJpbmcpKTtcbiAgcmV0dXJuICRwYXJzZUludChTLCAocmFkaXggPj4+IDApIHx8IChleGVjKGhleCwgUykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gc2FmZVxudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmFzc2lnblxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpXG4gIGlmIChERVNDUklQVE9SUyAmJiAkYXNzaWduKHsgYjogMSB9LCAkYXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ2InLCB7XG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTtcbiAgLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zeW1ib2wgLS0gc2FmZVxuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbc3ltYm9sXSA9IDc7XG4gIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsgQltjaHJdID0gY2hyOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDtcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG4gIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkge1xuICAgIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikge1xuICAgICAga2V5ID0ga2V5c1tqKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJykuZjtcblxudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gdW5jdXJyeVRoaXMoJHByb3BlcnR5SXNFbnVtZXJhYmxlKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbi8vIGBPYmplY3QueyBlbnRyaWVzLCB2YWx1ZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBvYmplY3RLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGtleSA9IGtleXNbaSsrXTtcbiAgICAgIGlmICghREVTQ1JJUFRPUlMgfHwgcHJvcGVydHlJc0VudW1lcmFibGUoTywga2V5KSkge1xuICAgICAgICBwdXNoKHJlc3VsdCwgVE9fRU5UUklFUyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiAgZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuICB2YWx1ZXM6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCIvLyBgU2FtZVZhbHVlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2FtZXZhbHVlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBhZHxpcGhvbmV8aXBvZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX0lPU19QRUJCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy1wZWJibGUnKTtcbnZhciBJU19XRUJPU19XRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoIUlTX0lPU19QRUJCTEUgJiYgUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAvLyB3b3JrYXJvdW5kIG9mIFdlYktpdCB+IGlPUyBTYWZhcmkgMTAuMSBidWdcbiAgICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgICB0aGVuID0gYmluZChwcm9taXNlLnRoZW4sIHByb21pc2UpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIE5vZGUuanMgd2l0aG91dCBwcm9taXNlc1xuICB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmJpbmQoZ2xvYmFsKVxuICAgIG1hY3JvdGFzayA9IGJpbmQobWFjcm90YXNrLCBnbG9iYWwpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG1hY3JvdGFzayhmbHVzaCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikge1xuICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gIGlmICghaGVhZCkge1xuICAgIGhlYWQgPSB0YXNrO1xuICAgIG5vdGlmeSgpO1xuICB9IGxhc3QgPSB0YXNrO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZGVzY3JpcHRvcikge1xuICByZXR1cm4gZGVzY3JpcHRvciAhPT0gdW5kZWZpbmVkICYmIChoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJykgfHwgaGFzT3duKGRlc2NyaXB0b3IsICd3cml0YWJsZScpKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnKD88YT5iKScsICdnJykgLT4gLyg/PGE+YikvZyBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCcoPzxhPmIpJywgJ2cnKTtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2InKS5ncm91cHMuYSAhPT0gJ2InIHx8XG4gICAgJ2InLnJlcGxhY2UocmUsICckPGE+YycpICE9PSAnYmMnO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvclxuZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUixcbiAgICBzdHJpbmc6IHRvU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9WZXJzaW9uXFwvMTAoPzpcXC5cXGQrKXsxLDJ9KD86IFtcXHcuL10rKT8oPzogTW9iaWxlXFwvXFx3Kyk/IFNhZmFyaVxcLy8udGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTID0gL1xcJChbJCYnYF18XFxkezEsMn18PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9KS9nO1xuXG4vLyBgR2V0U3Vic3RpdHV0aW9uYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcbiAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcbiAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XG4gIH1cbiAgcmV0dXJuIHJlcGxhY2UocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICB2YXIgY2FwdHVyZTtcbiAgICBzd2l0Y2ggKGNoYXJBdChjaCwgMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIDAsIHBvc2l0aW9uKTtcbiAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHJpbmdTbGljZShzdHIsIHRhaWxQb3MpO1xuICAgICAgY2FzZSAnPCc6XG4gICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW3N0cmluZ1NsaWNlKGNoLCAxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoYXJBdChjaCwgMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaGFyQXQoY2gsIDEpO1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICB9KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvUG9zaXRpdmVJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXBvc2l0aXZlLWludGVnZXInKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XG4gIHZhciBvZmZzZXQgPSB0b1Bvc2l0aXZlSW50ZWdlcihpdCk7XG4gIGlmIChvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuIiwidmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY29uc3RydWN0b3InKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGdldEl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvcicpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XG4gIHZhciBDID0gYUNvbnN0cnVjdG9yKHRoaXMpO1xuICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaSwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0O1xuICBpZiAoaXRlcmF0b3JNZXRob2QgJiYgIWlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpIHtcbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKE8sIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICBPID0gW107XG4gICAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICBPLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChtYXBwaW5nICYmIGFyZ3VtZW50c0xlbmd0aCA+IDIpIHtcbiAgICBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c1syXSk7XG4gIH1cbiAgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTtcbiAgZm9yIChpID0gMDsgbGVuZ3RoID4gaTsgaSsrKSB7XG4gICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrRGF0YSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLmdldFdlYWtEYXRhO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBBcnJheUl0ZXJhdGlvbk1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG52YXIgZmluZCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmQ7XG52YXIgZmluZEluZGV4ID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZEluZGV4O1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHN0b3JlKSB7XG4gIHJldHVybiBzdG9yZS5mcm96ZW4gfHwgKHN0b3JlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcblxudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xufTtcblxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5cblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgc3BsaWNlKHRoaXMuZW50cmllcywgaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIFByb3RvdHlwZSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaWQ6IGlkKyssXG4gICAgICAgIGZyb3plbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBQcm90b3R5cGUgPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbiAgICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG5cbiAgICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUoc3RhdGUpLnNldChrZXksIHZhbHVlKTtcbiAgICAgIGVsc2UgZGF0YVtzdGF0ZS5pZF0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGF0O1xuICAgIH07XG5cbiAgICByZWRlZmluZUFsbChQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IFdlYWtNYXAsIFdlYWtTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZGVsZXRlXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgaGFzT3duKGRhdGEsIHN0YXRlLmlkKSAmJiBkZWxldGUgZGF0YVtzdGF0ZS5pZF07XG4gICAgICB9LFxuICAgICAgLy8gYHsgV2Vha01hcCwgV2Vha1NldCB9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5oYXNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC5wcm90b3R5cGUuaGFzXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgaGFzT3duKGRhdGEsIHN0YXRlLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKFByb3RvdHlwZSwgSVNfTUFQID8ge1xuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuZ2V0XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgICAgICByZXR1cm4gZGF0YSA/IGRhdGFbc3RhdGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLnNldFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyBgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH1cbn07XG4iLCJ2YXIgaXRvYyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG52YXIgY3RvaSA9IHt9O1xuXG5mb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgNjY7IGluZGV4KyspIGN0b2lbaXRvYy5jaGFyQXQoaW5kZXgpXSA9IGluZGV4O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXRvYzogaXRvYyxcbiAgY3RvaTogY3RvaVxufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiLy8gaW4gb2xkIFdlYktpdCB2ZXJzaW9ucywgYGVsZW1lbnQuY2xhc3NMaXN0YCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgZ2xvYmFsIGBET01Ub2tlbkxpc3RgXG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbnZhciBjbGFzc0xpc3QgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ3NwYW4nKS5jbGFzc0xpc3Q7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gY2xhc3NMaXN0ICYmIGNsYXNzTGlzdC5jb25zdHJ1Y3RvciAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVRva2VuTGlzdFByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSA/IHVuZGVmaW5lZCA6IERPTVRva2VuTGlzdFByb3RvdHlwZTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBJbmRleFNpemVFcnJvcjogeyBzOiAnSU5ERVhfU0laRV9FUlInLCBjOiAxLCBtOiAxIH0sXG4gIERPTVN0cmluZ1NpemVFcnJvcjogeyBzOiAnRE9NU1RSSU5HX1NJWkVfRVJSJywgYzogMiwgbTogMCB9LFxuICBIaWVyYXJjaHlSZXF1ZXN0RXJyb3I6IHsgczogJ0hJRVJBUkNIWV9SRVFVRVNUX0VSUicsIGM6IDMsIG06IDEgfSxcbiAgV3JvbmdEb2N1bWVudEVycm9yOiB7IHM6ICdXUk9OR19ET0NVTUVOVF9FUlInLCBjOiA0LCBtOiAxIH0sXG4gIEludmFsaWRDaGFyYWN0ZXJFcnJvcjogeyBzOiAnSU5WQUxJRF9DSEFSQUNURVJfRVJSJywgYzogNSwgbTogMSB9LFxuICBOb0RhdGFBbGxvd2VkRXJyb3I6IHsgczogJ05PX0RBVEFfQUxMT1dFRF9FUlInLCBjOiA2LCBtOiAwIH0sXG4gIE5vTW9kaWZpY2F0aW9uQWxsb3dlZEVycm9yOiB7IHM6ICdOT19NT0RJRklDQVRJT05fQUxMT1dFRF9FUlInLCBjOiA3LCBtOiAxIH0sXG4gIE5vdEZvdW5kRXJyb3I6IHsgczogJ05PVF9GT1VORF9FUlInLCBjOiA4LCBtOiAxIH0sXG4gIE5vdFN1cHBvcnRlZEVycm9yOiB7IHM6ICdOT1RfU1VQUE9SVEVEX0VSUicsIGM6IDksIG06IDEgfSxcbiAgSW5Vc2VBdHRyaWJ1dGVFcnJvcjogeyBzOiAnSU5VU0VfQVRUUklCVVRFX0VSUicsIGM6IDEwLCBtOiAxIH0sXG4gIEludmFsaWRTdGF0ZUVycm9yOiB7IHM6ICdJTlZBTElEX1NUQVRFX0VSUicsIGM6IDExLCBtOiAxIH0sXG4gIFN5bnRheEVycm9yOiB7IHM6ICdTWU5UQVhfRVJSJywgYzogMTIsIG06IDEgfSxcbiAgSW52YWxpZE1vZGlmaWNhdGlvbkVycm9yOiB7IHM6ICdJTlZBTElEX01PRElGSUNBVElPTl9FUlInLCBjOiAxMywgbTogMSB9LFxuICBOYW1lc3BhY2VFcnJvcjogeyBzOiAnTkFNRVNQQUNFX0VSUicsIGM6IDE0LCBtOiAxIH0sXG4gIEludmFsaWRBY2Nlc3NFcnJvcjogeyBzOiAnSU5WQUxJRF9BQ0NFU1NfRVJSJywgYzogMTUsIG06IDEgfSxcbiAgVmFsaWRhdGlvbkVycm9yOiB7IHM6ICdWQUxJREFUSU9OX0VSUicsIGM6IDE2LCBtOiAwIH0sXG4gIFR5cGVNaXNtYXRjaEVycm9yOiB7IHM6ICdUWVBFX01JU01BVENIX0VSUicsIGM6IDE3LCBtOiAxIH0sXG4gIFNlY3VyaXR5RXJyb3I6IHsgczogJ1NFQ1VSSVRZX0VSUicsIGM6IDE4LCBtOiAxIH0sXG4gIE5ldHdvcmtFcnJvcjogeyBzOiAnTkVUV09SS19FUlInLCBjOiAxOSwgbTogMSB9LFxuICBBYm9ydEVycm9yOiB7IHM6ICdBQk9SVF9FUlInLCBjOiAyMCwgbTogMSB9LFxuICBVUkxNaXNtYXRjaEVycm9yOiB7IHM6ICdVUkxfTUlTTUFUQ0hfRVJSJywgYzogMjEsIG06IDEgfSxcbiAgUXVvdGFFeGNlZWRlZEVycm9yOiB7IHM6ICdRVU9UQV9FWENFRURFRF9FUlInLCBjOiAyMiwgbTogMSB9LFxuICBUaW1lb3V0RXJyb3I6IHsgczogJ1RJTUVPVVRfRVJSJywgYzogMjMsIG06IDEgfSxcbiAgSW52YWxpZE5vZGVUeXBlRXJyb3I6IHsgczogJ0lOVkFMSURfTk9ERV9UWVBFX0VSUicsIGM6IDI0LCBtOiAxIH0sXG4gIERhdGFDbG9uZUVycm9yOiB7IHM6ICdEQVRBX0NMT05FX0VSUicsIGM6IDI1LCBtOiAxIH1cbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3JlbGF0aXZlLXVybC1zdHlsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgdXJsID0gbmV3IFVSTCgnYj9hPTEmYj0yJmM9MycsICdodHRwOi8vYScpO1xuICB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtcztcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB1cmwucGF0aG5hbWUgPSAnYyUyMGQnO1xuICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTtcbiAgICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pXG4gICAgfHwgIXNlYXJjaFBhcmFtcy5zb3J0XG4gICAgfHwgdXJsLmhyZWYgIT09ICdodHRwOi8vYS9jJTIwZD9hPTEmYz0zJ1xuICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnXG4gICAgfHwgU3RyaW5nKG5ldyBVUkxTZWFyY2hQYXJhbXMoJz9hPTEnKSkgIT09ICdhPTEnXG4gICAgfHwgIXNlYXJjaFBhcmFtc1tJVEVSQVRPUl1cbiAgICAvLyB0aHJvd3MgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHBzOi8vYUBiJykudXNlcm5hbWUgIT09ICdhJ1xuICAgIHx8IG5ldyBVUkxTZWFyY2hQYXJhbXMobmV3IFVSTFNlYXJjaFBhcmFtcygnYT1iJykpLmdldCgnYScpICE9PSAnYidcbiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2VcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYydcbiAgICAvLyBub3QgZXNjYXBlZCBpbiBDaHJvbWUgNjItXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMSdcbiAgICAvLyBmYWlscyBpbiBDaHJvbWUgNjYtXG4gICAgfHwgcmVzdWx0ICE9PSAnYTFjMydcbiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpXG4gICAgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4Jztcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogaW4gY29yZS1qc0A0LCBtb3ZlIC9tb2R1bGVzLyBkZXBlbmRlbmNpZXMgdG8gcHVibGljIGVudHJpZXMgZm9yIGJldHRlciBvcHRpbWl6YXRpb24gYnkgdG9vbHMgbGlrZSBgcHJlc2V0LWVudmBcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIFVTRV9OQVRJVkVfVVJMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS11cmwnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3InKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBhcnJheVNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVVJMX1NFQVJDSF9QQVJBTVMgPSAnVVJMU2VhcmNoUGFyYW1zJztcbnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TKTtcbnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7XG5cbnZhciBuJEZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBOJFJlcXVlc3QgPSBnZXRCdWlsdEluKCdSZXF1ZXN0Jyk7XG52YXIgSGVhZGVycyA9IGdldEJ1aWx0SW4oJ0hlYWRlcnMnKTtcbnZhciBSZXF1ZXN0UHJvdG90eXBlID0gTiRSZXF1ZXN0ICYmIE4kUmVxdWVzdC5wcm90b3R5cGU7XG52YXIgSGVhZGVyc1Byb3RvdHlwZSA9IEhlYWRlcnMgJiYgSGVhZGVycy5wcm90b3R5cGU7XG52YXIgUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRlY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5kZWNvZGVVUklDb21wb25lbnQ7XG52YXIgZW5jb2RlVVJJQ29tcG9uZW50ID0gZ2xvYmFsLmVuY29kZVVSSUNvbXBvbmVudDtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpO1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBwbHVzID0gL1xcKy9nO1xudmFyIHNlcXVlbmNlcyA9IEFycmF5KDQpO1xuXG52YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gIHJldHVybiBzZXF1ZW5jZXNbYnl0ZXMgLSAxXSB8fCAoc2VxdWVuY2VzW2J5dGVzIC0gMV0gPSBSZWdFeHAoJygoPzolW1xcXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpO1xufTtcblxudmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gc2VxdWVuY2U7XG4gIH1cbn07XG5cbnZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gcmVwbGFjZShpdCwgcGx1cywgJyAnKTtcbiAgdmFyIGJ5dGVzID0gNDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2hpbGUgKGJ5dGVzKSB7XG4gICAgICByZXN1bHQgPSByZXBsYWNlKHJlc3VsdCwgcGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxudmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZztcblxudmFyIHJlcGxhY2VtZW50cyA9IHtcbiAgJyEnOiAnJTIxJyxcbiAgXCInXCI6ICclMjcnLFxuICAnKCc6ICclMjgnLFxuICAnKSc6ICclMjknLFxuICAnfic6ICclN0UnLFxuICAnJTIwJzogJysnXG59O1xuXG52YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgcmV0dXJuIHJlcGxhY2VtZW50c1ttYXRjaF07XG59O1xuXG52YXIgc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiByZXBsYWNlKGVuY29kZVVSSUNvbXBvbmVudChpdCksIGZpbmQsIHJlcGxhY2VyKTtcbn07XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SLFxuICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksXG4gICAga2luZDoga2luZFxuICB9KTtcbn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTtcbiAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTtcbiAgfSByZXR1cm4gc3RlcDtcbn0sIHRydWUpO1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zU3RhdGUgPSBmdW5jdGlvbiAoaW5pdCkge1xuICB0aGlzLmVudHJpZXMgPSBbXTtcbiAgdGhpcy51cmwgPSBudWxsO1xuXG4gIGlmIChpbml0ICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHRoaXMucGFyc2VPYmplY3QoaW5pdCk7XG4gICAgZWxzZSB0aGlzLnBhcnNlUXVlcnkodHlwZW9mIGluaXQgPT0gJ3N0cmluZycgPyBjaGFyQXQoaW5pdCwgMCkgPT09ICc/JyA/IHN0cmluZ1NsaWNlKGluaXQsIDEpIDogaW5pdCA6ICR0b1N0cmluZyhpbml0KSk7XG4gIH1cbn07XG5cblVSTFNlYXJjaFBhcmFtc1N0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsXG4gIGJpbmRVUkw6IGZ1bmN0aW9uICh1cmwpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9LFxuICBwYXJzZU9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iamVjdCk7XG4gICAgdmFyIGl0ZXJhdG9yLCBuZXh0LCBzdGVwLCBlbnRyeUl0ZXJhdG9yLCBlbnRyeU5leHQsIGZpcnN0LCBzZWNvbmQ7XG5cbiAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgIGl0ZXJhdG9yID0gZ2V0SXRlcmF0b3Iob2JqZWN0LCBpdGVyYXRvck1ldGhvZCk7XG4gICAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgICBlbnRyeUl0ZXJhdG9yID0gZ2V0SXRlcmF0b3IoYW5PYmplY3Qoc3RlcC52YWx1ZSkpO1xuICAgICAgICBlbnRyeU5leHQgPSBlbnRyeUl0ZXJhdG9yLm5leHQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAoZmlyc3QgPSBjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAoc2Vjb25kID0gY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8XG4gICAgICAgICAgIWNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKS5kb25lXG4gICAgICAgICkgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7XG4gICAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleTogJHRvU3RyaW5nKGZpcnN0LnZhbHVlKSwgdmFsdWU6ICR0b1N0cmluZyhzZWNvbmQudmFsdWUpIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBpZiAoaGFzT3duKG9iamVjdCwga2V5KSkge1xuICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiAkdG9TdHJpbmcob2JqZWN0W2tleV0pIH0pO1xuICAgIH1cbiAgfSxcbiAgcGFyc2VRdWVyeTogZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwbGl0KHF1ZXJ5LCAnJicpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBhdHRyaWJ1dGUsIGVudHJ5O1xuICAgICAgd2hpbGUgKGluZGV4IDwgYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpbmRleCsrXTtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGgpIHtcbiAgICAgICAgICBlbnRyeSA9IHNwbGl0KGF0dHJpYnV0ZSwgJz0nKTtcbiAgICAgICAgICBwdXNoKHRoaXMuZW50cmllcywge1xuICAgICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShzaGlmdChlbnRyeSkpLFxuICAgICAgICAgICAgdmFsdWU6IGRlc2VyaWFsaXplKGpvaW4oZW50cnksICc9JykpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgcHVzaChyZXN1bHQsIHNlcmlhbGl6ZShlbnRyeS5rZXkpICsgJz0nICsgc2VyaWFsaXplKGVudHJ5LnZhbHVlKSk7XG4gICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcmJyk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwO1xuICAgIHRoaXMucGFyc2VRdWVyeSh0aGlzLnVybC5xdWVyeSk7XG4gIH0sXG4gIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnVybCkgdGhpcy51cmwudXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXNgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS11cmxzZWFyY2hwYXJhbXNcbnZhciBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTFNlYXJjaFBhcmFtcygvKiBpbml0ICovKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlKTtcbiAgdmFyIGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCBuZXcgVVJMU2VhcmNoUGFyYW1zU3RhdGUoaW5pdCkpO1xufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSA9IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxucmVkZWZpbmVBbGwoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCB7XG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmFwcGVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1hcHBlbmRcbiAgYXBwZW5kOiBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAyKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHB1c2goc3RhdGUuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhuYW1lKSwgdmFsdWU6ICR0b1N0cmluZyh2YWx1ZSkgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1kZWxldGVcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHNwbGljZShlbnRyaWVzLCBpbmRleCwgMSk7XG4gICAgICBlbHNlIGluZGV4Kys7XG4gICAgfVxuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0XG4gIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZ2V0QWxsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldGFsbFxuICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSBwdXNoKHJlc3VsdCwgZW50cmllc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5oYXNgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtaGFzXG4gIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4KytdLmtleSA9PT0ga2V5KSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc2V0XG4gIHNldDogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7XG4gICAgdmFyIGZvdW5kID0gZmFsc2U7XG4gICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTtcbiAgICB2YXIgdmFsID0gJHRvU3RyaW5nKHZhbHVlKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkge1xuICAgICAgICBpZiAoZm91bmQpIHNwbGljZShlbnRyaWVzLCBpbmRleC0tLCAxKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGVudHJ5LnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIHB1c2goZW50cmllcywgeyBrZXk6IGtleSwgdmFsdWU6IHZhbCB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zb3J0XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTtcbiAgICBhcnJheVNvcnQoc3RhdGUuZW50cmllcywgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLmtleSA+IGIua2V5ID8gMSA6IC0xO1xuICAgIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2RcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjayAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoY2FsbGJhY2ssIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBlbnRyeTtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgZW50cnkgPSBlbnRyaWVzW2luZGV4KytdO1xuICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTtcbiAgICB9XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2tleXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUudmFsdWVzYCBtZXRob2RcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IodGhpcywgJ2VudHJpZXMnKTtcbiAgfVxufSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG5yZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIElURVJBVE9SLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUuZW50cmllcywgeyBuYW1lOiAnZW50cmllcycgfSk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsc2VhcmNocGFyYW1zLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbnNldFRvU3RyaW5nVGFnKFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIVVTRV9OQVRJVkVfVVJMIH0sIHtcbiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvclxufSk7XG5cbi8vIFdyYXAgYGZldGNoYCBhbmQgYFJlcXVlc3RgIGZvciBjb3JyZWN0IHdvcmsgd2l0aCBwb2x5ZmlsbGVkIGBVUkxTZWFyY2hQYXJhbXNgXG5pZiAoIVVTRV9OQVRJVkVfVVJMICYmIGlzQ2FsbGFibGUoSGVhZGVycykpIHtcbiAgdmFyIGhlYWRlcnNIYXMgPSB1bmN1cnJ5VGhpcyhIZWFkZXJzUHJvdG90eXBlLmhhcyk7XG4gIHZhciBoZWFkZXJzU2V0ID0gdW5jdXJyeVRoaXMoSGVhZGVyc1Byb3RvdHlwZS5zZXQpO1xuXG4gIHZhciB3cmFwUmVxdWVzdE9wdGlvbnMgPSBmdW5jdGlvbiAoaW5pdCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkge1xuICAgICAgdmFyIGJvZHkgPSBpbml0LmJvZHk7XG4gICAgICB2YXIgaGVhZGVycztcbiAgICAgIGlmIChjbGFzc29mKGJvZHkpID09PSBVUkxfU0VBUkNIX1BBUkFNUykge1xuICAgICAgICBoZWFkZXJzID0gaW5pdC5oZWFkZXJzID8gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKSA6IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgIGlmICghaGVhZGVyc0hhcyhoZWFkZXJzLCAnY29udGVudC10eXBlJykpIHtcbiAgICAgICAgICBoZWFkZXJzU2V0KGhlYWRlcnMsICdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlKGluaXQsIHtcbiAgICAgICAgICBib2R5OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgJHRvU3RyaW5nKGJvZHkpKSxcbiAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSByZXR1cm4gaW5pdDtcbiAgfTtcblxuICBpZiAoaXNDYWxsYWJsZShuJEZldGNoKSkge1xuICAgICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBuJEZldGNoKGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzQ2FsbGFibGUoTiRSZXF1ZXN0KSkge1xuICAgIHZhciBSZXF1ZXN0Q29uc3RydWN0b3IgPSBmdW5jdGlvbiBSZXF1ZXN0KGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgYW5JbnN0YW5jZSh0aGlzLCBSZXF1ZXN0UHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTiRSZXF1ZXN0KGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pO1xuICAgIH07XG5cbiAgICBSZXF1ZXN0UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVxdWVzdENvbnN0cnVjdG9yO1xuICAgIFJlcXVlc3RDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBSZXF1ZXN0UHJvdG90eXBlO1xuXG4gICAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIFJlcXVlc3Q6IFJlcXVlc3RDb25zdHJ1Y3RvclxuICAgIH0pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLFxuICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZVxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLnVuc2NvcGFibGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmVycm9yLmNhdXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmVycm9yLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hZ2dyZWdhdGUtZXJyb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYWdncmVnYXRlLWVycm9yLmNhdXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuZmxhdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnNwbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQtbWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuaXMtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUuZ2V0LXllYXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS5zZXQteWVhcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLWdtdC1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5lc2NhcGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5nbG9iYWwtdGhpcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnN0cmluZ2lmeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5qc29uLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubWF0aC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm51bWJlci50by1leHBvbmVudGlhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QuZnJvbS1lbnRyaWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0Lmhhcy1vd24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmFsbC1zZXR0bGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYW55Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVmbGVjdC50by1zdHJpbmctdGFnJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZG90LWFsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZXhlYycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLnN0aWNreScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAudGVzdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYXQtYWx0ZXJuYXRpdmUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3Vic3RyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy50cmltLWVuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1zdGFydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc3ViYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy50eXBlZC1hcnJheS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMudW5lc2NhcGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmF0b2InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmJ0b2EnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnN0YWNrJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20tZXhjZXB0aW9uLnRvLXN0cmluZy10YWcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIucXVldWUtbWljcm90YXNrJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5zdHJ1Y3R1cmVkLWNsb25lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBuYXRpdmVPYmplY3RDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xuXG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gJFN5bWJvbCAmJiAkU3ltYm9sW1BST1RPVFlQRV07XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG52YXIgJHN0cmluZ2lmeSA9IGdldEJ1aWx0SW4oJ0pTT04nLCAnc3RyaW5naWZ5Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZjtcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvdHlwZVN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoU3ltYm9sUHJvdG90eXBlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzT3duKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNPd24oTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwoJHByb3BlcnR5SXNFbnVtZXJhYmxlLCBwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IGNhbGwobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXNPd24odGhpcywgUCkgfHwgIWhhc093bihBbGxTeW1ib2xzLCBQKSB8fCBoYXNPd24odGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF1cbiAgICA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpKSBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHB1c2gocmVzdWx0LCBBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAkdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBjYWxsKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhc093bih0aGlzLCBISURERU4pICYmIGhhc093bih0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcblxuICByZWRlZmluZShTeW1ib2xQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0aWVzO1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7XG4gIH07XG5cbiAgaWYgKERFU0NSSVBUT1JTKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtU3ltYm9sLWRlc2NyaXB0aW9uXG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoU3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5kZXNjcmlwdGlvbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIUlTX1BVUkUpIHtcbiAgICAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgd3JhcDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIU5BVElWRV9TWU1CT0wgfSwge1xuICBTeW1ib2w6ICRTeW1ib2xcbn0pO1xuXG4kZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlZmluZVdlbGxLbm93blN5bWJvbChuYW1lKTtcbn0pO1xuXG4kKHsgdGFyZ2V0OiBTWU1CT0wsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmZvclxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBzdHJpbmcgPSAkdG9TdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzT3duKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woc3RyaW5nKTtcbiAgICBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ10gPSBzeW1ib2w7XG4gICAgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1ib2xdID0gc3RyaW5nO1xuICAgIHJldHVybiBzeW1ib2w7XG4gIH0sXG4gIC8vIGBTeW1ib2wua2V5Rm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wua2V5Zm9yXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gZmFsc2U7IH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvclxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eXN5bWJvbHNcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gQ2hyb21lIDM4IGFuZCAzOSBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgZmFpbHMgb24gcHJpbWl0aXZlc1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzQ0M1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogZmFpbHMoZnVuY3Rpb24gKCkgeyBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsgfSkgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZih0b09iamVjdChpdCkpO1xuICB9XG59KTtcblxuLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2QgYmVoYXZpb3Igd2l0aCBzeW1ib2xzXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24uc3RyaW5naWZ5XG5pZiAoJHN0cmluZ2lmeSkge1xuICB2YXIgRk9SQ0VEX0pTT05fU1RSSU5HSUZZID0gIU5BVElWRV9TWU1CT0wgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzeW1ib2wgPSAkU3ltYm9sKCk7XG4gICAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAgICAgfHwgJHN0cmluZ2lmeSh7IGE6IHN5bWJvbCB9KSAhPSAne30nXG4gICAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgICAgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JztcbiAgfSk7XG5cbiAgJCh7IHRhcmdldDogJ0pTT04nLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWSB9LCB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCwgcmVwbGFjZXIsIHNwYWNlKSB7XG4gICAgICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgICAgIHZhciAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQ2FsbGFibGUoJHJlcGxhY2VyKSkgdmFsdWUgPSBjYWxsKCRyZXBsYWNlciwgdGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgICAgcmV0dXJuIGFwcGx5KCRzdHJpbmdpZnksIG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlLnZhbHVlT2Y7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgLmxlbmd0aFxuICByZWRlZmluZShTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAvLyBUT0RPOiBpbXByb3ZlIGhpbnQgbG9naWNcbiAgICByZXR1cm4gY2FsbCh2YWx1ZU9mLCB0aGlzKTtcbiAgfSk7XG59XG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCBTWU1CT0wpO1xuXG5oaWRkZW5LZXlzW0hJRERFTl0gPSB0cnVlO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgZWxzZSBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xuXG52YXIgTmF0aXZlU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSBOYXRpdmVTeW1ib2wgJiYgTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcblxuaWYgKERFU0NSSVBUT1JTICYmIGlzQ2FsbGFibGUoTmF0aXZlU3ltYm9sKSAmJiAoISgnZGVzY3JpcHRpb24nIGluIFN5bWJvbFByb3RvdHlwZSkgfHxcbiAgLy8gU2FmYXJpIDEyIGJ1Z1xuICBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkXG4pKSB7XG4gIHZhciBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUgPSB7fTtcbiAgLy8gd3JhcCBTeW1ib2wgY29uc3RydWN0b3IgZm9yIGNvcnJlY3Qgd29yayB3aXRoIHVuZGVmaW5lZCBkZXNjcmlwdGlvblxuICB2YXIgU3ltYm9sV3JhcHBlciA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRvU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IGlzUHJvdG90eXBlT2YoU3ltYm9sUHJvdG90eXBlLCB0aGlzKVxuICAgICAgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKVxuICAgICAgLy8gaW4gRWRnZSAxMywgU3RyaW5nKFN5bWJvbCh1bmRlZmluZWQpKSA9PT0gJ1N5bWJvbCh1bmRlZmluZWQpJ1xuICAgICAgOiBkZXNjcmlwdGlvbiA9PT0gdW5kZWZpbmVkID8gTmF0aXZlU3ltYm9sKCkgOiBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pO1xuICAgIGlmIChkZXNjcmlwdGlvbiA9PT0gJycpIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZVtyZXN1bHRdID0gdHJ1ZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgU3ltYm9sV3JhcHBlci5wcm90b3R5cGUgPSBTeW1ib2xQcm90b3R5cGU7XG4gIFN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7XG5cbiAgdmFyIE5BVElWRV9TWU1CT0wgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhTeW1ib2xQcm90b3R5cGUudG9TdHJpbmcpO1xuICB2YXIgc3ltYm9sVmFsdWVPZiA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mKTtcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIHZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG4gIHZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuICBkZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSBzeW1ib2xWYWx1ZU9mKHRoaXMpO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbFRvU3RyaW5nKHN5bWJvbCk7XG4gICAgICBpZiAoaGFzT3duKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIGRlc2MgPSBOQVRJVkVfU1lNQk9MID8gc3RyaW5nU2xpY2Uoc3RyaW5nLCA3LCAtMSkgOiByZXBsYWNlKHN0cmluZywgcmVnZXhwLCAnJDEnKTtcbiAgICAgIHJldHVybiBkZXNjID09PSAnJyA/IHVuZGVmaW5lZCA6IGRlc2M7XG4gICAgfVxuICB9KTtcblxuICAkKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuYXN5bmNJdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmFzeW5jaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnYXN5bmNJdGVyYXRvcicpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5oYXNJbnN0YW5jZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmhhc2luc3RhbmNlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ2hhc0luc3RhbmNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLmlzQ29uY2F0U3ByZWFkYWJsZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmlzY29uY2F0c3ByZWFkYWJsZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuaXRlcmF0b3JgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pdGVyYXRvclxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5tYXRjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLm1hdGNoXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLm1hdGNoQWxsYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wubWF0Y2hhbGxcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2hBbGwnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wucmVwbGFjZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnJlcGxhY2VcbmRlZmluZVdlbGxLbm93blN5bWJvbCgncmVwbGFjZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC5zZWFyY2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zZWFyY2hcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc2VhcmNoJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnNwZWNpZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGVjaWVzXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wuc3BsaXRgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5zcGxpdFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGxpdCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuLy8gYFN5bWJvbC50b1ByaW1pdGl2ZWAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnRvcHJpbWl0aXZlXG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9zdHJpbmd0YWdcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLXdlbGwta25vd24tc3ltYm9sJyk7XG5cbi8vIGBTeW1ib2wudW5zY29wYWJsZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC51bnNjb3BhYmxlc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGZ1bmN0aW9ucyBgLmxlbmd0aGAgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dyYXAtZXJyb3ItY29uc3RydWN0b3Itd2l0aC1jYXVzZScpO1xuXG52YXIgV0VCX0FTU0VNQkxZID0gJ1dlYkFzc2VtYmx5JztcbnZhciBXZWJBc3NlbWJseSA9IGdsb2JhbFtXRUJfQVNTRU1CTFldO1xuXG52YXIgRk9SQ0VEID0gRXJyb3IoJ2UnLCB7IGNhdXNlOiA3IH0pLmNhdXNlICE9PSA3O1xuXG52YXIgZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIgPSBmdW5jdGlvbiAoRVJST1JfTkFNRSwgd3JhcHBlcikge1xuICB2YXIgTyA9IHt9O1xuICBPW0VSUk9SX05BTUVdID0gd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UoRVJST1JfTkFNRSwgd3JhcHBlciwgRk9SQ0VEKTtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwgTyk7XG59O1xuXG52YXIgZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlciA9IGZ1bmN0aW9uIChFUlJPUl9OQU1FLCB3cmFwcGVyKSB7XG4gIGlmIChXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseVtFUlJPUl9OQU1FXSkge1xuICAgIHZhciBPID0ge307XG4gICAgT1tFUlJPUl9OQU1FXSA9IHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlKFdFQl9BU1NFTUJMWSArICcuJyArIEVSUk9SX05BTUUsIHdyYXBwZXIsIEZPUkNFRCk7XG4gICAgJCh7IHRhcmdldDogV0VCX0FTU0VNQkxZLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCBPKTtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZXJyb3ItY2F1c2VcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignRXZhbEVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEV2YWxFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignUmFuZ2VFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSYW5nZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydEdsb2JhbEVycm9yQ2F1c2VXcmFwcGVyKCdSZWZlcmVuY2VFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBSZWZlcmVuY2VFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRHbG9iYWxFcnJvckNhdXNlV3JhcHBlcignU3ludGF4RXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gU3ludGF4RXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1R5cGVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBUeXBlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0R2xvYmFsRXJyb3JDYXVzZVdyYXBwZXIoJ1VSSUVycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVSSUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbmV4cG9ydFdlYkFzc2VtYmx5RXJyb3JDYXVzZVdyYXBwZXIoJ0NvbXBpbGVFcnJvcicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBDb21waWxlRXJyb3IobWVzc2FnZSkgeyByZXR1cm4gYXBwbHkoaW5pdCwgdGhpcywgYXJndW1lbnRzKTsgfTtcbn0pO1xuZXhwb3J0V2ViQXNzZW1ibHlFcnJvckNhdXNlV3JhcHBlcignTGlua0Vycm9yJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIExpbmtFcnJvcihtZXNzYWdlKSB7IHJldHVybiBhcHBseShpbml0LCB0aGlzLCBhcmd1bWVudHMpOyB9O1xufSk7XG5leHBvcnRXZWJBc3NlbWJseUVycm9yQ2F1c2VXcmFwcGVyKCdSdW50aW1lRXJyb3InLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gUnVudGltZUVycm9yKG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG59KTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGVycm9yVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3ItdG8tc3RyaW5nJyk7XG5cbnZhciBFcnJvclByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZTtcblxuLy8gYEVycm9yLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGZpeFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1lcnJvci5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChFcnJvclByb3RvdHlwZS50b1N0cmluZyAhPT0gZXJyb3JUb1N0cmluZykge1xuICByZWRlZmluZShFcnJvclByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZXJyb3JUb1N0cmluZyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY2xlYXJFcnJvclN0YWNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsZWFyLWVycm9yLXN0YWNrJyk7XG52YXIgaW5zdGFsbEVycm9yQ2F1c2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zdGFsbC1lcnJvci1jYXVzZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBFUlJPUl9TVEFDS19JTlNUQUxMQUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lcnJvci1zdGFjay1pbnN0YWxsYWJsZScpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciBwdXNoID0gW10ucHVzaDtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSAvKiAsIG9wdGlvbnMgKi8pIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGlzSW5zdGFuY2UgPSBpc1Byb3RvdHlwZU9mKEFnZ3JlZ2F0ZUVycm9yUHJvdG90eXBlLCB0aGlzKTtcbiAgdmFyIHRoYXQ7XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIHRoYXQgPSBzZXRQcm90b3R5cGVPZihuZXcgRXJyb3IoKSwgaXNJbnN0YW5jZSA/IGdldFByb3RvdHlwZU9mKHRoaXMpIDogQWdncmVnYXRlRXJyb3JQcm90b3R5cGUpO1xuICB9IGVsc2Uge1xuICAgIHRoYXQgPSBpc0luc3RhbmNlID8gdGhpcyA6IGNyZWF0ZShBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSk7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsIFRPX1NUUklOR19UQUcsICdFcnJvcicpO1xuICB9XG4gIGlmIChtZXNzYWdlICE9PSB1bmRlZmluZWQpIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0aGF0LCAnbWVzc2FnZScsIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KG1lc3NhZ2UpKTtcbiAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGhhdCwgJ3N0YWNrJywgY2xlYXJFcnJvclN0YWNrKHRoYXQuc3RhY2ssIDEpKTtcbiAgaW5zdGFsbEVycm9yQ2F1c2UodGhhdCwgb3B0aW9ucyk7XG4gIHZhciBlcnJvcnNBcnJheSA9IFtdO1xuICBpdGVyYXRlKGVycm9ycywgcHVzaCwgeyB0aGF0OiBlcnJvcnNBcnJheSB9KTtcbiAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdlcnJvcnMnLCBlcnJvcnNBcnJheSk7XG4gIHJldHVybiB0aGF0O1xufTtcblxuaWYgKHNldFByb3RvdHlwZU9mKSBzZXRQcm90b3R5cGVPZigkQWdncmVnYXRlRXJyb3IsIEVycm9yKTtcbmVsc2UgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcygkQWdncmVnYXRlRXJyb3IsIEVycm9yLCB7IG5hbWU6IHRydWUgfSk7XG5cbnZhciBBZ2dyZWdhdGVFcnJvclByb3RvdHlwZSA9ICRBZ2dyZWdhdGVFcnJvci5wcm90b3R5cGUgPSBjcmVhdGUoRXJyb3IucHJvdG90eXBlLCB7XG4gIGNvbnN0cnVjdG9yOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgJEFnZ3JlZ2F0ZUVycm9yKSxcbiAgbWVzc2FnZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICcnKSxcbiAgbmFtZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICdBZ2dyZWdhdGVFcnJvcicpXG59KTtcblxuLy8gYEFnZ3JlZ2F0ZUVycm9yYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZ2dyZWdhdGUtZXJyb3ItY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICBBZ2dyZWdhdGVFcnJvcjogJEFnZ3JlZ2F0ZUVycm9yXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdyYXBFcnJvckNvbnN0cnVjdG9yV2l0aENhdXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dyYXAtZXJyb3ItY29uc3RydWN0b3Itd2l0aC1jYXVzZScpO1xuXG52YXIgQUdHUkVHQVRFX0VSUk9SID0gJ0FnZ3JlZ2F0ZUVycm9yJztcbnZhciAkQWdncmVnYXRlRXJyb3IgPSBnZXRCdWlsdEluKEFHR1JFR0FURV9FUlJPUik7XG52YXIgRk9SQ0VEID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRBZ2dyZWdhdGVFcnJvcihbMV0pLmVycm9yc1swXSAhPT0gMTtcbn0pICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRBZ2dyZWdhdGVFcnJvcihbMV0sIEFHR1JFR0FURV9FUlJPUiwgeyBjYXVzZTogNyB9KS5jYXVzZSAhPT0gNztcbn0pO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBBZ2dyZWdhdGVFcnJvcjogd3JhcEVycm9yQ29uc3RydWN0b3JXaXRoQ2F1c2UoQUdHUkVHQVRFX0VSUk9SLCBmdW5jdGlvbiAoaW5pdCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgZnVuY3Rpb25zIGAubGVuZ3RoYFxuICAgIHJldHVybiBmdW5jdGlvbiBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpIHsgcmV0dXJuIGFwcGx5KGluaXQsIHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIH0sIEZPUkNFRCwgdHJ1ZSlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBhdDogZnVuY3Rpb24gYXQoaW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgcmVsYXRpdmVJbmRleCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICAgIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gICAgcmV0dXJuIChrIDwgMCB8fCBrID49IGxlbikgPyB1bmRlZmluZWQgOiBPW2tdO1xuICB9XG59KTtcblxuYWRkVG9VbnNjb3BhYmxlcygnYXQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykge1xuICBpZiAoIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzcHJlYWRhYmxlID0gT1tJU19DT05DQVRfU1BSRUFEQUJMRV07XG4gIHJldHVybiBzcHJlYWRhYmxlICE9PSB1bmRlZmluZWQgPyAhIXNwcmVhZGFibGUgOiBpc0FycmF5KE8pO1xufTtcblxudmFyIEZPUkNFRCA9ICFJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUIHx8ICFTUEVDSUVTX1NVUFBPUlQ7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChhcmcpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIHZhciBuID0gMDtcbiAgICB2YXIgaSwgaywgbGVuZ3RoLCBsZW4sIEU7XG4gICAgZm9yIChpID0gLTEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTtcbiAgICAgIGlmIChpc0NvbmNhdFNwcmVhZGFibGUoRSkpIHtcbiAgICAgICAgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoRSk7XG4gICAgICAgIGlmIChuICsgbGVuID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuID49IE1BWF9TQUZFX0lOVEVHRVIpIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpO1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShBLCBuKyssIEUpO1xuICAgICAgfVxuICAgIH1cbiAgICBBLmxlbmd0aCA9IG47XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY29weVdpdGhpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1jb3B5LXdpdGhpbicpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvcHlXaXRoaW46IGNvcHlXaXRoaW5cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnZXZlcnknKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfSwge1xuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsbFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmaWxsOiBmaWxsXG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkQgPSAnZmluZCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkQgaW4gW10pIEFycmF5KDEpW0ZJTkRdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB9LCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZEluZGV4O1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbnZhciBGSU5EX0lOREVYID0gJ2ZpbmRJbmRleCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkRfSU5ERVggaW4gW10pIEFycmF5KDEpW0ZJTkRfSU5ERVhdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRpbmRleFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogU0tJUFNfSE9MRVMgfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORF9JTkRFWCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmxhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mbGF0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZsYXQ6IGZ1bmN0aW9uIGZsYXQoLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBzb3VyY2VMZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBBLmxlbmd0aCA9IGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlck9ySW5maW5pdHkoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mbGF0TWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRtYXBcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBBO1xuICAgIGFDYWxsYWJsZShjYWxsYmFja2ZuKTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWZvcmVhY2ggLS0gc2FmZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LWZyb20gLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUtaW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgJEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgdW4kSW5kZXhPZiA9IHVuY3VycnlUaGlzKFtdLmluZGV4T2YpO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhdW4kSW5kZXhPZiAmJiAxIC8gdW4kSW5kZXhPZihbMV0sIDEsIC0wKSA8IDA7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2luZGV4T2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgdmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IHVuJEluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB8fCAwXG4gICAgICA6ICRJbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG4vLyBgQXJyYXkuaXNBcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmlzYXJyYXlcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUgfSwge1xuICBpc0FycmF5OiBpc0FycmF5XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIHVuJEpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRVMzX1NUUklOR1MgfHwgIVNUUklDVF9NRVRIT0QgfSwge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiB1biRKb2luKHRvSW5kZXhlZE9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxhc3RJbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogbGFzdEluZGV4T2YgIT09IFtdLmxhc3RJbmRleE9mIH0sIHtcbiAgbGFzdEluZGV4T2Y6IGxhc3RJbmRleE9mXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdtYXAnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4vLyB3aXRoIGFkZGluZyBzdXBwb3J0IG9mIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIUhBU19TUEVDSUVTX1NVUFBPUlQgfSwge1xuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcblxudmFyIElTTlRfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KTtcblxuLy8gYEFycmF5Lm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkub2Zcbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTTlRfR0VORVJJQyB9LCB7XG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChpc0NvbnN0cnVjdG9yKHRoaXMpID8gdGhpcyA6IEFycmF5KShhcmd1bWVudHNMZW5ndGgpO1xuICAgIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYXJndW1lbnRzTGVuZ3RoO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIENIUk9NRV9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ3JlZHVjZScpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJlZHVjZVxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogIVNUUklDVF9NRVRIT0QgfHwgQ0hST01FX0JVRyB9LCB7XG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBDSFJPTUVfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2VSaWdodCcpO1xuLy8gQ2hyb21lIDgwLTgyIGhhcyBhIGNyaXRpY2FsIGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0OTk4MlxudmFyIENIUk9NRV9CVUcgPSAhSVNfTk9ERSAmJiBDSFJPTUVfVkVSU0lPTiA+IDc5ICYmIENIUk9NRV9WRVJTSU9OIDwgODM7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFTVFJJQ1RfTUVUSE9EIHx8IENIUk9NRV9CVUcgfSwge1xuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlUmlnaHQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcblxudmFyIHVuJFJldmVyc2UgPSB1bmN1cnJ5VGhpcyhbXS5yZXZlcnNlKTtcbnZhciB0ZXN0ID0gWzEsIDJdO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnJldmVyc2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmV2ZXJzZVxuLy8gZml4IGZvciBTYWZhcmkgMTIuMCBidWdcbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODg3OTRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFN0cmluZyh0ZXN0KSA9PT0gU3RyaW5nKHRlc3QucmV2ZXJzZSgpKSB9LCB7XG4gIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtYXNzaWduIC0tIGRpcnR5IGhhY2tcbiAgICBpZiAoaXNBcnJheSh0aGlzKSkgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gdW4kUmV2ZXJzZSh0aGlzKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB1biRTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgQXJyYXkgPSBnbG9iYWwuQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmIChpc0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yKSAmJiAoQ29uc3RydWN0b3IgPT09IEFycmF5IHx8IGlzQXJyYXkoQ29uc3RydWN0b3IucHJvdG90eXBlKSkpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KENvbnN0cnVjdG9yKSkge1xuICAgICAgICBDb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yW1NQRUNJRVNdO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IgPT09IG51bGwpIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1biRTbGljZShPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdzb21lJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGludGVybmFsU29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgRkYgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24nKTtcbnZhciBJRV9PUl9FREdFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlJyk7XG52YXIgVjggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbnZhciB0ZXN0ID0gW107XG52YXIgdW4kU29ydCA9IHVuY3VycnlUaGlzKHRlc3Quc29ydCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKHRlc3QucHVzaCk7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3MDtcbiAgaWYgKEZGICYmIEZGID4gMykgcmV0dXJuO1xuICBpZiAoSUVfT1JfRURHRSkgcmV0dXJuIHRydWU7XG4gIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDM7XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY29kZSwgY2hyLCB2YWx1ZSwgaW5kZXg7XG5cbiAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgd2l0aCBtb3JlIDUxMiBlbGVtZW50cyAoQ2hha3JhIGFuZCBvbGQgVjggZmFpbHMgb25seSBpbiB0aGlzIGNhc2UpXG4gIGZvciAoY29kZSA9IDY1OyBjb2RlIDwgNzY7IGNvZGUrKykge1xuICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgNjY6IGNhc2UgNjk6IGNhc2UgNzA6IGNhc2UgNzI6IHZhbHVlID0gMzsgYnJlYWs7XG4gICAgICBjYXNlIDY4OiBjYXNlIDcxOiB2YWx1ZSA9IDQ7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogdmFsdWUgPSAyO1xuICAgIH1cblxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ3OyBpbmRleCsrKSB7XG4gICAgICB0ZXN0LnB1c2goeyBrOiBjaHIgKyBpbmRleCwgdjogdmFsdWUgfSk7XG4gICAgfVxuICB9XG5cbiAgdGVzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiLnYgLSBhLnY7IH0pO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRlc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gdGVzdFtpbmRleF0uay5jaGFyQXQoMCk7XG4gICAgaWYgKHJlc3VsdC5jaGFyQXQocmVzdWx0Lmxlbmd0aCAtIDEpICE9PSBjaHIpIHJlc3VsdCArPSBjaHI7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICE9PSAnREdCRUZIQUNJSksnO1xufSk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgIVNUUklDVF9NRVRIT0QgfHwgIVNUQUJMRV9TT1JUO1xuXG52YXIgZ2V0U29ydENvbXBhcmUgPSBmdW5jdGlvbiAoY29tcGFyZWZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHJldHVybiAtMTtcbiAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMTtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHgpID4gdG9TdHJpbmcoeSkgPyAxIDogLTE7XG4gIH07XG59O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuXG4gICAgdmFyIGFycmF5ID0gdG9PYmplY3QodGhpcyk7XG5cbiAgICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZCA/IHVuJFNvcnQoYXJyYXkpIDogdW4kU29ydChhcnJheSwgY29tcGFyZWZuKTtcblxuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHZhciBhcnJheUxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGFycmF5KTtcbiAgICB2YXIgaXRlbXNMZW5ndGgsIGluZGV4O1xuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpbmRleCBpbiBhcnJheSkgcHVzaChpdGVtcywgYXJyYXlbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFNvcnQoaXRlbXMsIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xuXG4gICAgaXRlbXNMZW5ndGggPSBpdGVtcy5sZW5ndGg7XG4gICAgaW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgaXRlbXNMZW5ndGgpIGFycmF5W2luZGV4XSA9IGl0ZW1zW2luZGV4KytdO1xuICAgIHdoaWxlIChpbmRleCA8IGFycmF5TGVuZ3RoKSBkZWxldGUgYXJyYXlbaW5kZXgrK107XG5cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbn0pO1xuIiwidmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcblxuLy8gYEFycmF5W0BAc3BlY2llc11gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtYXJyYXktQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NwbGljZScpO1xuXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gMHgxRkZGRkZGRkZGRkZGRjtcbnZhciBNQVhJTVVNX0FMTE9XRURfTEVOR1RIX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBsZW5ndGggZXhjZWVkZWQnO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyT3JJbmZpbml0eShkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGlmIChsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50ID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9MRU5HVEhfRVhDRUVERUQpO1xuICAgIH1cbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgICB9XG4gICAgICBmb3IgKGsgPSBsZW47IGsgPiBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50OyBrLS0pIGRlbGV0ZSBPW2sgLSAxXTtcbiAgICB9IGVsc2UgaWYgKGluc2VydENvdW50ID4gYWN0dWFsRGVsZXRlQ291bnQpIHtcbiAgICAgIGZvciAoayA9IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrID4gYWN0dWFsU3RhcnQ7IGstLSkge1xuICAgICAgICBmcm9tID0gayArIGFjdHVhbERlbGV0ZUNvdW50IC0gMTtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQgLSAxO1xuICAgICAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgTy5sZW5ndGggPSBsZW4gLSBhY3R1YWxEZWxldGVDb3VudCArIGluc2VydENvdW50O1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIi8vIHRoaXMgbWV0aG9kIHdhcyBhZGRlZCB0byB1bnNjb3BhYmxlcyBhZnRlciBpbXBsZW1lbnRhdGlvblxuLy8gaW4gcG9wdWxhciBlbmdpbmVzLCBzbyBpdCdzIG1vdmVkIHRvIGEgc2VwYXJhdGUgbW9kdWxlXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygnZmxhdCcpO1xuIiwiLy8gdGhpcyBtZXRob2Qgd2FzIGFkZGVkIHRvIHVuc2NvcGFibGVzIGFmdGVyIGltcGxlbWVudGF0aW9uXG4vLyBpbiBwb3B1bGFyIGVuZ2luZXMsIHNvIGl0J3MgbW92ZWQgdG8gYSBzZXBhcmF0ZSBtb2R1bGVcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmbGF0TWFwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xuXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBBcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyTW9kdWxlW0FSUkFZX0JVRkZFUl07XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcblxuLy8gYEFycmF5QnVmZmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBOYXRpdmVBcnJheUJ1ZmZlciAhPT0gQXJyYXlCdWZmZXIgfSwge1xuICBBcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXJcbn0pO1xuXG5zZXRTcGVjaWVzKEFSUkFZX0JVRkZFUik7XG4iLCIvLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMTjIgPSBNYXRoLkxOMjtcblxudmFyIHBhY2sgPSBmdW5jdGlvbiAobnVtYmVyLCBtYW50aXNzYUxlbmd0aCwgYnl0ZXMpIHtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG5cbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xuXG4vLyBgQXJyYXlCdWZmZXIuaXNWaWV3YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIuaXN2aWV3XG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIHtcbiAgaXNWaWV3OiBBcnJheUJ1ZmZlclZpZXdDb3JlLmlzVmlld1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIEFycmF5QnVmZmVyTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBBcnJheUJ1ZmZlciA9IEFycmF5QnVmZmVyTW9kdWxlLkFycmF5QnVmZmVyO1xudmFyIERhdGFWaWV3ID0gQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXc7XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSBEYXRhVmlldy5wcm90b3R5cGU7XG52YXIgdW4kQXJyYXlCdWZmZXJTbGljZSA9IHVuY3VycnlUaGlzKEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSk7XG52YXIgZ2V0VWludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5nZXRVaW50OCk7XG52YXIgc2V0VWludDggPSB1bmN1cnJ5VGhpcyhEYXRhVmlld1Byb3RvdHlwZS5zZXRVaW50OCk7XG5cbnZhciBJTkNPUlJFQ1RfU0xJQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhbmV3IEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pO1xuXG4vLyBgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlidWZmZXIucHJvdG90eXBlLnNsaWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXlCdWZmZXInLCBwcm90bzogdHJ1ZSwgdW5zYWZlOiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9TTElDRSB9LCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgaWYgKHVuJEFycmF5QnVmZmVyU2xpY2UgJiYgZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1biRBcnJheUJ1ZmZlclNsaWNlKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xuICAgIHZhciB2aWV3U291cmNlID0gbmV3IERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VGFyZ2V0ID0gbmV3IERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcbiAgICAgIHNldFVpbnQ4KHZpZXdUYXJnZXQsIGluZGV4KyssIGdldFVpbnQ4KHZpZXdTb3VyY2UsIGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbmF0aXZlJyk7XG5cbi8vIGBEYXRhVmlld2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0YXZpZXctY29uc3RydWN0b3JcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogIU5BVElWRV9BUlJBWV9CVUZGRVIgfSwge1xuICBEYXRhVmlldzogQXJyYXlCdWZmZXJNb2R1bGUuRGF0YVZpZXdcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKDE2ZTExKS5nZXRZZWFyKCkgIT09IDEyMDtcbn0pO1xuXG52YXIgZ2V0RnVsbFllYXIgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRGdWxsWWVhcik7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS5nZXRZZWFyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUuZ2V0eWVhclxuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRZZWFyOiBmdW5jdGlvbiBnZXRZZWFyKCkge1xuICAgIHJldHVybiBnZXRGdWxsWWVhcih0aGlzKSAtIDE5MDA7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgRGF0ZSA9IGdsb2JhbC5EYXRlO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlLnByb3RvdHlwZS5nZXRUaW1lKTtcblxuLy8gYERhdGUubm93YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5ub3dcbiQoeyB0YXJnZXQ6ICdEYXRlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIG5vdzogZnVuY3Rpb24gbm93KCkge1xuICAgIHJldHVybiBnZXRUaW1lKG5ldyBEYXRlKCkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIGdldFRpbWUgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFRpbWUpO1xudmFyIHNldEZ1bGxZZWFyID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5zZXRGdWxsWWVhcik7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS5zZXRZZWFyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUuc2V0eWVhclxuJCh7IHRhcmdldDogJ0RhdGUnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHNldFllYXI6IGZ1bmN0aW9uIHNldFllYXIoeWVhcikge1xuICAgIC8vIHZhbGlkYXRlXG4gICAgZ2V0VGltZSh0aGlzKTtcbiAgICB2YXIgeWkgPSB0b0ludGVnZXJPckluZmluaXR5KHllYXIpO1xuICAgIHZhciB5eXl5ID0gMCA8PSB5aSAmJiB5aSA8PSA5OSA/IHlpICsgMTkwMCA6IHlpO1xuICAgIHJldHVybiBzZXRGdWxsWWVhcih0aGlzLCB5eXl5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvR01UU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9nbXRzdHJpbmdcbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUgfSwge1xuICB0b0dNVFN0cmluZzogRGF0ZS5wcm90b3R5cGUudG9VVENTdHJpbmdcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGF0ZS10by1pc28tc3RyaW5nJyk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvaXNvc3RyaW5nXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcgIT09IHRvSVNPU3RyaW5nIH0sIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIG4kRGF0ZVRvSVNPU3RyaW5nID0gRGF0ZVByb3RvdHlwZS50b0lTT1N0cmluZztcbnZhciBnZXRUaW1lID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRUaW1lKTtcbnZhciBnZXRVVENEYXRlID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENEYXRlKTtcbnZhciBnZXRVVENGdWxsWWVhciA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDRnVsbFllYXIpO1xudmFyIGdldFVUQ0hvdXJzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENIb3Vycyk7XG52YXIgZ2V0VVRDTWlsbGlzZWNvbmRzID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENNaWxsaXNlY29uZHMpO1xudmFyIGdldFVUQ01pbnV0ZXMgPSB1bmN1cnJ5VGhpcyhEYXRlUHJvdG90eXBlLmdldFVUQ01pbnV0ZXMpO1xudmFyIGdldFVUQ01vbnRoID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRVVENNb250aCk7XG52YXIgZ2V0VVRDU2Vjb25kcyA9IHVuY3VycnlUaGlzKERhdGVQcm90b3R5cGUuZ2V0VVRDU2Vjb25kcyk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLnRvaXNvc3RyaW5nXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGZhaWxzIGhlcmU6XG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuJERhdGVUb0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbiREYXRlVG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcbn0pKSA/IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCkge1xuICBpZiAoIWlzRmluaXRlKGdldFRpbWUodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGRhdGUgPSB0aGlzO1xuICB2YXIgeWVhciA9IGdldFVUQ0Z1bGxZZWFyKGRhdGUpO1xuICB2YXIgbWlsbGlzZWNvbmRzID0gZ2V0VVRDTWlsbGlzZWNvbmRzKGRhdGUpO1xuICB2YXIgc2lnbiA9IHllYXIgPCAwID8gJy0nIDogeWVhciA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHNpZ24gKyBwYWRTdGFydChhYnMoeWVhciksIHNpZ24gPyA2IDogNCwgMCkgK1xuICAgICctJyArIHBhZFN0YXJ0KGdldFVUQ01vbnRoKGRhdGUpICsgMSwgMiwgMCkgK1xuICAgICctJyArIHBhZFN0YXJ0KGdldFVUQ0RhdGUoZGF0ZSksIDIsIDApICtcbiAgICAnVCcgKyBwYWRTdGFydChnZXRVVENIb3VycyhkYXRlKSwgMiwgMCkgK1xuICAgICc6JyArIHBhZFN0YXJ0KGdldFVUQ01pbnV0ZXMoZGF0ZSksIDIsIDApICtcbiAgICAnOicgKyBwYWRTdGFydChnZXRVVENTZWNvbmRzKGRhdGUpLCAyLCAwKSArXG4gICAgJy4nICsgcGFkU3RhcnQobWlsbGlzZWNvbmRzLCAzLCAwKSArXG4gICAgJ1onO1xufSA6IG4kRGF0ZVRvSVNPU3RyaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGxcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xufSk7XG5cbi8vIGBEYXRlLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b2pzb25cbiQoeyB0YXJnZXQ6ICdEYXRlJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgcHYgPSB0b1ByaW1pdGl2ZShPLCAnbnVtYmVyJyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGRhdGVUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kYXRlLXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcblxuLy8gYERhdGUucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCFoYXNPd24oRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFKSkge1xuICByZWRlZmluZShEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUsIGRhdGVUb1ByaW1pdGl2ZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5VG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGFuT2JqZWN0KHRoaXMpO1xuICBpZiAoaGludCA9PT0gJ3N0cmluZycgfHwgaGludCA9PT0gJ2RlZmF1bHQnKSBoaW50ID0gJ3N0cmluZyc7XG4gIGVsc2UgaWYgKGhpbnQgIT09ICdudW1iZXInKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKHRoaXMsIGhpbnQpO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgdW4kRGF0ZVRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZVtUT19TVFJJTkddKTtcbnZhciBnZXRUaW1lID0gdW5jdXJyeVRoaXMoRGF0ZVByb3RvdHlwZS5nZXRUaW1lKTtcblxuLy8gYERhdGUucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9zdHJpbmdcbmlmIChTdHJpbmcobmV3IERhdGUoTmFOKSkgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlZGVmaW5lKERhdGVQcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZSh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB1biREYXRlVG9TdHJpbmcodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciB0b1VwcGVyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvVXBwZXJDYXNlKTtcblxudmFyIHJhdyA9IC9bXFx3KitcXC0uL0BdLztcblxudmFyIGhleCA9IGZ1bmN0aW9uIChjb2RlLCBsZW5ndGgpIHtcbiAgdmFyIHJlc3VsdCA9IG51bWJlclRvU3RyaW5nKGNvZGUsIDE2KTtcbiAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCBsZW5ndGgpIHJlc3VsdCA9ICcwJyArIHJlc3VsdDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIGBlc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1lc2NhcGUtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHtcbiAgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgY29kZTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGV4ZWMocmF3LCBjaHIpKSB7XG4gICAgICAgIHJlc3VsdCArPSBjaHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2RlID0gY2hhckNvZGVBdChjaHIsIDApO1xuICAgICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICAgIHJlc3VsdCArPSAnJScgKyBoZXgoY29kZSwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ICs9ICcldScgKyB0b1VwcGVyQ2FzZShoZXgoY29kZSwgNCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuJCh7IHRhcmdldDogJ0Z1bmN0aW9uJywgcHJvdG86IHRydWUsIGZvcmNlZDogRnVuY3Rpb24uYmluZCAhPT0gYmluZCB9LCB7XG4gIGJpbmQ6IGJpbmRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIEhBU19JTlNUQU5DRSA9IHdlbGxLbm93blN5bWJvbCgnaGFzSW5zdGFuY2UnKTtcbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS1AQGhhc2luc3RhbmNlXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90b3R5cGUpKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoRnVuY3Rpb25Qcm90b3R5cGUsIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgICBpZiAoIWlzQ2FsbGFibGUodGhpcykgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIFAgPSB0aGlzLnByb3RvdHlwZTtcbiAgICBpZiAoIWlzT2JqZWN0KFApKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gICAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAoUCA9PT0gTykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IH0pO1xufVxuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRlVOQ1RJT05fTkFNRV9FWElTVFMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLkVYSVNUUztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxudmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyhGdW5jdGlvblByb3RvdHlwZS50b1N0cmluZyk7XG52YXIgbmFtZVJFID0gL2Z1bmN0aW9uXFxiKD86XFxzfFxcL1xcKltcXFNcXHNdKj9cXCpcXC98XFwvXFwvW15cXG5cXHJdKltcXG5cXHJdKykqKFteXFxzKC9dKikvO1xudmFyIHJlZ0V4cEV4ZWMgPSB1bmN1cnJ5VGhpcyhuYW1lUkUuZXhlYyk7XG52YXIgTkFNRSA9ICduYW1lJztcblxuLy8gRnVuY3Rpb24gaW5zdGFuY2VzIGAubmFtZWAgcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24taW5zdGFuY2VzLW5hbWVcbmlmIChERVNDUklQVE9SUyAmJiAhRlVOQ1RJT05fTkFNRV9FWElTVFMpIHtcbiAgZGVmaW5lUHJvcGVydHkoRnVuY3Rpb25Qcm90b3R5cGUsIE5BTUUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVnRXhwRXhlYyhuYW1lUkUsIGZ1bmN0aW9uVG9TdHJpbmcodGhpcykpWzFdO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGBnbG9iYWxUaGlzYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2xvYmFsdGhpc1xuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIGdsb2JhbFRoaXM6IGdsb2JhbFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBmaXggPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRzdHJpbmdpZnkoJ1xcdURGMDZcXHVEODM0JykgIT09ICdcIlxcXFx1ZGYwNlxcXFx1ZDgzNFwiJ1xuICAgIHx8ICRzdHJpbmdpZnkoJ1xcdURFQUQnKSAhPT0gJ1wiXFxcXHVkZWFkXCInO1xufSk7XG5cbmlmICgkc3RyaW5naWZ5KSB7XG4gIC8vIGBKU09OLnN0cmluZ2lmeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG4gICQoeyB0YXJnZXQ6ICdKU09OJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkobCk7IGkgPCBsOyBpKyspIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoJHN0cmluZ2lmeSwgbnVsbCwgYXJncyk7XG4gICAgICByZXR1cm4gdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbmNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzFwJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWFjb3NoIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGFjb3NoID0gTWF0aC5hY29zaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG52YXIgRk9SQ0VEID0gISRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gIHx8IE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSAhPSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cbiAgfHwgJGFjb3NoKEluZmluaXR5KSAhPSBJbmZpbml0eTtcblxuLy8gYE1hdGguYWNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmFjb3NoXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IGxvZyh4KSArIExOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hc2luaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IGxvZyh4ICsgc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gYE1hdGguYXNpbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmFzaW5oXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCkgfSwge1xuICBhc2luaDogYXNpbmhcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWF0YW5oIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcbnZhciBsb2cgPSBNYXRoLmxvZztcblxuLy8gYE1hdGguYXRhbmhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmF0YW5oXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApIH0sIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBsb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG5cbi8vIGBNYXRoLmNicnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNicnRcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBwb3coYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE9HMkUgPSBNYXRoLkxPRzJFO1xuXG4vLyBgTWF0aC5jbHozMmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY2x6MzJcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIGZsb29yKGxvZyh4ICsgMC41KSAqIExPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtY29zaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRjb3NoID0gTWF0aC5jb3NoO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIEUgPSBNYXRoLkU7XG5cbi8vIGBNYXRoLmNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhJGNvc2ggfHwgJGNvc2goNzEwKSA9PT0gSW5maW5pdHkgfSwge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICB2YXIgdCA9IGV4cG0xKGFicyh4KSAtIDEpICsgMTtcbiAgICByZXR1cm4gKHQgKyAxIC8gKHQgKiBFICogRSkpICogKEUgLyAyKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbi8vIGBNYXRoLmV4cG0xYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZXhwbTEgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBleHBtMSAhPSBNYXRoLmV4cG0xIH0sIHsgZXhwbTE6IGV4cG0xIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZnJvdW5kJyk7XG5cbi8vIGBNYXRoLmZyb3VuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZnJvdW5kXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBmcm91bmQ6IGZyb3VuZCB9KTtcbiIsInZhciBzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtc2lnbicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG4vLyBgTWF0aC5mcm91bmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmZyb3VuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZnJvdW5kIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5mcm91bmQgfHwgZnVuY3Rpb24gZnJvdW5kKHgpIHtcbiAgdmFyICRhYnMgPSBhYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1oeXBvdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRoeXBvdCA9IE1hdGguaHlwb3Q7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuLy8gQ2hyb21lIDc3IGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTU0NlxudmFyIEJVR0dZID0gISEkaHlwb3QgJiYgJGh5cG90KEluZmluaXR5LCBOYU4pICE9PSBJbmZpbml0eTtcblxuLy8gYE1hdGguaHlwb3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmh5cG90XG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogQlVHR1kgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIHNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1pbXVsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweEZGRkZGRkZGLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pO1xuXG4vLyBgTWF0aC5pbXVsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5pbXVsXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweEZGRkY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG5cbi8vIGBNYXRoLmxvZzEwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMTA6IGxvZzEwXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gYE1hdGgubG9nMXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBsb2cxcDogbG9nMXAgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBgTWF0aC5sb2cyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTE4yO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbi8vIGBNYXRoLnNpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpZ25cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNpZ246IHNpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBleHAgPSBNYXRoLmV4cDtcbnZhciBFID0gTWF0aC5FO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaW5oIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KTtcblxuLy8gYE1hdGguc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2luaFxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIGFicyh4ID0gK3gpIDwgMSA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC50YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50YW5oXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG4iLCJ2YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gTWF0aFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgTWF0aC50cnVuY2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgudHJ1bmNcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG5cbnZhciBOVU1CRVIgPSAnTnVtYmVyJztcbnZhciBOYXRpdmVOdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgYXJyYXlTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG5cbi8vIGBUb051bWVyaWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWVyaWNcbnZhciB0b051bWVyaWMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByaW1WYWx1ZSA9IHRvUHJpbWl0aXZlKHZhbHVlLCAnbnVtYmVyJyk7XG4gIHJldHVybiB0eXBlb2YgcHJpbVZhbHVlID09ICdiaWdpbnQnID8gcHJpbVZhbHVlIDogdG9OdW1iZXIocHJpbVZhbHVlKTtcbn07XG5cbi8vIGBUb051bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbnVtYmVyXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdudW1iZXInKTtcbiAgdmFyIGZpcnN0LCB0aGlyZCwgcmFkaXgsIG1heENvZGUsIGRpZ2l0cywgbGVuZ3RoLCBpbmRleCwgY29kZTtcbiAgaWYgKGlzU3ltYm9sKGl0KSkgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IHRyaW0oaXQpO1xuICAgIGZpcnN0ID0gY2hhckNvZGVBdChpdCwgMCk7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gY2hhckNvZGVBdChpdCwgMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChjaGFyQ29kZUF0KGl0LCAxKSkge1xuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzk6IGNhc2UgMTExOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgb2YgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZGlnaXRzID0gYXJyYXlTbGljZShpdCwgMik7XG4gICAgICBsZW5ndGggPSBkaWdpdHMubGVuZ3RoO1xuICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGNvZGUgPSBjaGFyQ29kZUF0KGRpZ2l0cywgaW5kZXgpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuLy8gYE51bWJlcmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLWNvbnN0cnVjdG9yXG5pZiAoaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpKSB7XG4gIHZhciBOdW1iZXJXcmFwcGVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gICAgdmFyIGR1bW15ID0gdGhpcztcbiAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICByZXR1cm4gaXNQcm90b3R5cGVPZihOdW1iZXJQcm90b3R5cGUsIGR1bW15KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IHRoaXNOdW1iZXJWYWx1ZShkdW1teSk7IH0pXG4gICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKE9iamVjdChuKSwgZHVtbXksIE51bWJlcldyYXBwZXIpIDogbjtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IERFU0NSSVBUT1JTID8gZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVOdW1iZXIpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVMyMDE1IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVMyMDE1IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04sTUFYX1NBRkVfSU5URUdFUixNSU5fU0FGRV9JTlRFR0VSLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLHBhcnNlRmxvYXQscGFyc2VJbnQsJyArXG4gICAgLy8gRVNOZXh0XG4gICAgJ2Zyb21TdHJpbmcscmFuZ2UnXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzT3duKE5hdGl2ZU51bWJlciwga2V5ID0ga2V5c1tqXSkgJiYgIWhhc093bihOdW1iZXJXcmFwcGVyLCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eShOdW1iZXJXcmFwcGVyLCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihOYXRpdmVOdW1iZXIsIGtleSkpO1xuICAgIH1cbiAgfVxuICBOdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbiAgTnVtYmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTnVtYmVyV3JhcHBlcjtcbiAgcmVkZWZpbmUoZ2xvYmFsLCBOVU1CRVIsIE51bWJlcldyYXBwZXIpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuRVBTSUxPTmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmVwc2lsb25cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBudW1iZXJJc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItaXMtZmluaXRlJyk7XG5cbi8vIGBOdW1iZXIuaXNGaW5pdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNmaW5pdGVcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHsgaXNGaW5pdGU6IG51bWJlcklzRmluaXRlIH0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGdsb2JhbElzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xuXG4vLyBgTnVtYmVyLmlzRmluaXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzZmluaXRlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLWlzZmluaXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgZ2xvYmFsSXNGaW5pdGUoaXQpO1xufTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzSW50ZWdyYWxOdW1iZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyJyk7XG5cbi8vIGBOdW1iZXIuaXNJbnRlZ2VyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmlzaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc0ludGVnZXI6IGlzSW50ZWdyYWxOdW1iZXJcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuaXNOYU5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNuYW5cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xuXG4vLyBgTnVtYmVyLmlzU2FmZUludGVnZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNzYWZlaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVncmFsTnVtYmVyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxRkZGRkZGRkZGRkZGRjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYCBjb25zdGFudFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIubWF4X3NhZmVfaW50ZWdlclxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBNQVhfU0FGRV9JTlRFR0VSOiAweDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJgIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5taW5fc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIE1JTl9TQUZFX0lOVEVHRVI6IC0weDFGRkZGRkZGRkZGRkZGXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBOdW1iZXIucGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZUZsb2F0XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLXBhcnNlZmxvYXQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE51bWJlci5wYXJzZUZsb2F0ICE9IHBhcnNlRmxvYXQgfSwge1xuICBwYXJzZUZsb2F0OiBwYXJzZUZsb2F0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHBhcnNlSW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQnKTtcblxuLy8gYE51bWJlci5wYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5wYXJzZWludFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1wYXJzZWludCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlSW50ICE9IHBhcnNlSW50IH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcbnZhciAkcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGlzRmluaXRlID0gZ2xvYmFsLmlzRmluaXRlO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgdW4kVG9FeHBvbmVudGlhbCA9IHVuY3VycnlUaGlzKDEuMC50b0V4cG9uZW50aWFsKTtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuLy8gRWRnZSAxNy1cbnZhciBST1VORFNfUFJPUEVSTFkgPSB1biRUb0V4cG9uZW50aWFsKC02LjllLTExLCA0KSA9PT0gJy02LjkwMDBlLTExJ1xuICAvLyBJRTExLSAmJiBFZGdlIDE0LVxuICAmJiB1biRUb0V4cG9uZW50aWFsKDEuMjU1LCAyKSA9PT0gJzEuMjVlKzAnXG4gIC8vIEZGODYtLCBWOCB+IENocm9tZSA0OS01MFxuICAmJiB1biRUb0V4cG9uZW50aWFsKDEyMzQ1LCAzKSA9PT0gJzEuMjM1ZSs0J1xuICAvLyBGRjg2LSwgVjggfiBDaHJvbWUgNDktNTBcbiAgJiYgdW4kVG9FeHBvbmVudGlhbCgyNSwgMCkgPT09ICczZSsxJztcblxuLy8gSUU4LVxudmFyIFRIUk9XU19PTl9JTkZJTklUWV9GUkFDVElPTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdW4kVG9FeHBvbmVudGlhbCgxLCBJbmZpbml0eSk7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHVuJFRvRXhwb25lbnRpYWwoMSwgLUluZmluaXR5KTtcbn0pO1xuXG4vLyBTYWZhcmkgPDExICYmIEZGIDw1MFxudmFyIFBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0sgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRUb0V4cG9uZW50aWFsKEluZmluaXR5LCBJbmZpbml0eSk7XG59KSAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRUb0V4cG9uZW50aWFsKE5hTiwgSW5maW5pdHkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSAhUk9VTkRTX1BST1BFUkxZIHx8ICFUSFJPV1NfT05fSU5GSU5JVFlfRlJBQ1RJT04gfHwgIVBST1BFUl9OT05fRklOSVRFX1RISVNfQ0hFQ0s7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRXhwb25lbnRpYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZXhwb25lbnRpYWxcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0V4cG9uZW50aWFsOiBmdW5jdGlvbiB0b0V4cG9uZW50aWFsKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgaWYgKGZyYWN0aW9uRGlnaXRzID09PSB1bmRlZmluZWQpIHJldHVybiB1biRUb0V4cG9uZW50aWFsKHgpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgaWYgKCFpc0Zpbml0ZSh4KSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICAvLyBUT0RPOiBFUzIwMTggaW5jcmVhc2VkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFjdGlvbiBkaWdpdHMgdG8gMTAwLCBuZWVkIHRvIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcignSW5jb3JyZWN0IGZyYWN0aW9uIGRpZ2l0cycpO1xuICAgIGlmIChST1VORFNfUFJPUEVSTFkpIHJldHVybiB1biRUb0V4cG9uZW50aWFsKHgsIGYpO1xuICAgIHZhciBzID0gJyc7XG4gICAgdmFyIG0gPSAnJztcbiAgICB2YXIgZSA9IDA7XG4gICAgdmFyIGMgPSAnJztcbiAgICB2YXIgZCA9ICcnO1xuICAgIGlmICh4IDwgMCkge1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYgKHggPT09IDApIHtcbiAgICAgIGUgPSAwO1xuICAgICAgbSA9IHJlcGVhdCgnMCcsIGYgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhpcyBibG9jayBpcyBiYXNlZCBvbiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9TaGVldEpTRGV2LzExMDBhZDU2YjlmODU2Yzk1Mjk5ZWQwZTA2OGVlYTA4XG4gICAgICAvLyBUT0RPOiBpbXByb3ZlIGFjY3VyYWN5IHdpdGggYmlnIGZyYWN0aW9uIGRpZ2l0c1xuICAgICAgdmFyIGwgPSBsb2cxMCh4KTtcbiAgICAgIGUgPSBmbG9vcihsKTtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHZhciB3ID0gcG93KDEwLCBlIC0gZik7XG4gICAgICBuID0gcm91bmQoeCAvIHcpO1xuICAgICAgaWYgKDIgKiB4ID49ICgyICogbiArIDEpICogdykge1xuICAgICAgICBuICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAobiA+PSBwb3coMTAsIGYgKyAxKSkge1xuICAgICAgICBuIC89IDEwO1xuICAgICAgICBlICs9IDE7XG4gICAgICB9XG4gICAgICBtID0gU3RyaW5nKG4pO1xuICAgIH1cbiAgICBpZiAoZiAhPT0gMCkge1xuICAgICAgbSA9IHN0cmluZ1NsaWNlKG0sIDAsIDEpICsgJy4nICsgc3RyaW5nU2xpY2UobSwgMSk7XG4gICAgfVxuICAgIGlmIChlID09PSAwKSB7XG4gICAgICBjID0gJysnO1xuICAgICAgZCA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgYyA9IGUgPiAwID8gJysnIDogJy0nO1xuICAgICAgZCA9IFN0cmluZyhhYnMoZSkpO1xuICAgIH1cbiAgICBtICs9ICdlJyArIGMgKyBkO1xuICAgIHJldHVybiBzICsgbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciB1biRUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaW5kZXhdKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0KCcwJywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHVuJFRvRml4ZWQoMC4wMDAwOCwgMykgIT09ICcwLjAwMCcgfHxcbiAgICB1biRUb0ZpeGVkKDAuOSwgMCkgIT09ICcxJyB8fFxuICAgIHVuJFRvRml4ZWQoMS4yNTUsIDIpICE9PSAnMS4yNScgfHxcbiAgICB1biRUb0ZpeGVkKDEwMDAwMDAwMDAwMDAwMDAxMjguMCwgMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4Jztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gIHVuJFRvRml4ZWQoe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvRml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIucHJvdG90eXBlLnRvZml4ZWRcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIG51bWJlciA9IHRoaXNOdW1iZXJWYWx1ZSh0aGlzKTtcbiAgICB2YXIgZnJhY3REaWdpdHMgPSB0b0ludGVnZXJPckluZmluaXR5KGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgc2lnbiA9ICcnO1xuICAgIHZhciByZXN1bHQgPSAnMCc7XG4gICAgdmFyIGUsIHosIGosIGs7XG5cbiAgICAvLyBUT0RPOiBFUzIwMTggaW5jcmVhc2VkIHRoZSBtYXhpbXVtIG51bWJlciBvZiBmcmFjdGlvbiBkaWdpdHMgdG8gMTAwLCBuZWVkIHRvIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICAgaWYgKGZyYWN0RGlnaXRzIDwgMCB8fCBmcmFjdERpZ2l0cyA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKCdJbmNvcnJlY3QgZnJhY3Rpb24gZGlnaXRzJyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAobnVtYmVyICE9IG51bWJlcikgcmV0dXJuICdOYU4nO1xuICAgIGlmIChudW1iZXIgPD0gLTFlMjEgfHwgbnVtYmVyID49IDFlMjEpIHJldHVybiBTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0aGlzTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGhpcy1udW1iZXItdmFsdWUnKTtcblxudmFyIHVuJFRvUHJlY2lzaW9uID0gdW5jdXJyeVRoaXMoMS4wLnRvUHJlY2lzaW9uKTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gdW4kVG9QcmVjaXNpb24oMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgdW4kVG9QcmVjaXNpb24oe30pO1xufSk7XG5cbi8vIGBOdW1iZXIucHJvdG90eXBlLnRvUHJlY2lzaW9uYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b3ByZWNpc2lvblxuJCh7IHRhcmdldDogJ051bWJlcicsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWRcbiAgICAgID8gdW4kVG9QcmVjaXNpb24odGhpc051bWJlclZhbHVlKHRoaXMpKVxuICAgICAgOiB1biRUb1ByZWNpc2lvbih0aGlzTnVtYmVyVmFsdWUodGhpcyksIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmFzc2lnbiAhPT0gYXNzaWduIH0sIHtcbiAgYXNzaWduOiBhc3NpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBjcmVhdGU6IGNyZWF0ZVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IGdldDogYUNhbGxhYmxlKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpLmY7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnRpZXMgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgIT09IGRlZmluZVByb3BlcnRpZXMsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnRpZXM6IGRlZmluZVByb3BlcnRpZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSBzYWZlXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBPYmplY3QuZGVmaW5lUHJvcGVydHkgIT09IGRlZmluZVByb3BlcnR5LCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZGVmaW5lUHJvcGVydHlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xuICAgICAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFDYWxsYWJsZShzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRlbnRyaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1hcnJheScpLmVudHJpZXM7XG5cbi8vIGBPYmplY3QuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuICAgIHJldHVybiAkZW50cmllcyhPKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1mcmVlemUgLS0gc2FmZVxudmFyICRmcmVlemUgPSBPYmplY3QuZnJlZXplO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRmcmVlemUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmZyZWV6ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5mcmVlemVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFGUkVFWklORyB9LCB7XG4gIGZyZWV6ZTogZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZnJvbUVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWZyb20tZW50cmllc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBmcm9tRW50cmllczogZnVuY3Rpb24gZnJvbUVudHJpZXMoaXRlcmFibGUpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgIGNyZWF0ZVByb3BlcnR5KG9iaiwgaywgdik7XG4gICAgfSwgeyBBU19FTlRSSUVTOiB0cnVlIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcigxKTsgfSk7XG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IEZBSUxTX09OX1BSSU1JVElWRVM7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0luZGV4ZWRPYmplY3QoaXQpLCBrZXkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGtleSwgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpbmRleCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkgPSBrZXlzW2luZGV4KytdKTtcbiAgICAgIGlmIChkZXNjcmlwdG9yICE9PSB1bmRlZmluZWQpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKS5mO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5bmFtZXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gIU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVHZXRQcm90b3R5cGVPZigxKTsgfSk7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2ZcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG5cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbi8vIGBPYmplY3QuaGFzT3duYCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFjY2Vzc2libGUtb2JqZWN0LWhhc293bnByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhc093bjogaGFzT3duXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcblxuLy8gYE9iamVjdC5pc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpczogaXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlIC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9iamVjdC5pc0V4dGVuc2libGUgIT09ICRpc0V4dGVuc2libGUgfSwge1xuICBpc0V4dGVuc2libGU6ICRpc0V4dGVuc2libGVcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZnJvemVuIC0tIHNhZmVcbnZhciAkaXNGcm96ZW4gPSBPYmplY3QuaXNGcm96ZW47XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGlzRnJvemVuKDEpOyB9KTtcblxuLy8gYE9iamVjdC5pc0Zyb3plbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2Zyb3plblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB8fCBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgfSwge1xuICBpc0Zyb3plbjogZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSAmJiBjbGFzc29mKGl0KSA9PSAnQXJyYXlCdWZmZXInKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc3NlYWxlZCAtLSBzYWZlXG52YXIgJGlzU2VhbGVkID0gT2JqZWN0LmlzU2VhbGVkO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc1NlYWxlZCgxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNTZWFsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNzZWFsZWRcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIH0sIHtcbiAgaXNTZWFsZWQ6IGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0cnVlO1xuICAgIGlmIChBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgJiYgY2xhc3NvZihpdCkgPT0gJ0FycmF5QnVmZmVyJykgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IG5hdGl2ZUtleXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyh0b09iamVjdChpdCkpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX19cbmlmIChERVNDUklQVE9SUykge1xuICAkKHsgdGFyZ2V0OiAnT2JqZWN0JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgICAgIHZhciBkZXNjO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoZGVzYyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBrZXkpKSByZXR1cm4gZGVzYy5nZXQ7XG4gICAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2Muc2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtcHJldmVudGV4dGVuc2lvbnMgLS0gc2FmZVxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkcHJldmVudEV4dGVuc2lvbnMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByZXZlbnRleHRlbnNpb25zXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgb25GcmVlemUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5vbkZyZWV6ZTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2VhbCAtLSBzYWZlXG52YXIgJHNlYWwgPSBPYmplY3Quc2VhbDtcbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyAkc2VhbCgxKTsgfSk7XG5cbi8vIGBPYmplY3Quc2VhbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5zZWFsXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBzZWFsOiBmdW5jdGlvbiBzZWFsKGl0KSB7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZlxufSk7XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZycpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbmlmICghVE9fU1RSSU5HX1RBR19TVVBQT1JUKSB7XG4gIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtdG8tYXJyYXknKS52YWx1ZXM7XG5cbi8vIGBPYmplY3QudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnZhbHVlc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG4gICAgcmV0dXJuICR2YWx1ZXMoTyk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCB9LCB7XG4gIHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50Jyk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSAkcGFyc2VJbnQgfSwge1xuICBwYXJzZUludDogJHBhcnNlSW50XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIE5hdGl2ZVByb21pc2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3InKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lLWFsbCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX0JST1dTRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXInKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2UgJiYgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHk7XG5cbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gaXNDYWxsYWJsZShnbG9iYWwuUHJvbWlzZVJlamVjdGlvbkV2ZW50KTtcbnZhciBVTkhBTkRMRURfUkVKRUNUSU9OID0gJ3VuaGFuZGxlZHJlamVjdGlvbic7XG52YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7XG52YXIgUEVORElORyA9IDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG52YXIgSEFORExFRCA9IDE7XG52YXIgVU5IQU5ETEVEID0gMjtcbnZhciBTVUJDTEFTU0lORyA9IGZhbHNlO1xuXG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI2ZpbmFsbHkgaW4gdGhlIHB1cmUgdmVyc2lvbiBmb3IgcHJldmVudGluZyBwcm90b3R5cGUgcG9sbHV0aW9uXG4gIGlmIChJU19QVVJFICYmICFQcm9taXNlUHJvdG90eXBlWydmaW5hbGx5J10pIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2VDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKDEpOyB9KTtcbiAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICBleGVjKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgfTtcbiAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IEZha2VQcm9taXNlO1xuICBTVUJDTEFTU0lORyA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIHJldHVybiAhR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSAmJiBJU19CUk9XU0VSICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UO1xufSk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIFByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpWydjYXRjaCddKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgaXNDYWxsYWJsZSh0aGVuID0gaXQudGhlbikgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgY2FsbFJlYWN0aW9uID0gZnVuY3Rpb24gKHJlYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgY2FsbCh0YXNrLCBnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIGlmIChJU19OT0RFKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgZGlzcGF0Y2hFdmVudChSRUpFQ1RJT05fSEFORExFRCwgcHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICB9KTtcbn07XG5cbnZhciBiaW5kID0gZnVuY3Rpb24gKGZuLCBzdGF0ZSwgdW53cmFwKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBmbihzdGF0ZSwgdmFsdWUsIHVud3JhcCk7XG4gIH07XG59O1xuXG52YXIgaW50ZXJuYWxSZWplY3QgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICBzdGF0ZS5zdGF0ZSA9IFJFSkVDVEVEO1xuICBub3RpZnkoc3RhdGUsIHRydWUpO1xufTtcblxudmFyIGludGVybmFsUmVzb2x2ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHRyeSB7XG4gICAgaWYgKHN0YXRlLmZhY2FkZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNhbGwodGhlbiwgdmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgYUNhbGxhYmxlKGV4ZWN1dG9yKTtcbiAgICBjYWxsKEludGVybmFsLCB0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdChzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgUHJvbWlzZVByb3RvdHlwZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VQcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gc2FmZVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLm9rID0gaXNDYWxsYWJsZShvbkZ1bGZpbGxlZCkgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gaXNDYWxsYWJsZShvblJlamVjdGVkKSAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlID09IFBFTkRJTkcpIHN0YXRlLnJlYWN0aW9ucy5hZGQocmVhY3Rpb24pO1xuICAgICAgZWxzZSBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09IFByb21pc2VDb25zdHJ1Y3RvciB8fCBDID09PSBQcm9taXNlV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xuXG4gIGlmICghSVNfUFVSRSAmJiBpc0NhbGxhYmxlKE5hdGl2ZVByb21pc2UpICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZVByb3RvdHlwZS50aGVuO1xuXG4gICAgaWYgKCFTVUJDTEFTU0lORykge1xuICAgICAgLy8gbWFrZSBgUHJvbWlzZSN0aGVuYCByZXR1cm4gYSBwb2x5ZmlsbGVkIGBQcm9taXNlYCBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGNhbGwobmF0aXZlVGhlbiwgdGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgICAgLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuICAgICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgUHJvbWlzZVByb3RvdHlwZVsnY2F0Y2gnXSwgeyB1bnNhZmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFrZSBgLmNvbnN0cnVjdG9yID09PSBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgdHJ5IHtcbiAgICAgIGRlbGV0ZSBOYXRpdmVQcm9taXNlUHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIC8vIG1ha2UgYGluc3RhbmNlb2YgUHJvbWlzZWAgd29yayBmb3IgbmF0aXZlIHByb21pc2UtYmFzZWQgQVBJc1xuICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgc2V0UHJvdG90eXBlT2YoTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgUHJvbWlzZVByb3RvdHlwZSk7XG4gICAgfVxuICB9XG59XG5cbiQoeyBnbG9iYWw6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yXG59KTtcblxuc2V0VG9TdHJpbmdUYWcoUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFLCBmYWxzZSwgdHJ1ZSk7XG5zZXRTcGVjaWVzKFBST01JU0UpO1xuXG5Qcm9taXNlV3JhcHBlciA9IGdldEJ1aWx0SW4oUFJPTUlTRSk7XG5cbi8vIHN0YXRpY3NcbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVqZWN0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlamVjdFxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICBjYWxsKGNhcGFiaWxpdHkucmVqZWN0LCB1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgY2FsbCgkcHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC9pcGFkfGlwaG9uZXxpcG9kL2kudGVzdCh1c2VyQWdlbnQpICYmIGdsb2JhbC5QZWJibGUgIT09IHVuZGVmaW5lZDtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICBhcmd1bWVudHMubGVuZ3RoID09IDEgPyBjb25zb2xlLmVycm9yKGEpIDogY29uc29sZS5lcnJvcihhLCBiKTtcbiAgfVxufTtcbiIsInZhciBRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5oZWFkID0gbnVsbDtcbiAgdGhpcy50YWlsID0gbnVsbDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBlbnRyeSA9IHsgaXRlbTogaXRlbSwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmhlYWQpIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7XG4gICAgZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5oZWFkO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgdGhpcy5oZWFkID0gZW50cnkubmV4dDtcbiAgICAgIGlmICh0aGlzLnRhaWwgPT09IGVudHJ5KSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgcmV0dXJuIGVudHJ5Lml0ZW07XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBQcm9taXNlLmFsbFNldHRsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbHNldHRsZWRcbiQoeyB0YXJnZXQ6ICdQcm9taXNlJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGFsbFNldHRsZWQ6IGZ1bmN0aW9uIGFsbFNldHRsZWQoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgY2FsbChwcm9taXNlUmVzb2x2ZSwgQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0geyBzdGF0dXM6ICdyZWplY3RlZCcsIHJlYXNvbjogZXJyb3IgfTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xuXG52YXIgUFJPTUlTRV9BTllfRVJST1IgPSAnTm8gb25lIHByb21pc2UgcmVzb2x2ZWQnO1xuXG4vLyBgUHJvbWlzZS5hbnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFueVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlIH0sIHtcbiAgYW55OiBmdW5jdGlvbiBhbnkoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIEFnZ3JlZ2F0ZUVycm9yID0gZ2V0QnVpbHRJbignQWdncmVnYXRlRXJyb3InKTtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFDYWxsYWJsZShDLnJlc29sdmUpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gZmFsc2U7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIGNhbGwocHJvbWlzZVJlc29sdmUsIEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5UmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZWplY3RlZCA9IHRydWU7XG4gICAgICAgICAgZXJyb3JzW2luZGV4XSA9IGVycm9yO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgQWdncmVnYXRlRXJyb3IoZXJyb3JzLCBQUk9NSVNFX0FOWV9FUlJPUikpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVqZWN0KG5ldyBBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIFBST01JU0VfQU5ZX0VSUk9SKSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikgcmVqZWN0KHJlc3VsdC52YWx1ZSk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vbm8tdGhlbmFibGUgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IGlzQ2FsbGFibGUob25GaW5hbGx5KTtcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2ZpbmFsbHlgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZSkpIHtcbiAgdmFyIG1ldGhvZCA9IGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXTtcbiAgaWYgKE5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10gIT09IG1ldGhvZCkge1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIG1ldGhvZCwgeyB1bnNhZmU6IHRydWUgfSk7XG4gIH1cbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZ1bmN0aW9uQXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxudmFyIE9QVElPTkFMX0FSR1VNRU5UU19MSVNUID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgUmVmbGVjdC5hcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmFwcGx5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5hcHBseVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE9QVElPTkFMX0FSR1VNRU5UU19MSVNUIH0sIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uQXBwbHkoYUNhbGxhYmxlKHRhcmdldCksIHRoaXNBcmd1bWVudCwgYW5PYmplY3QoYXJndW1lbnRzTGlzdCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIG5hdGl2ZUNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBwdXNoID0gW10ucHVzaDtcblxuLy8gYFJlZmxlY3QuY29uc3RydWN0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5jb25zdHJ1Y3Rcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZUNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG5cbnZhciBGT1JDRUQgPSBORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRztcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCwgc2hhbTogRk9SQ0VEIH0sIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qICwgbmV3VGFyZ2V0ICovKSB7XG4gICAgYUNvbnN0cnVjdG9yKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUNvbnN0cnVjdG9yKGFyZ3VtZW50c1syXSk7XG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIG5hdGl2ZUNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICBhcHBseShwdXNoLCAkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChhcHBseShiaW5kLCBUYXJnZXQsICRhcmdzKSkoKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3RQcm90b3R5cGUpO1xuICAgIHZhciByZXN1bHQgPSBhcHBseShUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxudmFyIEVSUk9SX0lOU1RFQURfT0ZfRkFMU0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZGVmaW5lUHJvcGVydHlNb2R1bGUuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pO1xuXG4vLyBgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVmaW5lcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBFUlJPUl9JTlNURUFEX09GX0ZBTFNFLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRhcmdldCwga2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYFJlZmxlY3QuZGVsZXRlUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmRlbGV0ZXByb3BlcnR5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgUmVmbGVjdC5nZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldFxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2NyaXB0b3IsIHByb3RvdHlwZTtcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICBpZiAoZGVzY3JpcHRvcikgcmV0dXJuIGlzRGF0YURlc2NyaXB0b3IoZGVzY3JpcHRvcilcbiAgICA/IGRlc2NyaXB0b3IudmFsdWVcbiAgICA6IGRlc2NyaXB0b3IuZ2V0ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBjYWxsKGRlc2NyaXB0b3IuZ2V0LCByZWNlaXZlcik7XG4gIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldDogZ2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gYFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0R2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbi8vIGBSZWZsZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5nZXRwcm90b3R5cGVvZlxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBvYmplY3RHZXRQcm90b3R5cGVPZihhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYFJlZmxlY3QuaGFzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5oYXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLWV4dGVuc2libGUnKTtcblxuLy8gYFJlZmxlY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5pc2V4dGVuc2libGVcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUodGFyZ2V0KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG5cbi8vIGBSZWZsZWN0Lm93bktleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lm93bmtleXNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIG93bktleXM6IG93bktleXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG4vLyBgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QucHJldmVudGV4dGVuc2lvbnNcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSwgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyA9IGdldEJ1aWx0SW4oJ09iamVjdCcsICdwcmV2ZW50RXh0ZW5zaW9ucycpO1xuICAgICAgaWYgKG9iamVjdFByZXZlbnRFeHRlbnNpb25zKSBvYmplY3RQcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1kYXRhLWRlc2NyaXB0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbi8vIGBSZWZsZWN0LnNldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3Quc2V0XG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG90eXBlLCBzZXR0ZXI7XG4gIGlmICghb3duRGVzY3JpcHRvcikge1xuICAgIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2NyaXB0b3IgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCk7XG4gIH1cbiAgaWYgKGlzRGF0YURlc2NyaXB0b3Iob3duRGVzY3JpcHRvcikpIHtcbiAgICBpZiAob3duRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBWKSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0dGVyID0gb3duRGVzY3JpcHRvci5zZXQ7XG4gICAgaWYgKHNldHRlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgY2FsbChzZXR0ZXIsIHJlY2VpdmVyLCBWKTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gTVMgRWRnZSAxNy0xOCBSZWZsZWN0LnNldCBhbGxvd3Mgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gb2JqZWN0XG4vLyB3aXRoIG5vbi13cml0YWJsZSBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlXG52YXIgTVNfRURHRV9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgdmFyIG9iamVjdCA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmYobmV3IENvbnN0cnVjdG9yKCksICdhJywgeyBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBSZWZsZWN0LnNldChDb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdhJywgMSwgb2JqZWN0KSAhPT0gZmFsc2U7XG59KTtcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE1TX0VER0VfQlVHIH0sIHtcbiAgc2V0OiBzZXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG52YXIgb2JqZWN0U2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gYFJlZmxlY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LnNldHByb3RvdHlwZW9mXG5pZiAob2JqZWN0U2V0UHJvdG90eXBlT2YpICQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBvYmplY3RTZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlIH0sIHsgUmVmbGVjdDoge30gfSk7XG5cbi8vIFJlZmxlY3RbQEB0b1N0cmluZ1RhZ10gcHJvcGVydHlcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC1AQHRvc3RyaW5ndGFnXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuUmVmbGVjdCwgJ1JlZmxlY3QnLCB0cnVlKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXNwZWNpZXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xudmFyIE5hdGl2ZVJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gTmF0aXZlUmVnRXhwLnByb3RvdHlwZTtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoUmVnRXhwUHJvdG90eXBlLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbi8vIFRPRE86IFVzZSBvbmx5IHByb3BwZXIgUmVnRXhwSWRlbnRpZmllck5hbWVcbnZhciBJU19OQ0cgPSAvXlxcPzxbXlxcc1xcZCEjJSYqKzw9PkBeXVteXFxzISMlJiorPD0+QF5dKj4vO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgTUlTU0VEX1NUSUNLWSA9IHN0aWNreUhlbHBlcnMuTUlTU0VEX1NUSUNLWTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgQkFTRV9GT1JDRUQgPSBERVNDUklQVE9SUyAmJlxuICAoIUNPUlJFQ1RfTkVXIHx8IE1JU1NFRF9TVElDS1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0cgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICAgIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xuICB9KSk7XG5cbnZhciBoYW5kbGVEb3RBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgcmVzdWx0ICs9IGNociArIGNoYXJBdChzdHJpbmcsICsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9ICdmbGFncycgaW4gcmF3UGF0dGVybiA/IHJhd1BhdHRlcm4uZmxhZ3MgOiBnZXRGbGFncyhyYXdQYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBwYXR0ZXJuID0gcGF0dGVybiA9PT0gdW5kZWZpbmVkID8gJycgOiB0b1N0cmluZyhwYXR0ZXJuKTtcbiAgICBmbGFncyA9IGZsYWdzID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzKTtcbiAgICByYXdQYXR0ZXJuID0gcGF0dGVybjtcblxuICAgIGlmIChVTlNVUFBPUlRFRF9ET1RfQUxMICYmICdkb3RBbGwnIGluIHJlMSkge1xuICAgICAgZG90QWxsID0gISFmbGFncyAmJiBzdHJpbmdJbmRleE9mKGZsYWdzLCAncycpID4gLTE7XG4gICAgICBpZiAoZG90QWxsKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC9zL2csICcnKTtcbiAgICB9XG5cbiAgICByYXdGbGFncyA9IGZsYWdzO1xuXG4gICAgaWYgKE1JU1NFRF9TVElDS1kgJiYgJ3N0aWNreScgaW4gcmUxKSB7XG4gICAgICBzdGlja3kgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICd5JykgPiAtMTtcbiAgICAgIGlmIChzdGlja3kgJiYgVU5TVVBQT1JURURfWSkgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAveS9nLCAnJyk7XG4gICAgfVxuXG4gICAgaWYgKFVOU1VQUE9SVEVEX05DRykge1xuICAgICAgaGFuZGxlZCA9IGhhbmRsZU5DRyhwYXR0ZXJuKTtcbiAgICAgIHBhdHRlcm4gPSBoYW5kbGVkWzBdO1xuICAgICAgZ3JvdXBzID0gaGFuZGxlZFsxXTtcbiAgICB9XG5cbiAgICByZXN1bHQgPSBpbmhlcml0SWZSZXF1aXJlZChOYXRpdmVSZWdFeHAocGF0dGVybiwgZmxhZ3MpLCB0aGlzSXNSZWdFeHAgPyB0aGlzIDogUmVnRXhwUHJvdG90eXBlLCBSZWdFeHBXcmFwcGVyKTtcblxuICAgIGlmIChkb3RBbGwgfHwgc3RpY2t5IHx8IGdyb3Vwcy5sZW5ndGgpIHtcbiAgICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUocmVzdWx0KTtcbiAgICAgIGlmIChkb3RBbGwpIHtcbiAgICAgICAgc3RhdGUuZG90QWxsID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUucmF3ID0gUmVnRXhwV3JhcHBlcihoYW5kbGVEb3RBbGwocGF0dGVybiksIHJhd0ZsYWdzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGlja3kpIHN0YXRlLnN0aWNreSA9IHRydWU7XG4gICAgICBpZiAoZ3JvdXBzLmxlbmd0aCkgc3RhdGUuZ3JvdXBzID0gZ3JvdXBzO1xuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuICE9PSByYXdQYXR0ZXJuKSB0cnkge1xuICAgICAgLy8gZmFpbHMgaW4gb2xkIGVuZ2luZXMsIGJ1dCB3ZSBoYXZlIG5vIGFsdGVybmF0aXZlcyBmb3IgdW5zdXBwb3J0ZWQgcmVnZXggc3ludGF4XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0LCAnc291cmNlJywgcmF3UGF0dGVybiA9PT0gJycgPyAnKD86KScgOiByYXdQYXR0ZXJuKTtcbiAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gUmVnRXhwV3JhcHBlciB8fCBkZWZpbmVQcm9wZXJ0eShSZWdFeHBXcmFwcGVyLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTmF0aXZlUmVnRXhwW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBOYXRpdmVSZWdFeHBba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5KGtleXNbaW5kZXgrK10pO1xuICB9XG5cbiAgUmVnRXhwUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVnRXhwV3JhcHBlcjtcbiAgUmVnRXhwV3JhcHBlci5wcm90b3R5cGUgPSBSZWdFeHBQcm90b3R5cGU7XG4gIHJlZGVmaW5lKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIpO1xufVxuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAtQEBzcGVjaWVzXG5zZXRTcGVjaWVzKCdSZWdFeHAnKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGdldEludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5nZXQ7XG5cbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmRvdEFsbGAgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmRvdGFsbFxuaWYgKERFU0NSSVBUT1JTICYmIFVOU1VQUE9SVEVEX0RPVF9BTEwpIHtcbiAgZGVmaW5lUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlLCAnZG90QWxsJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzID09PSBSZWdFeHBQcm90b3R5cGUpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAvLyBXZSBjYW4ndCB1c2UgSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IgYmVjYXVzZVxuICAgICAgLy8gd2UgZG9uJ3QgYWRkIG1ldGFkYXRhIGZvciByZWdleHBzIGNyZWF0ZWQgYnkgYSBsaXRlcmFsLlxuICAgICAgaWYgKGNsYXNzb2YodGhpcykgPT09ICdSZWdFeHAnKSB7XG4gICAgICAgIHJldHVybiAhIWdldEludGVybmFsU3RhdGUodGhpcykuZG90QWxsO1xuICAgICAgfVxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsIFJlZ0V4cCByZXF1aXJlZCcpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvYmplY3REZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoUmVnRXhwUHJvdG90eXBlLCAnZmxhZ3MnKS5nZXQuY2FsbCh7IGRvdEFsbDogdHJ1ZSwgc3RpY2t5OiB0cnVlIH0pICE9PSAnc3knO1xufSk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLmZsYWdzYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC5wcm90b3R5cGUuZmxhZ3NcbmlmIChGT1JDRUQpIG9iamVjdERlZmluZVByb3BlcnR5TW9kdWxlLmYoUmVnRXhwUHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZWdFeHBGbGFnc1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTUlTU0VEX1NUSUNLWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKS5NSVNTRURfU1RJQ0tZO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZ2V0O1xuXG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5zdGlja3lgIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXQtcmVnZXhwLnByb3RvdHlwZS5zdGlja3lcbmlmIChERVNDUklQVE9SUyAmJiBNSVNTRURfU1RJQ0tZKSB7XG4gIGRlZmluZVByb3BlcnR5KFJlZ0V4cFByb3RvdHlwZSwgJ3N0aWNreScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcyA9PT0gUmVnRXhwUHJvdG90eXBlKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yIGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvbid0IGFkZCBtZXRhZGF0YSBmb3IgcmVnZXhwcyBjcmVhdGVkIGJ5IGEgbGl0ZXJhbC5cbiAgICAgIGlmIChjbGFzc29mKHRoaXMpID09PSAnUmVnRXhwJykge1xuICAgICAgICByZXR1cm4gISFnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnN0aWNreTtcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCBSZWdFeHAgcmVxdWlyZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBERUxFR0FURVNfVE9fRVhFQyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgdmFyIHJlID0gL1thY10vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIGV4ZWNDYWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiAvLi8uZXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xuICByZXR1cm4gcmUudGVzdCgnYWJjJykgPT09IHRydWUgJiYgZXhlY0NhbGxlZDtcbn0oKTtcblxudmFyIEVycm9yID0gZ2xvYmFsLkVycm9yO1xudmFyIHVuJFRlc3QgPSB1bmN1cnJ5VGhpcygvLi8udGVzdCk7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRlc3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRlc3RcbiQoeyB0YXJnZXQ6ICdSZWdFeHAnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhREVMRUdBVEVTX1RPX0VYRUMgfSwge1xuICB0ZXN0OiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgdmFyIGV4ZWMgPSB0aGlzLmV4ZWM7XG4gICAgaWYgKCFpc0NhbGxhYmxlKGV4ZWMpKSByZXR1cm4gdW4kVGVzdCh0aGlzLCBzdHIpO1xuICAgIHZhciByZXN1bHQgPSBjYWxsKGV4ZWMsIHRoaXMsIHN0cik7XG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCAmJiAhaXNPYmplY3QocmVzdWx0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWdFeHAgZXhlYyBtZXRob2QgcmV0dXJuZWQgc29tZXRoaW5nIG90aGVyIHRoYW4gYW4gT2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBQUk9QRVJfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuUFJPUEVSO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG5cbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgbiRUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xudmFyIGdldEZsYWdzID0gdW5jdXJyeVRoaXMocmVnRXhwRmxhZ3MpO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuJFRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbnZhciBJTkNPUlJFQ1RfTkFNRSA9IFBST1BFUl9GVU5DVElPTl9OQU1FICYmIG4kVG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkc7XG5cbi8vIGBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKE5PVF9HRU5FUklDIHx8IElOQ09SUkVDVF9OQU1FKSB7XG4gIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICB2YXIgcCA9ICR0b1N0cmluZyhSLnNvdXJjZSk7XG4gICAgdmFyIHJmID0gUi5mbGFncztcbiAgICB2YXIgZiA9ICR0b1N0cmluZyhyZiA9PT0gdW5kZWZpbmVkICYmIGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBSKSAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSA/IGdldEZsYWdzKFIpIDogcmYpO1xuICAgIHJldHVybiAnLycgKyBwICsgJy8nICsgZjtcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQtb2JqZWN0c1xuY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAn8KCutycuYXQoLTIpICE9PSAnXFx1RDg0Mic7XG59KTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcmVsYXRpdmUtaW5kZXhpbmctbWV0aG9kXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KGluZGV4KSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICB2YXIgbGVuID0gUy5sZW5ndGg7XG4gICAgdmFyIHJlbGF0aXZlSW5kZXggPSB0b0ludGVnZXJPckluZmluaXR5KGluZGV4KTtcbiAgICB2YXIgayA9IHJlbGF0aXZlSW5kZXggPj0gMCA/IHJlbGF0aXZlSW5kZXggOiBsZW4gKyByZWxhdGl2ZUluZGV4O1xuICAgIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogY2hhckF0KFMsIGspO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gY29kZUF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1lbmRzd2l0aCAtLSBzYWZlXG52YXIgdW4kRW5kc1dpdGggPSB1bmN1cnJ5VGhpcygnJy5lbmRzV2l0aCk7XG52YXIgc2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdlbmRzV2l0aCcpO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvcHVsbC83MDJcbnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihTdHJpbmcucHJvdG90eXBlLCAnZW5kc1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5lbmRzd2l0aFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFNRE5fUE9MWUZJTExfQlVHICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyB9LCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdGhhdC5sZW5ndGg7XG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBtaW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSB0b1N0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiB1biRFbmRzV2l0aFxuICAgICAgPyB1biRFbmRzV2l0aCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogc2xpY2UodGhhdCwgZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1mcm9tY29kZXBvaW50IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbnZhciBJTkNPUlJFQ1RfTEVOR1RIID0gISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMTtcblxuLy8gYFN0cmluZy5mcm9tQ29kZVBvaW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLmZyb21jb2RlcG9pbnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9MRU5HVEggfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBGRkZGKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICBlbGVtZW50c1tpXSA9IGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweEQ4MDAsIGNvZGUgJSAweDQwMCArIDB4REMwMCk7XG4gICAgfSByZXR1cm4gam9pbihlbGVtZW50cywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xuXG52YXIgc3RyaW5nSW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykgfSwge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfnN0cmluZ0luZGV4T2YoXG4gICAgICB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKSxcbiAgICAgIHRvU3RyaW5nKG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKSksXG4gICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBNQVRDSCk7XG4gICAgICByZXR1cm4gbWF0Y2hlciA/IGNhbGwobWF0Y2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN0cmluZy1wcm90b3R5cGUtbWF0Y2hhbGwgLS0gc2FmZSAqL1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgTUFUQ0hfQUxMID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpO1xudmFyIFJFR0VYUF9TVFJJTkcgPSAnUmVnRXhwIFN0cmluZyc7XG52YXIgUkVHRVhQX1NUUklOR19JVEVSQVRPUiA9IFJFR0VYUF9TVFJJTkcgKyAnIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFJFR0VYUF9TVFJJTkdfSVRFUkFUT1IpO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgdW4kTWF0Y2hBbGwgPSB1bmN1cnJ5VGhpcygnJy5tYXRjaEFsbCk7XG5cbnZhciBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggPSAhIXVuJE1hdGNoQWxsICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHVuJE1hdGNoQWxsKCdhJywgLy4vKTtcbn0pO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihmdW5jdGlvbiBSZWdFeHBTdHJpbmdJdGVyYXRvcihyZWdleHAsIHN0cmluZywgJGdsb2JhbCwgZnVsbFVuaWNvZGUpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogUkVHRVhQX1NUUklOR19JVEVSQVRPUixcbiAgICByZWdleHA6IHJlZ2V4cCxcbiAgICBzdHJpbmc6IHN0cmluZyxcbiAgICBnbG9iYWw6ICRnbG9iYWwsXG4gICAgdW5pY29kZTogZnVsbFVuaWNvZGUsXG4gICAgZG9uZTogZmFsc2VcbiAgfSk7XG59LCBSRUdFWFBfU1RSSU5HLCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB2YXIgUiA9IHN0YXRlLnJlZ2V4cDtcbiAgdmFyIFMgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBtYXRjaCA9IHJlZ0V4cEV4ZWMoUiwgUyk7XG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogc3RhdGUuZG9uZSA9IHRydWUgfTtcbiAgaWYgKHN0YXRlLmdsb2JhbCkge1xuICAgIGlmICh0b1N0cmluZyhtYXRjaFswXSkgPT09ICcnKSBSLmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChSLmxhc3RJbmRleCksIHN0YXRlLnVuaWNvZGUpO1xuICAgIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogZmFsc2UgfTtcbiAgfVxuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBmYWxzZSB9O1xufSk7XG5cbnZhciAkbWF0Y2hBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciBTID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgdmFyIEMsIGZsYWdzVmFsdWUsIGZsYWdzLCBtYXRjaGVyLCAkZ2xvYmFsLCBmdWxsVW5pY29kZTtcbiAgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihSLCBSZWdFeHApO1xuICBmbGFnc1ZhbHVlID0gUi5mbGFncztcbiAgaWYgKGZsYWdzVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBpc1Byb3RvdHlwZU9mKFJlZ0V4cFByb3RvdHlwZSwgUikgJiYgISgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZSkpIHtcbiAgICBmbGFnc1ZhbHVlID0gZ2V0RmxhZ3MoUik7XG4gIH1cbiAgZmxhZ3MgPSBmbGFnc1ZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKGZsYWdzVmFsdWUpO1xuICBtYXRjaGVyID0gbmV3IEMoQyA9PT0gUmVnRXhwID8gUi5zb3VyY2UgOiBSLCBmbGFncyk7XG4gICRnbG9iYWwgPSAhIX5zdHJpbmdJbmRleE9mKGZsYWdzLCAnZycpO1xuICBmdWxsVW5pY29kZSA9ICEhfnN0cmluZ0luZGV4T2YoZmxhZ3MsICd1Jyk7XG4gIG1hdGNoZXIubGFzdEluZGV4ID0gdG9MZW5ndGgoUi5sYXN0SW5kZXgpO1xuICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihtYXRjaGVyLCBTLCAkZ2xvYmFsLCBmdWxsVW5pY29kZSk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hhbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVggfSwge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XG4gICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgIHZhciBmbGFncywgUywgbWF0Y2hlciwgcng7XG4gICAgaWYgKHJlZ2V4cCAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNSZWdFeHAocmVnZXhwKSkge1xuICAgICAgICBmbGFncyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJ2ZsYWdzJyBpbiBSZWdFeHBQcm90b3R5cGVcbiAgICAgICAgICA/IHJlZ2V4cC5mbGFnc1xuICAgICAgICAgIDogZ2V0RmxhZ3MocmVnZXhwKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKCF+c3RyaW5nSW5kZXhPZihmbGFncywgJ2cnKSkgdGhyb3cgVHlwZUVycm9yKCdgLm1hdGNoQWxsYCBkb2VzIG5vdCBhbGxvdyBub24tZ2xvYmFsIHJlZ2V4ZXMnKTtcbiAgICAgIH1cbiAgICAgIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiB1biRNYXRjaEFsbChPLCByZWdleHApO1xuICAgICAgbWF0Y2hlciA9IGdldE1ldGhvZChyZWdleHAsIE1BVENIX0FMTCk7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gdW5kZWZpbmVkICYmIElTX1BVUkUgJiYgY2xhc3NvZihyZWdleHApID09ICdSZWdFeHAnKSBtYXRjaGVyID0gJG1hdGNoQWxsO1xuICAgICAgaWYgKG1hdGNoZXIpIHJldHVybiBjYWxsKG1hdGNoZXIsIHJlZ2V4cCwgTyk7XG4gICAgfSBlbHNlIGlmIChXT1JLU19XSVRIX05PTl9HTE9CQUxfUkVHRVgpIHJldHVybiB1biRNYXRjaEFsbChPLCByZWdleHApO1xuICAgIFMgPSB0b1N0cmluZyhPKTtcbiAgICByeCA9IG5ldyBSZWdFeHAocmVnZXhwLCAnZycpO1xuICAgIHJldHVybiBJU19QVVJFID8gY2FsbCgkbWF0Y2hBbGwsIHJ4LCBTKSA6IHJ4W01BVENIX0FMTF0oUyk7XG4gIH1cbn0pO1xuXG5JU19QVVJFIHx8IE1BVENIX0FMTCBpbiBSZWdFeHBQcm90b3R5cGUgfHwgcmVkZWZpbmUoUmVnRXhwUHJvdG90eXBlLCBNQVRDSF9BTEwsICRtYXRjaEFsbCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFkRW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5lbmQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkRW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkRW5kKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRTdGFydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkJykuc3RhcnQ7XG52YXIgV0VCS0lUX0JVRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcGFkLXdlYmtpdC1idWcnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZHN0YXJ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogV0VCS0lUX0JVRyB9LCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRTdGFydCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxuLy8gYFN0cmluZy5yYXdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucmF3XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHJhdzogZnVuY3Rpb24gcmF3KHRlbXBsYXRlKSB7XG4gICAgdmFyIHJhd1RlbXBsYXRlID0gdG9JbmRleGVkT2JqZWN0KHRvT2JqZWN0KHRlbXBsYXRlKS5yYXcpO1xuICAgIHZhciBsaXRlcmFsU2VnbWVudHMgPSBsZW5ndGhPZkFycmF5TGlrZShyYXdUZW1wbGF0ZSk7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChsaXRlcmFsU2VnbWVudHMgPiBpKSB7XG4gICAgICBwdXNoKGVsZW1lbnRzLCB0b1N0cmluZyhyYXdUZW1wbGF0ZVtpKytdKSk7XG4gICAgICBpZiAoaSA9PT0gbGl0ZXJhbFNlZ21lbnRzKSByZXR1cm4gam9pbihlbGVtZW50cywgJycpO1xuICAgICAgaWYgKGkgPCBhcmd1bWVudHNMZW5ndGgpIHB1c2goZWxlbWVudHMsIHRvU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGVhdFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlIH0sIHtcbiAgcmVwZWF0OiByZXBlYXRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvcHJlZmVyLWVzY2FwZS1yZXBsYWNlbWVudC1kb2xsYXItY2hhciAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbi8vIFNhZmFyaSA8PSAxMy4wLjMoPykgc3Vic3RpdHV0ZXMgbnRoIGNhcHR1cmUgd2hlcmUgbj5tIHdpdGggYW4gZW1wdHkgc3RyaW5nXG52YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAoLy4vW1JFUExBQ0VdKSB7XG4gICAgcmV0dXJuIC8uL1tSRVBMQUNFXSgnYScsICckMCcpID09PSAnJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tdXNlbGVzcy1kb2xsYXItcmVwbGFjZW1lbnRzIC0tIGZhbHNlIHBvc2l0aXZlXG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygncmVwbGFjZScsIGZ1bmN0aW9uIChfLCBuYXRpdmVSZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZWFyY2hWYWx1ZSwgUkVQTEFDRSk7XG4gICAgICByZXR1cm4gcmVwbGFjZXJcbiAgICAgICAgPyBjYWxsKHJlcGxhY2VyLCBzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IGNhbGwobmF0aXZlUmVwbGFjZSwgdG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PSAnc3RyaW5nJyAmJlxuICAgICAgICBzdHJpbmdJbmRleE9mKHJlcGxhY2VWYWx1ZSwgVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSAmJlxuICAgICAgICBzdHJpbmdJbmRleE9mKHJlcGxhY2VWYWx1ZSwgJyQ8JykgPT09IC0xXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByeCwgUywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcHVzaChyZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXJPckluZmluaXR5KHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIHB1c2goY2FwdHVyZXMsIG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IGNvbmNhdChbbWF0Y2hlZF0sIGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcHVzaChyZXBsYWNlckFyZ3MsIG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IHRvU3RyaW5nKGFwcGx5KHJlcGxhY2VWYWx1ZSwgdW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBSZWdFeHBQcm90b3R5cGUgPSBSZWdFeHAucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZ2V0RmxhZ3MgPSB1bmN1cnJ5VGhpcyhyZWdFeHBGbGFncyk7XG52YXIgaW5kZXhPZiA9IHVuY3VycnlUaGlzKCcnLmluZGV4T2YpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxudmFyIHN0cmluZ0luZGV4T2YgPSBmdW5jdGlvbiAoc3RyaW5nLCBzZWFyY2hWYWx1ZSwgZnJvbUluZGV4KSB7XG4gIGlmIChmcm9tSW5kZXggPiBzdHJpbmcubGVuZ3RoKSByZXR1cm4gLTE7XG4gIGlmIChzZWFyY2hWYWx1ZSA9PT0gJycpIHJldHVybiBmcm9tSW5kZXg7XG4gIHJldHVybiBpbmRleE9mKHN0cmluZywgc2VhcmNoVmFsdWUsIGZyb21JbmRleCk7XG59O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlQWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYWxsXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUgfSwge1xuICByZXBsYWNlQWxsOiBmdW5jdGlvbiByZXBsYWNlQWxsKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgdmFyIElTX1JFR19FWFAsIGZsYWdzLCByZXBsYWNlciwgc3RyaW5nLCBzZWFyY2hTdHJpbmcsIGZ1bmN0aW9uYWxSZXBsYWNlLCBzZWFyY2hMZW5ndGgsIGFkdmFuY2VCeSwgcmVwbGFjZW1lbnQ7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgZW5kT2ZMYXN0TWF0Y2ggPSAwO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBpZiAoc2VhcmNoVmFsdWUgIT0gbnVsbCkge1xuICAgICAgSVNfUkVHX0VYUCA9IGlzUmVnRXhwKHNlYXJjaFZhbHVlKTtcbiAgICAgIGlmIChJU19SRUdfRVhQKSB7XG4gICAgICAgIGZsYWdzID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgnZmxhZ3MnIGluIFJlZ0V4cFByb3RvdHlwZVxuICAgICAgICAgID8gc2VhcmNoVmFsdWUuZmxhZ3NcbiAgICAgICAgICA6IGdldEZsYWdzKHNlYXJjaFZhbHVlKVxuICAgICAgICApKTtcbiAgICAgICAgaWYgKCF+aW5kZXhPZihmbGFncywgJ2cnKSkgdGhyb3cgVHlwZUVycm9yKCdgLnJlcGxhY2VBbGxgIGRvZXMgbm90IGFsbG93IG5vbi1nbG9iYWwgcmVnZXhlcycpO1xuICAgICAgfVxuICAgICAgcmVwbGFjZXIgPSBnZXRNZXRob2Qoc2VhcmNoVmFsdWUsIFJFUExBQ0UpO1xuICAgICAgaWYgKHJlcGxhY2VyKSB7XG4gICAgICAgIHJldHVybiBjYWxsKHJlcGxhY2VyLCBzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoSVNfUFVSRSAmJiBJU19SRUdfRVhQKSB7XG4gICAgICAgIHJldHVybiByZXBsYWNlKHRvU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RyaW5nID0gdG9TdHJpbmcoTyk7XG4gICAgc2VhcmNoU3RyaW5nID0gdG9TdHJpbmcoc2VhcmNoVmFsdWUpO1xuICAgIGZ1bmN0aW9uYWxSZXBsYWNlID0gaXNDYWxsYWJsZShyZXBsYWNlVmFsdWUpO1xuICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IHRvU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgc2VhcmNoTGVuZ3RoID0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgICBhZHZhbmNlQnkgPSBtYXgoMSwgc2VhcmNoTGVuZ3RoKTtcbiAgICBwb3NpdGlvbiA9IHN0cmluZ0luZGV4T2Yoc3RyaW5nLCBzZWFyY2hTdHJpbmcsIDApO1xuICAgIHdoaWxlIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgIHJlcGxhY2VtZW50ID0gZnVuY3Rpb25hbFJlcGxhY2VcbiAgICAgICAgPyB0b1N0cmluZyhyZXBsYWNlVmFsdWUoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiwgc3RyaW5nKSlcbiAgICAgICAgOiBnZXRTdWJzdGl0dXRpb24oc2VhcmNoU3RyaW5nLCBzdHJpbmcsIHBvc2l0aW9uLCBbXSwgdW5kZWZpbmVkLCByZXBsYWNlVmFsdWUpO1xuICAgICAgcmVzdWx0ICs9IHN0cmluZ1NsaWNlKHN0cmluZywgZW5kT2ZMYXN0TWF0Y2gsIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgZW5kT2ZMYXN0TWF0Y2ggPSBwb3NpdGlvbiArIHNlYXJjaExlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gc3RyaW5nSW5kZXhPZihzdHJpbmcsIHNlYXJjaFN0cmluZywgcG9zaXRpb24gKyBhZHZhbmNlQnkpO1xuICAgIH1cbiAgICBpZiAoZW5kT2ZMYXN0TWF0Y2ggPCBzdHJpbmcubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nU2xpY2Uoc3RyaW5nLCBlbmRPZkxhc3RNYXRjaCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zYW1lLXZhbHVlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnc2VhcmNoJywgZnVuY3Rpb24gKFNFQVJDSCwgbmF0aXZlU2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgc2VhcmNoZXIgPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogZ2V0TWV0aG9kKHJlZ2V4cCwgU0VBUkNIKTtcbiAgICAgIHJldHVybiBzZWFyY2hlciA/IGNhbGwoc2VhcmNoZXIsIHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXSh0b1N0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxuICAgIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVTZWFyY2gsIHJ4LCBTKTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcygkcHVzaCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwobmF0aXZlU3BsaXQsIHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBjYWxsKHJlZ2V4cEV4ZWMsIHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFwcGx5KCRwdXNoLCBvdXRwdXQsIGFycmF5U2xpY2UobWF0Y2gsIDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhZXhlYyhzZXBhcmF0b3JDb3B5LCAnJykpIHB1c2gob3V0cHV0LCAnJyk7XG4gICAgICB9IGVsc2UgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBhcnJheVNsaWNlKG91dHB1dCwgMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IGNhbGwobmF0aXZlU3BsaXQsIHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZXBhcmF0b3IsIFNQTElUKTtcbiAgICAgIHJldHVybiBzcGxpdHRlclxuICAgICAgICA/IGNhbGwoc3BsaXR0ZXIsIHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogY2FsbChpbnRlcm5hbFNwbGl0LCB0b1N0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHN0cmluZywgbGltaXQpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByeCwgUywgbGltaXQsIGludGVybmFsU3BsaXQgIT09IG5hdGl2ZVNwbGl0KTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChVTlNVUFBPUlRFRF9ZID8gJ2cnIDogJ3knKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFVOU1VQUE9SVEVEX1kgPyAnXig/OicgKyByeC5zb3VyY2UgKyAnKScgOiByeCwgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFVOU1VQUE9SVEVEX1kgPyAwIDogcTtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgVU5TVVBQT1JURURfWSA/IHN0cmluZ1NsaWNlKFMsIHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaChBLCBzdHJpbmdTbGljZShTLCBwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBwdXNoKEEsIHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQywgVU5TVVBQT1JURURfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgbm90QVJlZ0V4cCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ub3QtYS1yZWdleHAnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtaXMtcmVnZXhwLWxvZ2ljJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXN0YXJ0c3dpdGggLS0gc2FmZVxudmFyIHVuJFN0YXJ0c1dpdGggPSB1bmN1cnJ5VGhpcygnJy5zdGFydHNXaXRoKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ3N0YXJ0c1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ3N0YXJ0c1dpdGgnKTtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3Iud3JpdGFibGU7XG59KCk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHZhciB0aGF0ID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG4gICAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKG1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcbiAgICB2YXIgc2VhcmNoID0gdG9TdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gdW4kU3RhcnRzV2l0aFxuICAgICAgPyB1biRTdGFydHNXaXRoKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHN0cmluZ1NsaWNlKHRoYXQsIGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9wcmVmZXItc3RyaW5nLXNsaWNlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgRk9SQ0VEID0gIScnLnN1YnN0ciB8fCAnYWInLnN1YnN0cigtMSkgIT09ICdiJztcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3Vic3RyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJzdHJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBzdWJzdHI6IGZ1bmN0aW9uIHN1YnN0cihzdGFydCwgbGVuZ3RoKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICB2YXIgc2l6ZSA9IHRoYXQubGVuZ3RoO1xuICAgIHZhciBpbnRTdGFydCA9IHRvSW50ZWdlck9ySW5maW5pdHkoc3RhcnQpO1xuICAgIHZhciBpbnRMZW5ndGgsIGludEVuZDtcbiAgICBpZiAoaW50U3RhcnQgPT09IEluZmluaXR5KSBpbnRTdGFydCA9IDA7XG4gICAgaWYgKGludFN0YXJ0IDwgMCkgaW50U3RhcnQgPSBtYXgoc2l6ZSArIGludFN0YXJ0LCAwKTtcbiAgICBpbnRMZW5ndGggPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHNpemUgOiB0b0ludGVnZXJPckluZmluaXR5KGxlbmd0aCk7XG4gICAgaWYgKGludExlbmd0aCA8PSAwIHx8IGludExlbmd0aCA9PT0gSW5maW5pdHkpIHJldHVybiAnJztcbiAgICBpbnRFbmQgPSBtaW4oaW50U3RhcnQgKyBpbnRMZW5ndGgsIHNpemUpO1xuICAgIHJldHVybiBpbnRTdGFydCA+PSBpbnRFbmQgPyAnJyA6IHN0cmluZ1NsaWNlKHRoYXQsIGludFN0YXJ0LCBpbnRFbmQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHRyaW1FbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS5lbmQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxudmFyIEZPUkNFRCA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1FbmQnKTtcblxudmFyIHRyaW1FbmQgPSBGT1JDRUQgPyBmdW5jdGlvbiB0cmltRW5kKCkge1xuICByZXR1cm4gJHRyaW1FbmQodGhpcyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltc3RhcnQtdHJpbWVuZCAtLSBzYWZlXG59IDogJycudHJpbUVuZDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltRW5kLCB0cmltUmlnaHQgfWAgbWV0aG9kc1xuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1yaWdodFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbUVuZCcsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdHJpbUVuZDogdHJpbUVuZCxcbiAgdHJpbVJpZ2h0OiB0cmltRW5kXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS5zdGFydDtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG52YXIgRk9SQ0VEID0gZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbVN0YXJ0Jyk7XG5cbnZhciB0cmltU3RhcnQgPSBGT1JDRUQgPyBmdW5jdGlvbiB0cmltU3RhcnQoKSB7XG4gIHJldHVybiAkdHJpbVN0YXJ0KHRoaXMpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxufSA6ICcnLnRyaW1TdGFydDtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltU3RhcnQsIHRyaW1MZWZ0IH1gIG1ldGhvZHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNTdHJpbmcucHJvdG90eXBlLnRyaW1sZWZ0XG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIG5hbWU6ICd0cmltU3RhcnQnLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHRyaW1TdGFydDogdHJpbVN0YXJ0LFxuICB0cmltTGVmdDogdHJpbVN0YXJ0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5hbmNob3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmFuY2hvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2FuY2hvcicpIH0sIHtcbiAgYW5jaG9yOiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYmlnYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5iaWdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdiaWcnKSB9LCB7XG4gIGJpZzogZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5ibGlua2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdibGluaycpIH0sIHtcbiAgYmxpbms6IGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJvbGRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJvbGRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdib2xkJykgfSwge1xuICBib2xkOiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZpeGVkXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZml4ZWQnKSB9LCB7XG4gIGZpeGVkOiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRjb2xvcicpIH0sIHtcbiAgZm9udGNvbG9yOiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udHNpemVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRzaXplXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZm9udHNpemUnKSB9LCB7XG4gIGZvbnRzaXplOiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnaXRhbGljcycpIH0sIHtcbiAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmxpbmtgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdsaW5rJykgfSwge1xuICBsaW5rOiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zbWFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc21hbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzbWFsbCcpIH0sIHtcbiAgc21hbGw6IGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN0cmlrZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3RyaWtlXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3RyaWtlJykgfSwge1xuICBzdHJpa2U6IGZ1bmN0aW9uIHN0cmlrZSgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3ViYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdWJcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdWInKSB9LCB7XG4gIHN1YjogZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN1cFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N1cCcpIH0sIHtcbiAgc3VwOiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwidmFyIGNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgRmxvYXQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignRmxvYXQzMicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IHRvSW50ZWdlck9ySW5maW5pdHkoaXQpO1xuICBpZiAocmVzdWx0IDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihcIlRoZSBhcmd1bWVudCBjYW4ndCBiZSBsZXNzIHRoYW4gMFwiKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBGbG9hdDY0QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdGbG9hdDY0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OENsYW1wZWRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDE2JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYFVpbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDMyJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXJlbGF0aXZlLWluZGV4aW5nLW1ldGhvZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnYXQnLCBmdW5jdGlvbiBhdChpbmRleCkge1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciByZWxhdGl2ZUluZGV4ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7XG4gIHZhciBrID0gcmVsYXRpdmVJbmRleCA+PSAwID8gcmVsYXRpdmVJbmRleCA6IGxlbiArIHJlbGF0aXZlSW5kZXg7XG4gIHJldHVybiAoayA8IDAgfHwgayA+PSBsZW4pID8gdW5kZWZpbmVkIDogT1trXTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRBcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIHUkQXJyYXlDb3B5V2l0aGluID0gdW5jdXJyeVRoaXMoJEFycmF5Q29weVdpdGhpbik7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmNvcHl3aXRoaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2NvcHlXaXRoaW4nLCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgcmV0dXJuIHUkQXJyYXlDb3B5V2l0aGluKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHJldHVybiBjYWxsKFxuICAgICRmaWxsLFxuICAgIGFUeXBlZEFycmF5KHRoaXMpLFxuICAgIHZhbHVlLFxuICAgIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsXG4gICAgbGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsdGVyXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgbGlzdCk7XG59KTtcbiIsInZhciBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdCcpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgbGlzdCkge1xuICByZXR1cm4gYXJyYXlGcm9tQ29uc3RydWN0b3JBbmRMaXN0KHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoaW5zdGFuY2UpLCBsaXN0KTtcbn07XG4iLCJ2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGxpc3QpIHtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGxpc3QpO1xuICB2YXIgcmVzdWx0ID0gbmV3IENvbnN0cnVjdG9yKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmluZFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZCcsIGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZpbmQoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kaW5kZXhcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZpbmRJbmRleCcsIGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZEluZGV4KGFUeXBlZEFycmF5KHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZm9yZWFjaFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZm9yRWFjaCcsIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgJGZvckVhY2goYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKS5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kO1xudmFyIHR5cGVkQXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20nKTtcblxuLy8gYCVUeXBlZEFycmF5JS5mcm9tYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLmZyb21cbmV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QoJ2Zyb20nLCB0eXBlZEFycmF5RnJvbSwgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmluY2x1ZGVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmNsdWRlcycsIGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgcmV0dXJuICRpbmNsdWRlcyhhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmluZGV4b2ZcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2luZGV4T2YnLCBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgcmV0dXJuICRpbmRleE9mKGFUeXBlZEFycmF5KHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBBcnJheUl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBhcnJheVZhbHVlcyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLnZhbHVlcyk7XG52YXIgYXJyYXlLZXlzID0gdW5jdXJyeVRoaXMoQXJyYXlJdGVyYXRvcnMua2V5cyk7XG52YXIgYXJyYXlFbnRyaWVzID0gdW5jdXJyeVRoaXMoQXJyYXlJdGVyYXRvcnMuZW50cmllcyk7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGU7XG5cbnZhciBHRU5FUklDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0uY2FsbChbMV0pO1xufSk7XG5cbnZhciBJVEVSQVRPUl9JU19WQUxVRVMgPSAhIVR5cGVkQXJyYXlQcm90b3R5cGVcbiAgJiYgVHlwZWRBcnJheVByb3RvdHlwZS52YWx1ZXNcbiAgJiYgVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzLm5hbWUgPT09ICd2YWx1ZXMnO1xuXG52YXIgdHlwZWRBcnJheVZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgcmV0dXJuIGFycmF5VmFsdWVzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn07XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmVudHJpZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2VudHJpZXMnLCBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICByZXR1cm4gYXJyYXlFbnRyaWVzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0sIEdFTkVSSUMpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUua2V5c1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgna2V5cycsIGZ1bmN0aW9uIGtleXMoKSB7XG4gIHJldHVybiBhcnJheUtleXMoYVR5cGVkQXJyYXkodGhpcykpO1xufSwgR0VORVJJQyk7XG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnZhbHVlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndmFsdWVzJywgdHlwZWRBcnJheVZhbHVlcywgR0VORVJJQyB8fCAhSVRFUkFUT1JfSVNfVkFMVUVTLCB7IG5hbWU6ICd2YWx1ZXMnIH0pO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLUBAaXRlcmF0b3JcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoSVRFUkFUT1IsIHR5cGVkQXJyYXlWYWx1ZXMsIEdFTkVSSUMgfHwgIUlURVJBVE9SX0lTX1ZBTFVFUywgeyBuYW1lOiAndmFsdWVzJyB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICRqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmpvaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2pvaW4nLCBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICByZXR1cm4gJGpvaW4oYVR5cGVkQXJyYXkodGhpcyksIHNlcGFyYXRvcik7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyICRsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmxhc3RpbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdsYXN0SW5kZXhPZicsIGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHJldHVybiBhcHBseSgkbGFzdEluZGV4T2YsIGFUeXBlZEFycmF5KHRoaXMpLCBsZW5ndGggPiAxID8gW3NlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXV0gOiBbc2VhcmNoRWxlbWVudF0pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5tYXA7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5tYXBcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ21hcCcsIGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRtYXAoYVR5cGVkQXJyYXkodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgKHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoTykpKGxlbmd0aCk7XG4gIH0pO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3RvcnMtcmVxdWlyZS13cmFwcGVycycpO1xuXG52YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjtcbnZhciBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLm9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLm9mXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdvZicsIGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IChhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRoaXMpKShsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLmxlZnQ7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZScsIGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gJHJlZHVjZShhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRyZWR1Y2VSaWdodCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5yaWdodDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZWR1Y2VSaWNodGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3JlZHVjZVJpZ2h0JywgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2VSaWdodChhVHlwZWRBcnJheSh0aGlzKSwgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5yZXZlcnNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZXZlcnNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZXZlcnNlJywgZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIgbGVuZ3RoID0gYVR5cGVkQXJyYXkodGhhdCkubGVuZ3RoO1xuICB2YXIgbWlkZGxlID0gZmxvb3IobGVuZ3RoIC8gMik7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciB2YWx1ZTtcbiAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XG4gICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XG4gIH0gcmV0dXJuIHRoYXQ7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b09mZnNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vZmZzZXQnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlO1xudmFyICRzZXQgPSBJbnQ4QXJyYXlQcm90b3R5cGUgJiYgSW50OEFycmF5UHJvdG90eXBlLnNldDtcbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxudmFyIFdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby10eXBlZC1hcnJheXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDIpO1xuICBjYWxsKCRzZXQsIGFycmF5LCB7IGxlbmd0aDogMSwgMDogMyB9LCAxKTtcbiAgcmV0dXJuIGFycmF5WzFdICE9PSAzO1xufSk7XG5cbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTExMjk0IGFuZCBvdGhlclxudmFyIFRPX09CSkVDVF9CVUcgPSBXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMgJiYgQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFycmF5ID0gbmV3IEludDhBcnJheSgyKTtcbiAgYXJyYXkuc2V0KDEpO1xuICBhcnJheS5zZXQoJzInLCAxKTtcbiAgcmV0dXJuIGFycmF5WzBdICE9PSAwIHx8IGFycmF5WzFdICE9PSAyO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2V0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzZXQnLCBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gIGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDEpO1xuICB2YXIgc3JjID0gdG9JbmRleGVkT2JqZWN0KGFycmF5TGlrZSk7XG4gIGlmIChXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMpIHJldHVybiBjYWxsKCRzZXQsIHRoaXMsIHNyYywgb2Zmc2V0KTtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2Uoc3JjKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoJyk7XG4gIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG59LCAhV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTIHx8IFRPX09CSkVDVF9CVUcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby10eXBlZC1hcnJheXMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgbmV3IEludDhBcnJheSgxKS5zbGljZSgpO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnNsaWNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zbGljZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2xpY2UnLCBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gIHZhciBsaXN0ID0gYXJyYXlTbGljZShhVHlwZWRBcnJheSh0aGlzKSwgc3RhcnQsIGVuZCk7XG4gIHZhciBDID0gdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuc29tZTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb21lYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb21lXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb21lJywgZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJHNvbWUoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaW50ZXJuYWxTb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQnKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBGRiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtZmYtdmVyc2lvbicpO1xudmFyIElFX09SX0VER0UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWllLW9yLWVkZ2UnKTtcbnZhciBWOCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIFdFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24nKTtcblxudmFyIEFycmF5ID0gZ2xvYmFsLkFycmF5O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIFVpbnQxNkFycmF5ID0gZ2xvYmFsLlVpbnQxNkFycmF5O1xudmFyIHVuJFNvcnQgPSBVaW50MTZBcnJheSAmJiB1bmN1cnJ5VGhpcyhVaW50MTZBcnJheS5wcm90b3R5cGUuc29ydCk7XG5cbi8vIFdlYktpdFxudmFyIEFDQ0VQVF9JTkNPUlJFQ1RfQVJHVU1FTlRTID0gISF1biRTb3J0ICYmICEoZmFpbHMoZnVuY3Rpb24gKCkge1xuICB1biRTb3J0KG5ldyBVaW50MTZBcnJheSgyKSwgbnVsbCk7XG59KSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHVuJFNvcnQobmV3IFVpbnQxNkFycmF5KDIpLCB7fSk7XG59KSk7XG5cbnZhciBTVEFCTEVfU09SVCA9ICEhdW4kU29ydCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3NDtcbiAgaWYgKEZGKSByZXR1cm4gRkYgPCA2NztcbiAgaWYgKElFX09SX0VER0UpIHJldHVybiB0cnVlO1xuICBpZiAoV0VCS0lUKSByZXR1cm4gV0VCS0lUIDwgNjAyO1xuXG4gIHZhciBhcnJheSA9IG5ldyBVaW50MTZBcnJheSg1MTYpO1xuICB2YXIgZXhwZWN0ZWQgPSBBcnJheSg1MTYpO1xuICB2YXIgaW5kZXgsIG1vZDtcblxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA1MTY7IGluZGV4KyspIHtcbiAgICBtb2QgPSBpbmRleCAlIDQ7XG4gICAgYXJyYXlbaW5kZXhdID0gNTE1IC0gaW5kZXg7XG4gICAgZXhwZWN0ZWRbaW5kZXhdID0gaW5kZXggLSAyICogbW9kICsgMztcbiAgfVxuXG4gIHVuJFNvcnQoYXJyYXksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChhIC8gNCB8IDApIC0gKGIgLyA0IHwgMCk7XG4gIH0pO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDUxNjsgaW5kZXgrKykge1xuICAgIGlmIChhcnJheVtpbmRleF0gIT09IGV4cGVjdGVkW2luZGV4XSkgcmV0dXJuIHRydWU7XG4gIH1cbn0pO1xuXG52YXIgZ2V0U29ydENvbXBhcmUgPSBmdW5jdGlvbiAoY29tcGFyZWZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgcmV0dXJuICtjb21wYXJlZm4oeCwgeSkgfHwgMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmICh5ICE9PSB5KSByZXR1cm4gLTE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICBpZiAoeCAhPT0geCkgcmV0dXJuIDE7XG4gICAgaWYgKHggPT09IDAgJiYgeSA9PT0gMCkgcmV0dXJuIDEgLyB4ID4gMCAmJiAxIC8geSA8IDAgPyAxIDogLTE7XG4gICAgcmV0dXJuIHggPiB5O1xuICB9O1xufTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29ydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29ydFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29ydCcsIGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gIGlmIChjb21wYXJlZm4gIT09IHVuZGVmaW5lZCkgYUNhbGxhYmxlKGNvbXBhcmVmbik7XG4gIGlmIChTVEFCTEVfU09SVCkgcmV0dXJuIHVuJFNvcnQodGhpcywgY29tcGFyZWZuKTtcblxuICByZXR1cm4gaW50ZXJuYWxTb3J0KGFUeXBlZEFycmF5KHRoaXMpLCBnZXRTb3J0Q29tcGFyZShjb21wYXJlZm4pKTtcbn0sICFTVEFCTEVfU09SVCB8fCBBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnN1YmFycmF5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzdWJhcnJheScsIGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgdmFyIE8gPSBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IE8ubGVuZ3RoO1xuICB2YXIgYmVnaW5JbmRleCA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgdmFyIEMgPSB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKE8pO1xuICByZXR1cm4gbmV3IEMoXG4gICAgTy5idWZmZXIsXG4gICAgTy5ieXRlT2Zmc2V0ICsgYmVnaW5JbmRleCAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSBiZWdpbkluZGV4KVxuICApO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG5cbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyICR0b0xvY2FsZVN0cmluZyA9IFtdLnRvTG9jYWxlU3RyaW5nO1xuXG4vLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG52YXIgVE9fTE9DQUxFX1NUUklOR19CVUcgPSAhIUludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICR0b0xvY2FsZVN0cmluZy5jYWxsKG5ldyBJbnQ4QXJyYXkoMSkpO1xufSk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgSW50OEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xufSk7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS50b2xvY2FsZXN0cmluZ1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgndG9Mb2NhbGVTdHJpbmcnLCBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcbiAgcmV0dXJuIGFwcGx5KFxuICAgICR0b0xvY2FsZVN0cmluZyxcbiAgICBUT19MT0NBTEVfU1RSSU5HX0JVRyA/IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcykpIDogYVR5cGVkQXJyYXkodGhpcyksXG4gICAgYXJyYXlTbGljZShhcmd1bWVudHMpXG4gICk7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgVWludDhBcnJheVByb3RvdHlwZSA9IFVpbnQ4QXJyYXkgJiYgVWludDhBcnJheS5wcm90b3R5cGUgfHwge307XG52YXIgYXJyYXlUb1N0cmluZyA9IFtdLnRvU3RyaW5nO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxuaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgYXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBqb2luKHRoaXMpO1xuICB9O1xufVxuXG52YXIgSVNfTk9UX0FSUkFZX01FVEhPRCA9IFVpbnQ4QXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZztcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b1N0cmluZycsIGFycmF5VG9TdHJpbmcsIElTX05PVF9BUlJBWV9NRVRIT0QpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG5cbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIGhleDIgPSAvXltcXGRhLWZdezJ9JC9pO1xudmFyIGhleDQgPSAvXltcXGRhLWZdezR9JC9pO1xuXG4vLyBgdW5lc2NhcGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy11bmVzY2FwZS1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUgfSwge1xuICB1bmVzY2FwZTogZnVuY3Rpb24gdW5lc2NhcGUoc3RyaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBsZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNociwgcGFydDtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNociA9IGNoYXJBdChzdHIsIGluZGV4KyspO1xuICAgICAgaWYgKGNociA9PT0gJyUnKSB7XG4gICAgICAgIGlmIChjaGFyQXQoc3RyLCBpbmRleCkgPT09ICd1Jykge1xuICAgICAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShzdHIsIGluZGV4ICsgMSwgaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoZXhlYyhoZXg0LCBwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZShwYXJzZUludChwYXJ0LCAxNikpO1xuICAgICAgICAgICAgaW5kZXggKz0gNTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0ID0gc3RyaW5nU2xpY2Uoc3RyLCBpbmRleCwgaW5kZXggKyAyKTtcbiAgICAgICAgICBpZiAoZXhlYyhoZXgyLCBwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGZyb21DaGFyQ29kZShwYXJzZUludChwYXJ0LCAxNikpO1xuICAgICAgICAgICAgaW5kZXggKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvbldlYWsgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi13ZWFrJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKS5lbmZvcmNlO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcblxudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBJbnRlcm5hbFdlYWtNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG4vLyBgV2Vha01hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC1jb25zdHJ1Y3RvclxudmFyICRXZWFrTWFwID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuLy8gV2UgY2FuJ3QgdXNlIGZlYXR1cmUgZGV0ZWN0aW9uIGJlY2F1c2UgaXQgY3Jhc2ggc29tZSBvbGQgSUUgYnVpbGRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDg1XG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcbiAgSW50ZXJuYWxXZWFrTWFwID0gY29sbGVjdGlvbldlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgJ1dlYWtNYXAnLCB0cnVlKTtcbiAgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5lbmFibGUoKTtcbiAgdmFyIFdlYWtNYXBQcm90b3R5cGUgPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIHZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG4gIHJlZGVmaW5lQWxsKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGgnKTtcbnZhciBjdG9pID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Jhc2U2NC1tYXAnKS5jdG9pO1xuXG52YXIgZGlzYWxsb3dlZCA9IC9bXlxcZCsvYS16XS9pO1xudmFyIHdoaXRlc3BhY2VzID0gL1tcXHRcXG5cXGZcXHIgXSsvZztcbnZhciBmaW5hbEVxID0gL1s9XSskLztcblxudmFyICRhdG9iID0gZ2V0QnVpbHRJbignYXRvYicpO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGRpc2FsbG93ZWQuZXhlYyk7XG5cbnZhciBOT19TUEFDRVNfSUdOT1JFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gYXRvYignICcpICE9PSAnJztcbn0pO1xuXG52YXIgTk9fQVJHX1JFQ0VJVklOR19DSEVDSyA9ICFOT19TUEFDRVNfSUdOT1JFICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRhdG9iKCk7XG59KTtcblxuLy8gYGF0b2JgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1hdG9iXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX1NQQUNFU19JR05PUkUgfHwgTk9fQVJHX1JFQ0VJVklOR19DSEVDSyB9LCB7XG4gIGF0b2I6IGZ1bmN0aW9uIGF0b2IoZGF0YSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIGlmIChOT19BUkdfUkVDRUlWSU5HX0NIRUNLKSByZXR1cm4gJGF0b2IoZGF0YSk7XG4gICAgdmFyIHN0cmluZyA9IHJlcGxhY2UodG9TdHJpbmcoZGF0YSksIHdoaXRlc3BhY2VzLCAnJyk7XG4gICAgdmFyIG91dHB1dCA9ICcnO1xuICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgdmFyIGJjID0gMDtcbiAgICB2YXIgY2hyLCBicztcbiAgICBpZiAoc3RyaW5nLmxlbmd0aCAlIDQgPT0gMCkge1xuICAgICAgc3RyaW5nID0gcmVwbGFjZShzdHJpbmcsIGZpbmFsRXEsICcnKTtcbiAgICB9XG4gICAgaWYgKHN0cmluZy5sZW5ndGggJSA0ID09IDEgfHwgZXhlYyhkaXNhbGxvd2VkLCBzdHJpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgKGdldEJ1aWx0SW4oJ0RPTUV4Y2VwdGlvbicpKSgnVGhlIHN0cmluZyBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQnLCAnSW52YWxpZENoYXJhY3RlckVycm9yJyk7XG4gICAgfVxuICAgIHdoaWxlIChjaHIgPSBjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbisrKSkge1xuICAgICAgaWYgKGhhc093bihjdG9pLCBjaHIpKSB7XG4gICAgICAgIGJzID0gYmMgJSA0ID8gYnMgKiA2NCArIGN0b2lbY2hyXSA6IGN0b2lbY2hyXTtcbiAgICAgICAgaWYgKGJjKysgJSA0KSBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDI1NSAmIGJzID4+ICgtMiAqIGJjICYgNikpO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIG91dHB1dDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIGl0b2MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYmFzZTY0LW1hcCcpLml0b2M7XG5cbnZhciAkYnRvYSA9IGdldEJ1aWx0SW4oJ2J0b2EnKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcblxudmFyIE5PX0FSR19SRUNFSVZJTkdfQ0hFQ0sgPSAhISRidG9hICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICRidG9hKCk7XG59KTtcblxuLy8gYGJ0b2FgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvd2ViYXBwYXBpcy5odG1sI2RvbS1idG9hXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IE5PX0FSR19SRUNFSVZJTkdfQ0hFQ0sgfSwge1xuICBidG9hOiBmdW5jdGlvbiBidG9hKGRhdGEpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICBpZiAoTk9fQVJHX1JFQ0VJVklOR19DSEVDSykgcmV0dXJuICRidG9hKGRhdGEpO1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhkYXRhKTtcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgbWFwID0gaXRvYztcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlO1xuICAgIHdoaWxlIChjaGFyQXQoc3RyaW5nLCBwb3NpdGlvbikgfHwgKG1hcCA9ICc9JywgcG9zaXRpb24gJSAxKSkge1xuICAgICAgY2hhckNvZGUgPSBjaGFyQ29kZUF0KHN0cmluZywgcG9zaXRpb24gKz0gMyAvIDQpO1xuICAgICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgICB0aHJvdyBuZXcgKGdldEJ1aWx0SW4oJ0RPTUV4Y2VwdGlvbicpKSgnVGhlIHN0cmluZyBjb250YWlucyBjaGFyYWN0ZXJzIG91dHNpZGUgb2YgdGhlIExhdGluMSByYW5nZScsICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICAgICAgb3V0cHV0ICs9IGNoYXJBdChtYXAsIDYzICYgYmxvY2sgPj4gOCAtIHBvc2l0aW9uICUgMSAqIDgpO1xuICAgIH0gcmV0dXJuIG91dHB1dDtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUgJiYgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoICE9PSBmb3JFYWNoKSB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCAnZm9yRWFjaCcsIGZvckVhY2gpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCA9IGZvckVhY2g7XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSB7XG4gICAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSk7XG4gIH1cbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgRE9NVG9rZW5MaXN0UHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZScpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbnZhciBoYW5kbGVQcm90b3R5cGUgPSBmdW5jdGlvbiAoQ29sbGVjdGlvblByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKSB7XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdICE9PSBBcnJheVZhbHVlcykgdHJ5IHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSA9IEFycmF5VmFsdWVzO1xuICAgIH1cbiAgICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCBDT0xMRUNUSU9OX05BTUUpO1xuICAgIH1cbiAgICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIGZvciAodmFyIE1FVEhPRF9OQU1FIGluIEFycmF5SXRlcmF0b3JNZXRob2RzKSB7XG4gICAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKSB0cnkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgTUVUSE9EX05BTUUsIEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgaGFuZGxlUHJvdG90eXBlKGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdICYmIGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdLnByb3RvdHlwZSwgQ09MTEVDVElPTl9OQU1FKTtcbn1cblxuaGFuZGxlUHJvdG90eXBlKERPTVRva2VuTGlzdFByb3RvdHlwZSwgJ0RPTVRva2VuTGlzdCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJ5Tm9kZVJlcXVpcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LW5vZGUtcmVxdWlyZScpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJykuZjtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGVycm9yVG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXJyb3ItdG8tc3RyaW5nJyk7XG52YXIgbm9ybWFsaXplU3RyaW5nQXJndW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm9ybWFsaXplLXN0cmluZy1hcmd1bWVudCcpO1xudmFyIERPTUV4Y2VwdGlvbkNvbnN0YW50cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20tZXhjZXB0aW9uLWNvbnN0YW50cycpO1xudmFyIGNsZWFyRXJyb3JTdGFjayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGVhci1lcnJvci1zdGFjaycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgRE9NX0VYQ0VQVElPTiA9ICdET01FeGNlcHRpb24nO1xudmFyIERBVEFfQ0xPTkVfRVJSID0gJ0RBVEFfQ0xPTkVfRVJSJztcbnZhciBFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG4vLyBOb2RlSlMgPCAxNy4wIGRvZXMgbm90IGV4cG9zZSBgRE9NRXhjZXB0aW9uYCB0byBnbG9iYWxcbnZhciBOYXRpdmVET01FeGNlcHRpb24gPSBnZXRCdWlsdEluKERPTV9FWENFUFRJT04pIHx8IChmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gTm9kZUpTIDwgMTUuMCBkb2VzIG5vdCBleHBvc2UgYE1lc3NhZ2VDaGFubmVsYCB0byBnbG9iYWxcbiAgICB2YXIgTWVzc2FnZUNoYW5uZWwgPSBnZXRCdWlsdEluKCdNZXNzYWdlQ2hhbm5lbCcpIHx8IHRyeU5vZGVSZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpLk1lc3NhZ2VDaGFubmVsO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby13ZWFrLW1hcCwgdW5pY29ybi9yZXF1aXJlLXBvc3QtbWVzc2FnZS10YXJnZXQtb3JpZ2luIC0tIHNhZmVcbiAgICBuZXcgTWVzc2FnZUNoYW5uZWwoKS5wb3J0MS5wb3N0TWVzc2FnZShuZXcgV2Vha01hcCgpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IubmFtZSA9PSBEQVRBX0NMT05FX0VSUiAmJiBlcnJvci5jb2RlID09IDI1KSByZXR1cm4gZXJyb3IuY29uc3RydWN0b3I7XG4gIH1cbn0pKCk7XG52YXIgTmF0aXZlRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gTmF0aXZlRE9NRXhjZXB0aW9uICYmIE5hdGl2ZURPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG52YXIgRXJyb3JQcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihET01fRVhDRVBUSU9OKTtcbnZhciBIQVNfU1RBQ0sgPSAnc3RhY2snIGluIEVycm9yKERPTV9FWENFUFRJT04pO1xuXG52YXIgY29kZUZvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBoYXNPd24oRE9NRXhjZXB0aW9uQ29uc3RhbnRzLCBuYW1lKSAmJiBET01FeGNlcHRpb25Db25zdGFudHNbbmFtZV0ubSA/IERPTUV4Y2VwdGlvbkNvbnN0YW50c1tuYW1lXS5jIDogMDtcbn07XG5cbnZhciAkRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24gRE9NRXhjZXB0aW9uKCkge1xuICBhbkluc3RhbmNlKHRoaXMsIERPTUV4Y2VwdGlvblByb3RvdHlwZSk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgbWVzc2FnZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pO1xuICB2YXIgbmFtZSA9IG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50KGFyZ3VtZW50c0xlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sICdFcnJvcicpO1xuICB2YXIgY29kZSA9IGNvZGVGb3IobmFtZSk7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IERPTV9FWENFUFRJT04sXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGNvZGU6IGNvZGVcbiAgfSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxuICBpZiAoSEFTX1NUQUNLKSB7XG4gICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gICAgZXJyb3IubmFtZSA9IERPTV9FWENFUFRJT047XG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0YWNrJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIGNsZWFyRXJyb3JTdGFjayhlcnJvci5zdGFjaywgMSkpKTtcbiAgfVxufTtcblxudmFyIERPTUV4Y2VwdGlvblByb3RvdHlwZSA9ICRET01FeGNlcHRpb24ucHJvdG90eXBlID0gY3JlYXRlKEVycm9yUHJvdG90eXBlKTtcblxudmFyIGNyZWF0ZUdldHRlckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZ2V0OiBnZXQgfTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBjcmVhdGVHZXR0ZXJEZXNjcmlwdG9yKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldO1xuICB9KTtcbn07XG5cbmlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydGllcyhET01FeGNlcHRpb25Qcm90b3R5cGUsIHtcbiAgbmFtZTogZ2V0dGVyRm9yKCduYW1lJyksXG4gIG1lc3NhZ2U6IGdldHRlckZvcignbWVzc2FnZScpLFxuICBjb2RlOiBnZXR0ZXJGb3IoJ2NvZGUnKVxufSk7XG5cbmRlZmluZVByb3BlcnR5KERPTUV4Y2VwdGlvblByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsICRET01FeGNlcHRpb24pKTtcblxuLy8gRkYzNi0gRE9NRXhjZXB0aW9uIGlzIGEgZnVuY3Rpb24sIGJ1dCBjYW4ndCBiZSBjb25zdHJ1Y3RlZFxudmFyIElOQ09SUkVDVF9DT05TVFJVQ1RPUiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEobmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigpIGluc3RhbmNlb2YgRXJyb3IpO1xufSk7XG5cbi8vIFNhZmFyaSAxMC4xIC8gQ2hyb21lIDMyLSAvIElFOC0gRE9NRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyBidWdzXG52YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9IElOQ09SUkVDVF9DT05TVFJVQ1RPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBFcnJvclByb3RvdHlwZS50b1N0cmluZyAhPT0gZXJyb3JUb1N0cmluZyB8fCBTdHJpbmcobmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKSkgIT09ICcyOiAxJztcbn0pO1xuXG4vLyBEZW5vIDEuNi4zLSBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvZGUganVzdCBtaXNzZWRcbnZhciBJTkNPUlJFQ1RfQ09ERSA9IElOQ09SUkVDVF9DT05TVFJVQ1RPUiB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgTmF0aXZlRE9NRXhjZXB0aW9uKDEsICdEYXRhQ2xvbmVFcnJvcicpLmNvZGUgIT09IDI1O1xufSk7XG5cbi8vIERlbm8gMS42LjMtIERPTUV4Y2VwdGlvbiBjb25zdGFudHMganVzdCBtaXNzZWRcbnZhciBNSVNTRURfQ09OU1RBTlRTID0gSU5DT1JSRUNUX0NPTlNUUlVDVE9SXG4gIHx8IE5hdGl2ZURPTUV4Y2VwdGlvbltEQVRBX0NMT05FX0VSUl0gIT09IDI1XG4gIHx8IE5hdGl2ZURPTUV4Y2VwdGlvblByb3RvdHlwZVtEQVRBX0NMT05FX0VSUl0gIT09IDI1O1xuXG52YXIgRk9SQ0VEX0NPTlNUUlVDVE9SID0gSVNfUFVSRSA/IElOQ09SUkVDVF9UT19TVFJJTkcgfHwgSU5DT1JSRUNUX0NPREUgfHwgTUlTU0VEX0NPTlNUQU5UUyA6IElOQ09SUkVDVF9DT05TVFJVQ1RPUjtcblxuLy8gYERPTUV4Y2VwdGlvbmAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vd2ViaWRsLnNwZWMud2hhdHdnLm9yZy8jaWRsLURPTUV4Y2VwdGlvblxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfQ09OU1RSVUNUT1IgfSwge1xuICBET01FeGNlcHRpb246IEZPUkNFRF9DT05TVFJVQ1RPUiA/ICRET01FeGNlcHRpb24gOiBOYXRpdmVET01FeGNlcHRpb25cbn0pO1xuXG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvbiA9IGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTik7XG52YXIgUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSA9IFBvbHlmaWxsZWRET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG5pZiAoSU5DT1JSRUNUX1RPX1NUUklORyAmJiAoSVNfUFVSRSB8fCBOYXRpdmVET01FeGNlcHRpb24gPT09IFBvbHlmaWxsZWRET01FeGNlcHRpb24pKSB7XG4gIHJlZGVmaW5lKFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICd0b1N0cmluZycsIGVycm9yVG9TdHJpbmcpO1xufVxuXG5pZiAoSU5DT1JSRUNUX0NPREUgJiYgREVTQ1JJUFRPUlMgJiYgTmF0aXZlRE9NRXhjZXB0aW9uID09PSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSB7XG4gIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb2RlJywgY3JlYXRlR2V0dGVyRGVzY3JpcHRvcihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvZGVGb3IoYW5PYmplY3QodGhpcykubmFtZSk7XG4gIH0pKTtcbn1cblxuZm9yICh2YXIga2V5IGluIERPTUV4Y2VwdGlvbkNvbnN0YW50cykgaWYgKGhhc093bihET01FeGNlcHRpb25Db25zdGFudHMsIGtleSkpIHtcbiAgdmFyIGNvbnN0YW50ID0gRE9NRXhjZXB0aW9uQ29uc3RhbnRzW2tleV07XG4gIHZhciBjb25zdGFudE5hbWUgPSBjb25zdGFudC5zO1xuICB2YXIgZGVzY3JpcHRvciA9IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig2LCBjb25zdGFudC5jKTtcbiAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvbiwgY29uc3RhbnROYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSwgZGVzY3JpcHRvcik7XG4gIH1cbiAgaWYgKCFoYXNPd24oUG9seWZpbGxlZERPTUV4Y2VwdGlvblByb3RvdHlwZSwgY29uc3RhbnROYW1lKSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsIGNvbnN0YW50TmFtZSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbiIsInZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gc2FmZVxuICAgIGlmIChJU19OT0RFKSByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiByZXF1aXJlKFwiJyArIG5hbWUgKyAnXCIpJykoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIG5vcm1hbGl6ZVN0cmluZ0FyZ3VtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vcm1hbGl6ZS1zdHJpbmctYXJndW1lbnQnKTtcbnZhciBET01FeGNlcHRpb25Db25zdGFudHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWV4Y2VwdGlvbi1jb25zdGFudHMnKTtcbnZhciBjbGVhckVycm9yU3RhY2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xlYXItZXJyb3Itc3RhY2snKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIERPTV9FWENFUFRJT04gPSAnRE9NRXhjZXB0aW9uJztcbnZhciBFcnJvciA9IGdldEJ1aWx0SW4oJ0Vycm9yJyk7XG52YXIgTmF0aXZlRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKTtcblxudmFyICRET01FeGNlcHRpb24gPSBmdW5jdGlvbiBET01FeGNlcHRpb24oKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgRE9NRXhjZXB0aW9uUHJvdG90eXBlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtZXNzYWdlID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIHZhciBuYW1lID0gbm9ybWFsaXplU3RyaW5nQXJndW1lbnQoYXJndW1lbnRzTGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgJ0Vycm9yJyk7XG4gIHZhciB0aGF0ID0gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbihtZXNzYWdlLCBuYW1lKTtcbiAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XG4gIGVycm9yLm5hbWUgPSBET01fRVhDRVBUSU9OO1xuICBkZWZpbmVQcm9wZXJ0eSh0aGF0LCAnc3RhY2snLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgY2xlYXJFcnJvclN0YWNrKGVycm9yLnN0YWNrLCAxKSkpO1xuICBpbmhlcml0SWZSZXF1aXJlZCh0aGF0LCB0aGlzLCAkRE9NRXhjZXB0aW9uKTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG52YXIgRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gJERPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBOYXRpdmVET01FeGNlcHRpb24ucHJvdG90eXBlO1xuXG52YXIgRVJST1JfSEFTX1NUQUNLID0gJ3N0YWNrJyBpbiBFcnJvcihET01fRVhDRVBUSU9OKTtcbnZhciBET01fRVhDRVBUSU9OX0hBU19TVEFDSyA9ICdzdGFjaycgaW4gbmV3IE5hdGl2ZURPTUV4Y2VwdGlvbigxLCAyKTtcbnZhciBGT1JDRURfQ09OU1RSVUNUT1IgPSBFUlJPUl9IQVNfU1RBQ0sgJiYgIURPTV9FWENFUFRJT05fSEFTX1NUQUNLO1xuXG4vLyBgRE9NRXhjZXB0aW9uYCBjb25zdHJ1Y3RvciBwYXRjaCBmb3IgYC5zdGFja2Agd2hlcmUgaXQncyByZXF1aXJlZFxuLy8gaHR0cHM6Ly93ZWJpZGwuc3BlYy53aGF0d2cub3JnLyNlcy1ET01FeGNlcHRpb24tc3BlY2lhbG5lc3NcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRURfQ09OU1RSVUNUT1IgfSwgeyAvLyBUT0RPOiBmaXggZXhwb3J0IGxvZ2ljXG4gIERPTUV4Y2VwdGlvbjogRk9SQ0VEX0NPTlNUUlVDVE9SID8gJERPTUV4Y2VwdGlvbiA6IE5hdGl2ZURPTUV4Y2VwdGlvblxufSk7XG5cbnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRJbihET01fRVhDRVBUSU9OKTtcbnZhciBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlID0gUG9seWZpbGxlZERPTUV4Y2VwdGlvbi5wcm90b3R5cGU7XG5cbmlmIChQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSB7XG4gIGlmICghSVNfUFVSRSkge1xuICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb25Qcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBQb2x5ZmlsbGVkRE9NRXhjZXB0aW9uKSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gRE9NRXhjZXB0aW9uQ29uc3RhbnRzKSBpZiAoaGFzT3duKERPTUV4Y2VwdGlvbkNvbnN0YW50cywga2V5KSkge1xuICAgIHZhciBjb25zdGFudCA9IERPTUV4Y2VwdGlvbkNvbnN0YW50c1trZXldO1xuICAgIHZhciBjb25zdGFudE5hbWUgPSBjb25zdGFudC5zO1xuICAgIGlmICghaGFzT3duKFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSkpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KFBvbHlmaWxsZWRET01FeGNlcHRpb24sIGNvbnN0YW50TmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDYsIGNvbnN0YW50LmMpKTtcbiAgICB9XG4gIH1cbn1cbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG5cbnZhciBET01fRVhDRVBUSU9OID0gJ0RPTUV4Y2VwdGlvbic7XG5cbnNldFRvU3RyaW5nVGFnKGdldEJ1aWx0SW4oRE9NX0VYQ0VQVElPTiksIERPTV9FWENFUFRJT04pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpO1xuXG52YXIgRk9SQ0VEID0gIWdsb2JhbC5zZXRJbW1lZGlhdGUgfHwgIWdsb2JhbC5jbGVhckltbWVkaWF0ZTtcblxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlL1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBgc2V0SW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1zZXRJbW1lZGlhdGVcbiAgc2V0SW1tZWRpYXRlOiB0YXNrLnNldCxcbiAgLy8gYGNsZWFySW1tZWRpYXRlYCBtZXRob2RcbiAgLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1jbGVhckltbWVkaWF0ZVxuICBjbGVhckltbWVkaWF0ZTogdGFzay5jbGVhclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcblxuLy8gYHF1ZXVlTWljcm90YXNrYCBtZXRob2Rcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjZG9tLXF1ZXVlbWljcm90YXNrXG4kKHsgZ2xvYmFsOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBub1RhcmdldEdldDogdHJ1ZSB9LCB7XG4gIHF1ZXVlTWljcm90YXNrOiBmdW5jdGlvbiBxdWV1ZU1pY3JvdGFzayhmbikge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIGFDYWxsYWJsZShmbik7XG4gICAgdmFyIGRvbWFpbiA9IElTX05PREUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0QnVpbHRpbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Vycm9yLXN0YWNrLWluc3RhbGxhYmxlJyk7XG5cbnZhciBPYmplY3QgPSBnbG9iYWwuT2JqZWN0O1xudmFyIERhdGUgPSBnbG9iYWwuRGF0ZTtcbnZhciBFcnJvciA9IGdsb2JhbC5FcnJvcjtcbnZhciBFdmFsRXJyb3IgPSBnbG9iYWwuRXZhbEVycm9yO1xudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbnZhciBSZWZlcmVuY2VFcnJvciA9IGdsb2JhbC5SZWZlcmVuY2VFcnJvcjtcbnZhciBTeW50YXhFcnJvciA9IGdsb2JhbC5TeW50YXhFcnJvcjtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFVSSUVycm9yID0gZ2xvYmFsLlVSSUVycm9yO1xudmFyIFBlcmZvcm1hbmNlTWFyayA9IGdsb2JhbC5QZXJmb3JtYW5jZU1hcms7XG52YXIgV2ViQXNzZW1ibHkgPSBnbG9iYWwuV2ViQXNzZW1ibHk7XG52YXIgQ29tcGlsZUVycm9yID0gV2ViQXNzZW1ibHkgJiYgV2ViQXNzZW1ibHkuQ29tcGlsZUVycm9yIHx8IEVycm9yO1xudmFyIExpbmtFcnJvciA9IFdlYkFzc2VtYmx5ICYmIFdlYkFzc2VtYmx5LkxpbmtFcnJvciB8fCBFcnJvcjtcbnZhciBSdW50aW1lRXJyb3IgPSBXZWJBc3NlbWJseSAmJiBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IgfHwgRXJyb3I7XG52YXIgRE9NRXhjZXB0aW9uID0gZ2V0QnVpbHRpbignRE9NRXhjZXB0aW9uJyk7XG52YXIgU2V0ID0gZ2V0QnVpbHRpbignU2V0Jyk7XG52YXIgTWFwID0gZ2V0QnVpbHRpbignTWFwJyk7XG52YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbnZhciBtYXBIYXMgPSB1bmN1cnJ5VGhpcyhNYXBQcm90b3R5cGUuaGFzKTtcbnZhciBtYXBHZXQgPSB1bmN1cnJ5VGhpcyhNYXBQcm90b3R5cGUuZ2V0KTtcbnZhciBtYXBTZXQgPSB1bmN1cnJ5VGhpcyhNYXBQcm90b3R5cGUuc2V0KTtcbnZhciBzZXRBZGQgPSB1bmN1cnJ5VGhpcyhTZXQucHJvdG90eXBlLmFkZCk7XG52YXIgb2JqZWN0S2V5cyA9IGdldEJ1aWx0aW4oJ09iamVjdCcsICdrZXlzJyk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIGJvb2xlYW5WYWx1ZU9mID0gdW5jdXJyeVRoaXModHJ1ZS52YWx1ZU9mKTtcbnZhciBudW1iZXJWYWx1ZU9mID0gdW5jdXJyeVRoaXMoMS4wLnZhbHVlT2YpO1xudmFyIHN0cmluZ1ZhbHVlT2YgPSB1bmN1cnJ5VGhpcygnJy52YWx1ZU9mKTtcbnZhciBnZXRGbGFncyA9IHVuY3VycnlUaGlzKHJlZ0V4cEZsYWdzKTtcbnZhciBnZXRUaW1lID0gdW5jdXJyeVRoaXMoRGF0ZS5wcm90b3R5cGUuZ2V0VGltZSk7XG52YXIgUEVSRk9STUFOQ0VfTUFSSyA9IHVpZCgnc3RydWN0dXJlZENsb25lJyk7XG52YXIgREFUQV9DTE9ORV9FUlJPUiA9ICdEYXRhQ2xvbmVFcnJvcic7XG52YXIgVFJBTlNGRVJSSU5HID0gJ1RyYW5zZmVycmluZyc7XG5cbnZhciBjaGVja0Jhc2ljU2VtYW50aWMgPSBmdW5jdGlvbiAoc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24pIHtcbiAgcmV0dXJuICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNldDEgPSBuZXcgZ2xvYmFsLlNldChbN10pO1xuICAgIHZhciBzZXQyID0gc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb24oc2V0MSk7XG4gICAgdmFyIG51bWJlciA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKE9iamVjdCg3KSk7XG4gICAgcmV0dXJuIHNldDIgPT0gc2V0MSB8fCAhc2V0Mi5oYXMoNykgfHwgdHlwZW9mIG51bWJlciAhPSAnb2JqZWN0JyB8fCBudW1iZXIgIT0gNztcbiAgfSkgJiYgc3RydWN0dXJlZENsb25lSW1wbGVtZW50YXRpb247XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvcHVsbC81NzQ5XG52YXIgY2hlY2tOZXdFcnJvcnNTZW1hbnRpYyA9IGZ1bmN0aW9uIChzdHJ1Y3R1cmVkQ2xvbmVJbXBsZW1lbnRhdGlvbikge1xuICByZXR1cm4gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9IHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uKG5ldyBnbG9iYWwuQWdncmVnYXRlRXJyb3IoWzFdLCBQRVJGT1JNQU5DRV9NQVJLLCB7IGNhdXNlOiAzIH0pKTtcbiAgICByZXR1cm4gdGVzdC5uYW1lICE9ICdBZ2dyZWdhdGVFcnJvcicgfHwgdGVzdC5lcnJvcnNbMF0gIT0gMSB8fCB0ZXN0Lm1lc3NhZ2UgIT0gUEVSRk9STUFOQ0VfTUFSSyB8fCB0ZXN0LmNhdXNlICE9IDM7XG4gIH0pICYmIHN0cnVjdHVyZWRDbG9uZUltcGxlbWVudGF0aW9uO1xufTtcblxuLy8gRkY5NCssIFNhZmFyaSBUUDEzNCssIENocm9tZSBDYW5hcnkgOTgrLCBOb2RlSlMgMTcuMCssIERlbm8gMS4xMytcbi8vIGN1cnJlbnQgRkYgYW5kIFNhZmFyaSBpbXBsZW1lbnRhdGlvbnMgY2FuJ3QgY2xvbmUgZXJyb3JzXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTU2NjA0XG4vLyBubyBvbmUgb2YgY3VycmVudCBpbXBsZW1lbnRhdGlvbnMgc3VwcG9ydHMgbmV3IChodG1sLzU3NDkpIGVycm9yIGNsb25pbmcgc2VtYW50aWNcbnZhciBuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUgPSBnbG9iYWwuc3RydWN0dXJlZENsb25lO1xuXG52YXIgRk9SQ0VEX1JFUExBQ0VNRU5UID0gSVNfUFVSRSB8fCAhY2hlY2tOZXdFcnJvcnNTZW1hbnRpYyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUpO1xuXG4vLyBDaHJvbWUgODIrLCBTYWZhcmkgMTQuMSssIERlbm8gMS4xMStcbi8vIENocm9tZSA3OC04MSBpbXBsZW1lbnRhdGlvbiBzd2FwcyBgLm5hbWVgIGFuZCBgLm1lc3NhZ2VgIG9mIGNsb25lZCBgRE9NRXhjZXB0aW9uYFxuLy8gU2FmYXJpIDE0LjEgaW1wbGVtZW50YXRpb24gZG9lc24ndCBjbG9uZSBzb21lIGBSZWdFeHBgIGZsYWdzLCBzbyByZXF1aXJlcyBhIHdvcmthcm91bmRcbi8vIGN1cnJlbnQgU2FmYXJpIGltcGxlbWVudGF0aW9uIGNhbid0IGNsb25lIGVycm9yc1xuLy8gRGVubyAxLjItMS4xMCBpbXBsZW1lbnRhdGlvbnMgdG9vIG5haXZlXG4vLyBOb2RlSlMgMTYuMCsgZG9lcyBub3QgaGF2ZSBgUGVyZm9ybWFuY2VNYXJrYCBjb25zdHJ1Y3Rvciwgc3RydWN0dXJlZCBjbG9uaW5nIGltcGxlbWVudGF0aW9uXG4vLyAgIGZyb20gYHBlcmZvcm1hbmNlLm1hcmtgIGlzIHRvbyBuYWl2ZSBhbmQgY2FuJ3QgY2xvbmUsIGZvciBleGFtcGxlLCBgUmVnRXhwYCBvciBzb21lIGJveGVkIHByaW1pdGl2ZXNcbi8vICAgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy80MDg0MFxuLy8gbm8gb25lIG9mIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zIHN1cHBvcnRzIG5ldyAoaHRtbC81NzQ5KSBlcnJvciBjbG9uaW5nIHNlbWFudGljXG52YXIgc3RydWN0dXJlZENsb25lRnJvbU1hcmsgPSAhbmF0aXZlU3RydWN0dXJlZENsb25lICYmIGNoZWNrQmFzaWNTZW1hbnRpYyhmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIG5ldyBQZXJmb3JtYW5jZU1hcmsoUEVSRk9STUFOQ0VfTUFSSywgeyBkZXRhaWw6IHZhbHVlIH0pLmRldGFpbDtcbn0pO1xuXG52YXIgbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSA9IGNoZWNrQmFzaWNTZW1hbnRpYyhuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUpIHx8IHN0cnVjdHVyZWRDbG9uZUZyb21NYXJrO1xuXG52YXIgdGhyb3dVbmNsb25lYWJsZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1VuY2xvbmVhYmxlIHR5cGU6ICcgKyB0eXBlLCBEQVRBX0NMT05FX0VSUk9SKTtcbn07XG5cbnZhciB0aHJvd1VucG9seWZpbGxhYmxlID0gZnVuY3Rpb24gKHR5cGUsIGtpbmQpIHtcbiAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbigoa2luZCB8fCAnQ2xvbmluZycpICsgJyBvZiAnICsgdHlwZSArICcgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gdGhpcyBlbmdpbmUnLCBEQVRBX0NMT05FX0VSUk9SKTtcbn07XG5cbnZhciBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCA9IGZ1bmN0aW9uICh2YWx1ZSwgbWFwKSB7XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHRocm93VW5jbG9uZWFibGUoJ1N5bWJvbCcpO1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAvLyBlZmZlY3RpdmVseSBwcmVzZXJ2ZXMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICBpZiAobWFwKSB7XG4gICAgaWYgKG1hcEhhcyhtYXAsIHZhbHVlKSkgcmV0dXJuIG1hcEdldChtYXAsIHZhbHVlKTtcbiAgfSBlbHNlIG1hcCA9IG5ldyBNYXAoKTtcblxuICB2YXIgdHlwZSA9IGNsYXNzb2YodmFsdWUpO1xuICB2YXIgZGVlcCA9IGZhbHNlO1xuICB2YXIgQywgbmFtZSwgY2xvbmVkLCBkYXRhVHJhbnNmZXIsIGksIGxlbmd0aCwga2V5cywga2V5LCBzb3VyY2UsIHRhcmdldDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBcnJheSc6XG4gICAgICBjbG9uZWQgPSBbXTtcbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgIGNsb25lZCA9IHt9O1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgICAgY2xvbmVkID0gbmV3IE1hcCgpO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdTZXQnOlxuICAgICAgY2xvbmVkID0gbmV3IFNldCgpO1xuICAgICAgZGVlcCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgLy8gaW4gdGhpcyBibG9jayBiZWNhdXNlIG9mIGEgU2FmYXJpIDE0LjEgYnVnXG4gICAgICAvLyBvbGQgRkYgZG9lcyBub3QgY2xvbmUgcmVnZXhlcyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLCBzbyBnZXQgdGhlIHNvdXJjZSBhbmQgZmxhZ3MgZGlyZWN0bHlcbiAgICAgIGNsb25lZCA9IG5ldyBSZWdFeHAodmFsdWUuc291cmNlLCAnZmxhZ3MnIGluIHZhbHVlID8gdmFsdWUuZmxhZ3MgOiBnZXRGbGFncyh2YWx1ZSkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRXJyb3InOlxuICAgICAgbmFtZSA9IHZhbHVlLm5hbWU7XG4gICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgY2FzZSAnQWdncmVnYXRlRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IGdldEJ1aWx0aW4oJ0FnZ3JlZ2F0ZUVycm9yJykoW10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFdmFsRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IEV2YWxFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdSYW5nZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSYW5nZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1JlZmVyZW5jZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBSZWZlcmVuY2VFcnJvcigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdTeW50YXhFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gU3ludGF4RXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVHlwZUVycm9yJzpcbiAgICAgICAgICBjbG9uZWQgPSBUeXBlRXJyb3IoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVVJJRXJyb3InOlxuICAgICAgICAgIGNsb25lZCA9IFVSSUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0NvbXBpbGVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gQ29tcGlsZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0xpbmtFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gTGlua0Vycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1J1bnRpbWVFcnJvcic6XG4gICAgICAgICAgY2xvbmVkID0gUnVudGltZUVycm9yKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY2xvbmVkID0gRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGRlZXAgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRE9NRXhjZXB0aW9uJzpcbiAgICAgIGNsb25lZCA9IG5ldyBET01FeGNlcHRpb24odmFsdWUubWVzc2FnZSwgdmFsdWUubmFtZSk7XG4gICAgICBkZWVwID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RhdGFWaWV3JzpcbiAgICBjYXNlICdJbnQ4QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQ4QXJyYXknOlxuICAgIGNhc2UgJ1VpbnQ4Q2xhbXBlZEFycmF5JzpcbiAgICBjYXNlICdJbnQxNkFycmF5JzpcbiAgICBjYXNlICdVaW50MTZBcnJheSc6XG4gICAgY2FzZSAnSW50MzJBcnJheSc6XG4gICAgY2FzZSAnVWludDMyQXJyYXknOlxuICAgIGNhc2UgJ0Zsb2F0MzJBcnJheSc6XG4gICAgY2FzZSAnRmxvYXQ2NEFycmF5JzpcbiAgICBjYXNlICdCaWdJbnQ2NEFycmF5JzpcbiAgICBjYXNlICdCaWdVaW50NjRBcnJheSc6XG4gICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgLy8gaW4gc29tZSBvbGQgZW5naW5lcyBsaWtlIFNhZmFyaSA5LCB0eXBlb2YgQyBpcyAnb2JqZWN0J1xuICAgICAgLy8gb24gVWludDhDbGFtcGVkQXJyYXkgb3Igc29tZSBvdGhlciBjb25zdHJ1Y3RvcnNcbiAgICAgIGlmICghaXNPYmplY3QoQykpIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICBjbG9uZWQgPSBuZXcgQyhcbiAgICAgICAgLy8gdGhpcyBpcyBzYWZlLCBzaW5jZSBhcnJheWJ1ZmZlciBjYW5ub3QgaGF2ZSBjaXJjdWxhciByZWZlcmVuY2VzXG4gICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLmJ1ZmZlciwgbWFwKSxcbiAgICAgICAgdmFsdWUuYnl0ZU9mZnNldCxcbiAgICAgICAgdHlwZSA9PT0gJ0RhdGFWaWV3JyA/IHZhbHVlLmJ5dGVMZW5ndGggOiB2YWx1ZS5sZW5ndGhcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdET01RdWFkJzpcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZCA9IG5ldyBET01RdWFkKFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAxLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAyLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnAzLCBtYXApLFxuICAgICAgICAgIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnA0LCBtYXApXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAobmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSkge1xuICAgICAgICAgIGNsb25lZCA9IG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUodmFsdWUpO1xuICAgICAgICB9IGVsc2UgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ZpbGVMaXN0JzpcbiAgICAgIEMgPSBnbG9iYWwuRGF0YVRyYW5zZmVyO1xuICAgICAgaWYgKGlzQ29uc3RydWN0b3IoQykpIHtcbiAgICAgICAgZGF0YVRyYW5zZmVyID0gbmV3IEMoKTtcbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UodmFsdWUpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkYXRhVHJhbnNmZXIuaXRlbXMuYWRkKHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlW2ldLCBtYXApKTtcbiAgICAgICAgfVxuICAgICAgICBjbG9uZWQgPSBkYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgICB9IGVsc2UgaWYgKG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUpIHtcbiAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0ltYWdlRGF0YSc6XG4gICAgICAvLyBTYWZhcmkgOSBJbWFnZURhdGEgaXMgYSBjb25zdHJ1Y3RvciwgYnV0IHR5cGVvZiBJbWFnZURhdGEgaXMgJ29iamVjdCdcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZCA9IG5ldyBJbWFnZURhdGEoXG4gICAgICAgICAgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUuZGF0YSwgbWFwKSxcbiAgICAgICAgICB2YWx1ZS53aWR0aCxcbiAgICAgICAgICB2YWx1ZS5oZWlnaHQsXG4gICAgICAgICAgeyBjb2xvclNwYWNlOiB2YWx1ZS5jb2xvclNwYWNlIH1cbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChuYXRpdmVSZXN0cmljdGVkU3RydWN0dXJlZENsb25lKSB7XG4gICAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgfSBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKG5hdGl2ZVJlc3RyaWN0ZWRTdHJ1Y3R1cmVkQ2xvbmUpIHtcbiAgICAgICAgY2xvbmVkID0gbmF0aXZlUmVzdHJpY3RlZFN0cnVjdHVyZWRDbG9uZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Ugc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ0JpZ0ludCc6XG4gICAgICAgICAgLy8gY2FuIGJlIGEgM3JkIHBhcnR5IHBvbHlmaWxsXG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KHZhbHVlLnZhbHVlT2YoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0Jvb2xlYW4nOlxuICAgICAgICAgIGNsb25lZCA9IE9iamVjdChib29sZWFuVmFsdWVPZih2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOdW1iZXInOlxuICAgICAgICAgIGNsb25lZCA9IE9iamVjdChudW1iZXJWYWx1ZU9mKHZhbHVlKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1N0cmluZyc6XG4gICAgICAgICAgY2xvbmVkID0gT2JqZWN0KHN0cmluZ1ZhbHVlT2YodmFsdWUpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRGF0ZSc6XG4gICAgICAgICAgY2xvbmVkID0gbmV3IERhdGUoZ2V0VGltZSh2YWx1ZSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdBcnJheUJ1ZmZlcic6XG4gICAgICAgICAgQyA9IGdsb2JhbC5EYXRhVmlldztcbiAgICAgICAgICAvLyBgQXJyYXlCdWZmZXIjc2xpY2VgIGlzIG5vdCBhdmFpbGFibGUgaW4gSUUxMFxuICAgICAgICAgIC8vIGBBcnJheUJ1ZmZlciNzbGljZWAgYW5kIGBEYXRhVmlld2AgYXJlIG5vdCBhdmFpbGFibGUgaW4gb2xkIEZGXG4gICAgICAgICAgaWYgKCFDICYmIHR5cGVvZiB2YWx1ZS5zbGljZSAhPSAnZnVuY3Rpb24nKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIC8vIGRldGFjaGVkIGJ1ZmZlcnMgdGhyb3dzIGluIGBEYXRhVmlld2AgYW5kIGAuc2xpY2VgXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUuc2xpY2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjbG9uZWQgPSB2YWx1ZS5zbGljZSgwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxlbmd0aCA9IHZhbHVlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgIGNsb25lZCA9IG5ldyBBcnJheUJ1ZmZlcihsZW5ndGgpO1xuICAgICAgICAgICAgICBzb3VyY2UgPSBuZXcgQyh2YWx1ZSk7XG4gICAgICAgICAgICAgIHRhcmdldCA9IG5ldyBDKGNsb25lZCk7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRhcmdldC5zZXRVaW50OChpLCBzb3VyY2UuZ2V0VWludDgoaSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ0FycmF5QnVmZmVyIGlzIGRldGFjaGVkJywgREFUQV9DTE9ORV9FUlJPUik7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnU2hhcmVkQXJyYXlCdWZmZXInOlxuICAgICAgICAgIC8vIFNoYXJlZEFycmF5QnVmZmVyIHNob3VsZCB1c2Ugc2hhcmVkIG1lbW9yeSwgd2UgY2FuJ3QgcG9seWZpbGwgaXQsIHNvIHJldHVybiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICBjbG9uZWQgPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnQmxvYic6XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNsb25lZCA9IHZhbHVlLnNsaWNlKDAsIHZhbHVlLnNpemUsIHZhbHVlLnR5cGUpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0RPTVBvaW50JzpcbiAgICAgICAgY2FzZSAnRE9NUG9pbnRSZWFkT25seSc6XG4gICAgICAgICAgQyA9IGdsb2JhbFt0eXBlXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gQy5mcm9tUG9pbnRcbiAgICAgICAgICAgICAgPyBDLmZyb21Qb2ludCh2YWx1ZSlcbiAgICAgICAgICAgICAgOiBuZXcgQyh2YWx1ZS54LCB2YWx1ZS55LCB2YWx1ZS56LCB2YWx1ZS53KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdET01SZWN0JzpcbiAgICAgICAgY2FzZSAnRE9NUmVjdFJlYWRPbmx5JzpcbiAgICAgICAgICBDID0gZ2xvYmFsW3R5cGVdO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBDLmZyb21SZWN0XG4gICAgICAgICAgICAgID8gQy5mcm9tUmVjdCh2YWx1ZSlcbiAgICAgICAgICAgICAgOiBuZXcgQyh2YWx1ZS54LCB2YWx1ZS55LCB2YWx1ZS53aWR0aCwgdmFsdWUuaGVpZ2h0KTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdET01NYXRyaXgnOlxuICAgICAgICBjYXNlICdET01NYXRyaXhSZWFkT25seSc6XG4gICAgICAgICAgQyA9IGdsb2JhbFt0eXBlXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2xvbmVkID0gQy5mcm9tTWF0cml4XG4gICAgICAgICAgICAgID8gQy5mcm9tTWF0cml4KHZhbHVlKVxuICAgICAgICAgICAgICA6IG5ldyBDKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICB9IGJyZWFrO1xuICAgICAgICBjYXNlICdBdWRpb0RhdGEnOlxuICAgICAgICBjYXNlICdWaWRlb0ZyYW1lJzpcbiAgICAgICAgICBpZiAoIWlzQ2FsbGFibGUodmFsdWUuY2xvbmUpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSB2YWx1ZS5jbG9uZSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvd1VuY2xvbmVhYmxlKHR5cGUpO1xuICAgICAgICAgIH0gYnJlYWs7XG4gICAgICAgIGNhc2UgJ0ZpbGUnOlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjbG9uZWQgPSBuZXcgRmlsZShbdmFsdWVdLCB2YWx1ZS5uYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSk7XG4gICAgICAgICAgfSBicmVhaztcbiAgICAgICAgY2FzZSAnQ3J5cHRvS2V5JzpcbiAgICAgICAgY2FzZSAnR1BVQ29tcGlsYXRpb25NZXNzYWdlJzpcbiAgICAgICAgY2FzZSAnR1BVQ29tcGlsYXRpb25JbmZvJzpcbiAgICAgICAgY2FzZSAnSW1hZ2VCaXRtYXAnOlxuICAgICAgICBjYXNlICdSVENDZXJ0aWZpY2F0ZSc6XG4gICAgICAgIGNhc2UgJ1dlYkFzc2VtYmx5Lk1vZHVsZSc6XG4gICAgICAgICAgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlKTtcbiAgICAgICAgICAvLyBicmVhayBvbWl0dGVkXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3dVbmNsb25lYWJsZSh0eXBlKTtcbiAgICAgIH1cbiAgfVxuXG4gIG1hcFNldChtYXAsIHZhbHVlLCBjbG9uZWQpO1xuXG4gIGlmIChkZWVwKSBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdBcnJheSc6XG4gICAgY2FzZSAnT2JqZWN0JzpcbiAgICAgIGtleXMgPSBvYmplY3RLZXlzKHZhbHVlKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGtleXMpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkoY2xvbmVkLCBrZXksIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlW2tleV0sIG1hcCkpO1xuICAgICAgfSBicmVhaztcbiAgICBjYXNlICdNYXAnOlxuICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodiwgaykge1xuICAgICAgICBtYXBTZXQoY2xvbmVkLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbChrLCBtYXApLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2LCBtYXApKTtcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnU2V0JzpcbiAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgc2V0QWRkKGNsb25lZCwgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodiwgbWFwKSk7XG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0Vycm9yJzpcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShjbG9uZWQsICdtZXNzYWdlJywgc3RydWN0dXJlZENsb25lSW50ZXJuYWwodmFsdWUubWVzc2FnZSwgbWFwKSk7XG4gICAgICBpZiAoaGFzT3duKHZhbHVlLCAnY2F1c2UnKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoY2xvbmVkLCAnY2F1c2UnLCBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5jYXVzZSwgbWFwKSk7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PSAnQWdncmVnYXRlRXJyb3InKSB7XG4gICAgICAgIGNsb25lZC5lcnJvcnMgPSBzdHJ1Y3R1cmVkQ2xvbmVJbnRlcm5hbCh2YWx1ZS5lcnJvcnMsIG1hcCk7XG4gICAgICB9IC8vIGJyZWFrIG9taXR0ZWRcbiAgICBjYXNlICdET01FeGNlcHRpb24nOlxuICAgICAgaWYgKEVSUk9SX1NUQUNLX0lOU1RBTExBQkxFKSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShjbG9uZWQsICdzdGFjaycsIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLnN0YWNrLCBtYXApKTtcbiAgICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZWQ7XG59O1xuXG52YXIgUFJPUEVSX1RSQU5TRkVSID0gbmF0aXZlU3RydWN0dXJlZENsb25lICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoOCk7XG4gIHZhciBjbG9uZSA9IG5hdGl2ZVN0cnVjdHVyZWRDbG9uZShidWZmZXIsIHsgdHJhbnNmZXI6IFtidWZmZXJdIH0pO1xuICByZXR1cm4gYnVmZmVyLmJ5dGVMZW5ndGggIT0gMCB8fCBjbG9uZS5ieXRlTGVuZ3RoICE9IDg7XG59KTtcblxudmFyIHRyeVRvVHJhbnNmZXIgPSBmdW5jdGlvbiAocmF3VHJhbnNmZXIsIG1hcCkge1xuICBpZiAoIWlzT2JqZWN0KHJhd1RyYW5zZmVyKSkgdGhyb3cgVHlwZUVycm9yKCdUcmFuc2ZlciBvcHRpb24gY2Fubm90IGJlIGNvbnZlcnRlZCB0byBhIHNlcXVlbmNlJyk7XG5cbiAgdmFyIHRyYW5zZmVyID0gW107XG5cbiAgaXRlcmF0ZShyYXdUcmFuc2ZlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcHVzaCh0cmFuc2ZlciwgYW5PYmplY3QodmFsdWUpKTtcbiAgfSk7XG5cbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UodHJhbnNmZXIpO1xuICB2YXIgdmFsdWUsIHR5cGUsIEMsIHRyYW5zZmVycmVkQXJyYXksIHRyYW5zZmVycmVkLCBjYW52YXMsIGNvbnRleHQ7XG5cbiAgaWYgKFBST1BFUl9UUkFOU0ZFUikge1xuICAgIHRyYW5zZmVycmVkQXJyYXkgPSBuYXRpdmVTdHJ1Y3R1cmVkQ2xvbmUodHJhbnNmZXIsIHsgdHJhbnNmZXI6IHRyYW5zZmVyIH0pO1xuICAgIHdoaWxlIChpIDwgbGVuZ3RoKSBtYXBTZXQobWFwLCB0cmFuc2ZlcltpXSwgdHJhbnNmZXJyZWRBcnJheVtpKytdKTtcbiAgfSBlbHNlIHdoaWxlIChpIDwgbGVuZ3RoKSB7XG4gICAgdmFsdWUgPSB0cmFuc2ZlcltpKytdO1xuICAgIGlmIChtYXBIYXMobWFwLCB2YWx1ZSkpIHRocm93IG5ldyBET01FeGNlcHRpb24oJ0R1cGxpY2F0ZSB0cmFuc2ZlcmFibGUnLCBEQVRBX0NMT05FX0VSUk9SKTtcblxuICAgIHR5cGUgPSBjbGFzc29mKHZhbHVlKTtcblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAnSW1hZ2VCaXRtYXAnOlxuICAgICAgICBDID0gZ2xvYmFsLk9mZnNjcmVlbkNhbnZhcztcbiAgICAgICAgaWYgKCFpc0NvbnN0cnVjdG9yKEMpKSB0aHJvd1VucG9seWZpbGxhYmxlKHR5cGUsIFRSQU5TRkVSUklORyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FudmFzID0gbmV3IEModmFsdWUud2lkdGgsIHZhbHVlLmhlaWdodCk7XG4gICAgICAgICAgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCdiaXRtYXByZW5kZXJlcicpO1xuICAgICAgICAgIGNvbnRleHQudHJhbnNmZXJGcm9tSW1hZ2VCaXRtYXAodmFsdWUpO1xuICAgICAgICAgIHRyYW5zZmVycmVkID0gY2FudmFzLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXVkaW9EYXRhJzpcbiAgICAgIGNhc2UgJ1ZpZGVvRnJhbWUnOlxuICAgICAgICBpZiAoIWlzQ2FsbGFibGUodmFsdWUuY2xvbmUpIHx8ICFpc0NhbGxhYmxlKHZhbHVlLmNsb3NlKSkgdGhyb3dVbnBvbHlmaWxsYWJsZSh0eXBlLCBUUkFOU0ZFUlJJTkcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRyYW5zZmVycmVkID0gdmFsdWUuY2xvbmUoKTtcbiAgICAgICAgICB2YWx1ZS5jbG9zZSgpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnQXJyYXlCdWZmZXInOlxuICAgICAgY2FzZSAnTWVzc2FnZVBvcnQnOlxuICAgICAgY2FzZSAnT2Zmc2NyZWVuQ2FudmFzJzpcbiAgICAgIGNhc2UgJ1JlYWRhYmxlU3RyZWFtJzpcbiAgICAgIGNhc2UgJ1RyYW5zZm9ybVN0cmVhbSc6XG4gICAgICBjYXNlICdXcml0YWJsZVN0cmVhbSc6XG4gICAgICAgIHRocm93VW5wb2x5ZmlsbGFibGUodHlwZSwgVFJBTlNGRVJSSU5HKTtcbiAgICB9XG5cbiAgICBpZiAodHJhbnNmZXJyZWQgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignVGhpcyBvYmplY3QgY2Fubm90IGJlIHRyYW5zZmVycmVkOiAnICsgdHlwZSwgREFUQV9DTE9ORV9FUlJPUik7XG4gICAgbWFwU2V0KG1hcCwgdmFsdWUsIHRyYW5zZmVycmVkKTtcbiAgfVxufTtcblxuJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgc2hhbTogIVBST1BFUl9UUkFOU0ZFUiwgZm9yY2VkOiBGT1JDRURfUkVQTEFDRU1FTlQgfSwge1xuICBzdHJ1Y3R1cmVkQ2xvbmU6IGZ1bmN0aW9uIHN0cnVjdHVyZWRDbG9uZSh2YWx1ZSAvKiAsIHsgdHJhbnNmZXIgfSAqLykge1xuICAgIHZhciBvcHRpb25zID0gdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSkgPiAxID8gYW5PYmplY3QoYXJndW1lbnRzWzFdKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdHJhbnNmZXIgPSBvcHRpb25zID8gb3B0aW9ucy50cmFuc2ZlciA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwO1xuXG4gICAgaWYgKHRyYW5zZmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1hcCA9IG5ldyBNYXAoKTtcbiAgICAgIHRyeVRvVHJhbnNmZXIodHJhbnNmZXIsIG1hcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cnVjdHVyZWRDbG9uZUludGVybmFsKHZhbHVlLCBtYXApO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xuXG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIEZ1bmN0aW9uID0gZ2xvYmFsLkZ1bmN0aW9uO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzY2hlZHVsZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0IC8qICwgLi4uYXJndW1lbnRzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMjtcbiAgICB2YXIgZm4gPSBpc0NhbGxhYmxlKGhhbmRsZXIpID8gaGFuZGxlciA6IEZ1bmN0aW9uKGhhbmRsZXIpO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gYXJyYXlTbGljZShhcmd1bWVudHMsIDIpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBzY2hlZHVsZXIoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgIH0gOiBmbiwgdGltZW91dCk7XG4gIH07XG59O1xuXG4vLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI3RpbWVyc1xuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZm9yY2VkOiBNU0lFIH0sIHtcbiAgLy8gYHNldFRpbWVvdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXR0aW1lb3V0XG4gIHNldFRpbWVvdXQ6IHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICAvLyBgc2V0SW50ZXJ2YWxgIG1ldGhvZFxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS90aW1lcnMtYW5kLXVzZXItcHJvbXB0cy5odG1sI2RvbS1zZXRpbnRlcnZhbFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvcicpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtdXJsJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKS5mO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcbnZhciBhcnJheUZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlJyk7XG52YXIgY29kZUF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jb2RlQXQ7XG52YXIgdG9BU0NJSSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWknKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgVVJMU2VhcmNoUGFyYW1zTW9kdWxlID0gcmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxVUkxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKCdVUkwnKTtcbnZhciBVUkxTZWFyY2hQYXJhbXMgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuVVJMU2VhcmNoUGFyYW1zO1xudmFyIGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUgPSBVUkxTZWFyY2hQYXJhbXNNb2R1bGUuZ2V0U3RhdGU7XG5cbnZhciBOYXRpdmVVUkwgPSBnbG9iYWwuVVJMO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKC8uLy5leGVjKTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xudmFyIHBvcCA9IHVuY3VycnlUaGlzKFtdLnBvcCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzaGlmdCA9IHVuY3VycnlUaGlzKFtdLnNoaWZ0KTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciB0b0xvd2VyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvTG93ZXJDYXNlKTtcbnZhciB1bnNoaWZ0ID0gdW5jdXJyeVRoaXMoW10udW5zaGlmdCk7XG5cbnZhciBJTlZBTElEX0FVVEhPUklUWSA9ICdJbnZhbGlkIGF1dGhvcml0eSc7XG52YXIgSU5WQUxJRF9TQ0hFTUUgPSAnSW52YWxpZCBzY2hlbWUnO1xudmFyIElOVkFMSURfSE9TVCA9ICdJbnZhbGlkIGhvc3QnO1xudmFyIElOVkFMSURfUE9SVCA9ICdJbnZhbGlkIHBvcnQnO1xuXG52YXIgQUxQSEEgPSAvW2Etel0vaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tb2JzY3VyZS1yYW5nZSAtLSBzYWZlXG52YXIgQUxQSEFOVU1FUklDID0gL1tcXGQrLS5hLXpdL2k7XG52YXIgRElHSVQgPSAvXFxkLztcbnZhciBIRVhfU1RBUlQgPSAvXjB4L2k7XG52YXIgT0NUID0gL15bMC03XSskLztcbnZhciBERUMgPSAvXlxcZCskLztcbnZhciBIRVggPSAvXltcXGRhLWZdKyQvaTtcbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovXG52YXIgRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVCA9IC9bXFwwXFx0XFxuXFxyICMlLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQgPSAvW1xcMFxcdFxcblxcciAjLzo8Pj9AW1xcXFxcXF1efF0vO1xudmFyIExFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcXHUwMDAwLVxcdTAwMjBdK3xbXFx1MDAwMC1cXHUwMDIwXSskL2c7XG52YXIgVEFCX0FORF9ORVdfTElORSA9IC9bXFx0XFxuXFxyXS9nO1xuLyogZXNsaW50LWVuYWJsZSByZWdleHAvbm8tY29udHJvbC1jaGFyYWN0ZXIgLS0gc2FmZSAqL1xudmFyIEVPRjtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpcHY0LW51bWJlci1wYXJzZXJcbnZhciBwYXJzZUlQdjQgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgdmFyIHBhcnRzID0gc3BsaXQoaW5wdXQsICcuJyk7XG4gIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7XG4gIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHtcbiAgICBwYXJ0cy5sZW5ndGgtLTtcbiAgfVxuICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcbiAgaWYgKHBhcnRzTGVuZ3RoID4gNCkgcmV0dXJuIGlucHV0O1xuICBudW1iZXJzID0gW107XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2luZGV4XTtcbiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0O1xuICAgIHJhZGl4ID0gMTA7XG4gICAgaWYgKHBhcnQubGVuZ3RoID4gMSAmJiBjaGFyQXQocGFydCwgMCkgPT0gJzAnKSB7XG4gICAgICByYWRpeCA9IGV4ZWMoSEVYX1NUQVJULCBwYXJ0KSA/IDE2IDogODtcbiAgICAgIHBhcnQgPSBzdHJpbmdTbGljZShwYXJ0LCByYWRpeCA9PSA4ID8gMSA6IDIpO1xuICAgIH1cbiAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgIG51bWJlciA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghZXhlYyhyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgsIHBhcnQpKSByZXR1cm4gaW5wdXQ7XG4gICAgICBudW1iZXIgPSBwYXJzZUludChwYXJ0LCByYWRpeCk7XG4gICAgfVxuICAgIHB1c2gobnVtYmVycywgbnVtYmVyKTtcbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdO1xuICAgIGlmIChpbmRleCA9PSBwYXJ0c0xlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChudW1iZXIgPj0gcG93KDI1NiwgNSAtIHBhcnRzTGVuZ3RoKSkgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsO1xuICB9XG4gIGlwdjQgPSBwb3AobnVtYmVycyk7XG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG51bWJlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgaXB2NCArPSBudW1iZXJzW2luZGV4XSAqIHBvdygyNTYsIDMgLSBpbmRleCk7XG4gIH1cbiAgcmV0dXJuIGlwdjQ7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaXB2Ni1wYXJzZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG52YXIgcGFyc2VJUHY2ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xuICB2YXIgcGllY2VJbmRleCA9IDA7XG4gIHZhciBjb21wcmVzcyA9IG51bGw7XG4gIHZhciBwb2ludGVyID0gMDtcbiAgdmFyIHZhbHVlLCBsZW5ndGgsIG51bWJlcnNTZWVuLCBpcHY0UGllY2UsIG51bWJlciwgc3dhcHMsIHN3YXA7XG5cbiAgdmFyIGNociA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2hhckF0KGlucHV0LCBwb2ludGVyKTtcbiAgfTtcblxuICBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgaWYgKGNoYXJBdChpbnB1dCwgMSkgIT0gJzonKSByZXR1cm47XG4gICAgcG9pbnRlciArPSAyO1xuICAgIHBpZWNlSW5kZXgrKztcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XG4gIH1cbiAgd2hpbGUgKGNocigpKSB7XG4gICAgaWYgKHBpZWNlSW5kZXggPT0gOCkgcmV0dXJuO1xuICAgIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICAgIGlmIChjb21wcmVzcyAhPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgcGllY2VJbmRleCsrO1xuICAgICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhbHVlID0gbGVuZ3RoID0gMDtcbiAgICB3aGlsZSAobGVuZ3RoIDwgNCAmJiBleGVjKEhFWCwgY2hyKCkpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICogMTYgKyBwYXJzZUludChjaHIoKSwgMTYpO1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgbGVuZ3RoKys7XG4gICAgfVxuICAgIGlmIChjaHIoKSA9PSAnLicpIHtcbiAgICAgIGlmIChsZW5ndGggPT0gMCkgcmV0dXJuO1xuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHJldHVybjtcbiAgICAgIG51bWJlcnNTZWVuID0gMDtcbiAgICAgIHdoaWxlIChjaHIoKSkge1xuICAgICAgICBpcHY0UGllY2UgPSBudWxsO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPiAwKSB7XG4gICAgICAgICAgaWYgKGNocigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKztcbiAgICAgICAgICBlbHNlIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWV4ZWMoRElHSVQsIGNocigpKSkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAoZXhlYyhESUdJVCwgY2hyKCkpKSB7XG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQoY2hyKCksIDEwKTtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSBpcHY0UGllY2UgPSBudW1iZXI7XG4gICAgICAgICAgZWxzZSBpZiAoaXB2NFBpZWNlID09IDApIHJldHVybjtcbiAgICAgICAgICBlbHNlIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyO1xuICAgICAgICAgIGlmIChpcHY0UGllY2UgPiAyNTUpIHJldHVybjtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAyNTYgKyBpcHY0UGllY2U7XG4gICAgICAgIG51bWJlcnNTZWVuKys7XG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA9PSAyIHx8IG51bWJlcnNTZWVuID09IDQpIHBpZWNlSW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGlmIChudW1iZXJzU2VlbiAhPSA0KSByZXR1cm47XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNocigpID09ICc6Jykge1xuICAgICAgcG9pbnRlcisrO1xuICAgICAgaWYgKCFjaHIoKSkgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoY2hyKCkpIHJldHVybjtcbiAgICBhZGRyZXNzW3BpZWNlSW5kZXgrK10gPSB2YWx1ZTtcbiAgfVxuICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcbiAgICBzd2FwcyA9IHBpZWNlSW5kZXggLSBjb21wcmVzcztcbiAgICBwaWVjZUluZGV4ID0gNztcbiAgICB3aGlsZSAocGllY2VJbmRleCAhPSAwICYmIHN3YXBzID4gMCkge1xuICAgICAgc3dhcCA9IGFkZHJlc3NbcGllY2VJbmRleF07XG4gICAgICBhZGRyZXNzW3BpZWNlSW5kZXgtLV0gPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTtcbiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyAtLXN3YXBzXSA9IHN3YXA7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBpZWNlSW5kZXggIT0gOCkgcmV0dXJuO1xuICByZXR1cm4gYWRkcmVzcztcbn07XG5cbnZhciBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChpcHY2KSB7XG4gIHZhciBtYXhJbmRleCA9IG51bGw7XG4gIHZhciBtYXhMZW5ndGggPSAxO1xuICB2YXIgY3VyclN0YXJ0ID0gbnVsbDtcbiAgdmFyIGN1cnJMZW5ndGggPSAwO1xuICB2YXIgaW5kZXggPSAwO1xuICBmb3IgKDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgaWYgKGlwdjZbaW5kZXhdICE9PSAwKSB7XG4gICAgICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgICBtYXhJbmRleCA9IGN1cnJTdGFydDtcbiAgICAgICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGN1cnJTdGFydCA9IG51bGw7XG4gICAgICBjdXJyTGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkgY3VyclN0YXJ0ID0gaW5kZXg7XG4gICAgICArK2N1cnJMZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmIChjdXJyTGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDtcbiAgfVxuICByZXR1cm4gbWF4SW5kZXg7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3Qtc2VyaWFsaXppbmdcbnZhciBzZXJpYWxpemVIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHtcbiAgdmFyIHJlc3VsdCwgaW5kZXgsIGNvbXByZXNzLCBpZ25vcmUwO1xuICAvLyBpcHY0XG4gIGlmICh0eXBlb2YgaG9zdCA9PSAnbnVtYmVyJykge1xuICAgIHJlc3VsdCA9IFtdO1xuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHtcbiAgICAgIHVuc2hpZnQocmVzdWx0LCBob3N0ICUgMjU2KTtcbiAgICAgIGhvc3QgPSBmbG9vcihob3N0IC8gMjU2KTtcbiAgICB9IHJldHVybiBqb2luKHJlc3VsdCwgJy4nKTtcbiAgLy8gaXB2NlxuICB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7XG4gICAgcmVzdWx0ID0gJyc7XG4gICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoaWdub3JlMCAmJiBob3N0W2luZGV4XSA9PT0gMCkgY29udGludWU7XG4gICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlO1xuICAgICAgaWYgKGNvbXByZXNzID09PSBpbmRleCkge1xuICAgICAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonO1xuICAgICAgICBpZ25vcmUwID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCArPSBudW1iZXJUb1N0cmluZyhob3N0W2luZGV4XSwgMTYpO1xuICAgICAgICBpZiAoaW5kZXggPCA3KSByZXN1bHQgKz0gJzonO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ1snICsgcmVzdWx0ICsgJ10nO1xuICB9IHJldHVybiBob3N0O1xufTtcblxudmFyIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQgPSB7fTtcbnZhciBmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJyAnOiAxLCAnXCInOiAxLCAnPCc6IDEsICc+JzogMSwgJ2AnOiAxXG59KTtcbnZhciBwYXRoUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcjJzogMSwgJz8nOiAxLCAneyc6IDEsICd9JzogMVxufSk7XG52YXIgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBwYXRoUGVyY2VudEVuY29kZVNldCwge1xuICAnLyc6IDEsICc6JzogMSwgJzsnOiAxLCAnPSc6IDEsICdAJzogMSwgJ1snOiAxLCAnXFxcXCc6IDEsICddJzogMSwgJ14nOiAxLCAnfCc6IDFcbn0pO1xuXG52YXIgcGVyY2VudEVuY29kZSA9IGZ1bmN0aW9uIChjaHIsIHNldCkge1xuICB2YXIgY29kZSA9IGNvZGVBdChjaHIsIDApO1xuICByZXR1cm4gY29kZSA+IDB4MjAgJiYgY29kZSA8IDB4N0YgJiYgIWhhc093bihzZXQsIGNocikgPyBjaHIgOiBlbmNvZGVVUklDb21wb25lbnQoY2hyKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc3BlY2lhbC1zY2hlbWVcbnZhciBzcGVjaWFsU2NoZW1lcyA9IHtcbiAgZnRwOiAyMSxcbiAgZmlsZTogbnVsbCxcbiAgaHR0cDogODAsXG4gIGh0dHBzOiA0NDMsXG4gIHdzOiA4MCxcbiAgd3NzOiA0NDNcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jd2luZG93cy1kcml2ZS1sZXR0ZXJcbnZhciBpc1dpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcsIG5vcm1hbGl6ZWQpIHtcbiAgdmFyIHNlY29uZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT0gMiAmJiBleGVjKEFMUEhBLCBjaGFyQXQoc3RyaW5nLCAwKSlcbiAgICAmJiAoKHNlY29uZCA9IGNoYXJBdChzdHJpbmcsIDEpKSA9PSAnOicgfHwgKCFub3JtYWxpemVkICYmIHNlY29uZCA9PSAnfCcpKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc3RhcnQtd2l0aC1hLXdpbmRvd3MtZHJpdmUtbGV0dGVyXG52YXIgc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIHRoaXJkO1xuICByZXR1cm4gc3RyaW5nLmxlbmd0aCA+IDEgJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoc3RyaW5nU2xpY2Uoc3RyaW5nLCAwLCAyKSkgJiYgKFxuICAgIHN0cmluZy5sZW5ndGggPT0gMiB8fFxuICAgICgodGhpcmQgPSBjaGFyQXQoc3RyaW5nLCAyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcXFwnIHx8IHRoaXJkID09PSAnPycgfHwgdGhpcmQgPT09ICcjJylcbiAgKTtcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2luZ2xlLWRvdC1wYXRoLXNlZ21lbnRcbnZhciBpc1NpbmdsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50ID09PSAnLicgfHwgdG9Mb3dlckNhc2Uoc2VnbWVudCkgPT09ICclMmUnO1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb3VibGUtZG90LXBhdGgtc2VnbWVudFxudmFyIGlzRG91YmxlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgc2VnbWVudCA9IHRvTG93ZXJDYXNlKHNlZ21lbnQpO1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnO1xufTtcblxuLy8gU3RhdGVzOlxudmFyIFNDSEVNRV9TVEFSVCA9IHt9O1xudmFyIFNDSEVNRSA9IHt9O1xudmFyIE5PX1NDSEVNRSA9IHt9O1xudmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUEFUSF9PUl9BVVRIT1JJVFkgPSB7fTtcbnZhciBSRUxBVElWRSA9IHt9O1xudmFyIFJFTEFUSVZFX1NMQVNIID0ge307XG52YXIgU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUyA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307XG52YXIgQVVUSE9SSVRZID0ge307XG52YXIgSE9TVCA9IHt9O1xudmFyIEhPU1ROQU1FID0ge307XG52YXIgUE9SVCA9IHt9O1xudmFyIEZJTEUgPSB7fTtcbnZhciBGSUxFX1NMQVNIID0ge307XG52YXIgRklMRV9IT1NUID0ge307XG52YXIgUEFUSF9TVEFSVCA9IHt9O1xudmFyIFBBVEggPSB7fTtcbnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307XG52YXIgUVVFUlkgPSB7fTtcbnZhciBGUkFHTUVOVCA9IHt9O1xuXG52YXIgVVJMU3RhdGUgPSBmdW5jdGlvbiAodXJsLCBpc0Jhc2UsIGJhc2UpIHtcbiAgdmFyIHVybFN0cmluZyA9ICR0b1N0cmluZyh1cmwpO1xuICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlLCBzZWFyY2hQYXJhbXM7XG4gIGlmIChpc0Jhc2UpIHtcbiAgICBmYWlsdXJlID0gdGhpcy5wYXJzZSh1cmxTdHJpbmcpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIGJhc2VTdGF0ZSA9IG5ldyBVUkxTdGF0ZShiYXNlLCB0cnVlKTtcbiAgICBmYWlsdXJlID0gdGhpcy5wYXJzZSh1cmxTdHJpbmcsIG51bGwsIGJhc2VTdGF0ZSk7XG4gICAgaWYgKGZhaWx1cmUpIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTtcbiAgICBzZWFyY2hQYXJhbXMgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKG5ldyBVUkxTZWFyY2hQYXJhbXMoKSk7XG4gICAgc2VhcmNoUGFyYW1zLmJpbmRVUkwodGhpcyk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMgPSBzZWFyY2hQYXJhbXM7XG4gIH1cbn07XG5cblVSTFN0YXRlLnByb3RvdHlwZSA9IHtcbiAgdHlwZTogJ1VSTCcsXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsLXBhcnNpbmdcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE9cbiAgcGFyc2U6IGZ1bmN0aW9uIChpbnB1dCwgc3RhdGVPdmVycmlkZSwgYmFzZSkge1xuICAgIHZhciB1cmwgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUO1xuICAgIHZhciBwb2ludGVyID0gMDtcbiAgICB2YXIgYnVmZmVyID0gJyc7XG4gICAgdmFyIHNlZW5BdCA9IGZhbHNlO1xuICAgIHZhciBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgIHZhciBzZWVuUGFzc3dvcmRUb2tlbiA9IGZhbHNlO1xuICAgIHZhciBjb2RlUG9pbnRzLCBjaHIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7XG5cbiAgICBpbnB1dCA9ICR0b1N0cmluZyhpbnB1dCk7XG5cbiAgICBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgIHVybC5zY2hlbWUgPSAnJztcbiAgICAgIHVybC51c2VybmFtZSA9ICcnO1xuICAgICAgdXJsLnBhc3N3b3JkID0gJyc7XG4gICAgICB1cmwuaG9zdCA9IG51bGw7XG4gICAgICB1cmwucG9ydCA9IG51bGw7XG4gICAgICB1cmwucGF0aCA9IFtdO1xuICAgICAgdXJsLnF1ZXJ5ID0gbnVsbDtcbiAgICAgIHVybC5mcmFnbWVudCA9IG51bGw7XG4gICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IGZhbHNlO1xuICAgICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFLCAnJyk7XG4gICAgfVxuXG4gICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBUQUJfQU5EX05FV19MSU5FLCAnJyk7XG5cbiAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcblxuICAgIHdoaWxlIChwb2ludGVyIDw9IGNvZGVQb2ludHMubGVuZ3RoKSB7XG4gICAgICBjaHIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdO1xuICAgICAgc3dpdGNoIChzdGF0ZSkge1xuICAgICAgICBjYXNlIFNDSEVNRV9TVEFSVDpcbiAgICAgICAgICBpZiAoY2hyICYmIGV4ZWMoQUxQSEEsIGNocikpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSB0b0xvd2VyQ2FzZShjaHIpO1xuICAgICAgICAgICAgc3RhdGUgPSBTQ0hFTUU7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU0NIRU1FOlxuICAgICAgICAgIGlmIChjaHIgJiYgKGV4ZWMoQUxQSEFOVU1FUklDLCBjaHIpIHx8IGNociA9PSAnKycgfHwgY2hyID09ICctJyB8fCBjaHIgPT0gJy4nKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IHRvTG93ZXJDYXNlKGNocik7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJzonKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiAoXG4gICAgICAgICAgICAgICh1cmwuaXNTcGVjaWFsKCkgIT0gaGFzT3duKHNwZWNpYWxTY2hlbWVzLCBidWZmZXIpKSB8fFxuICAgICAgICAgICAgICAoYnVmZmVyID09ICdmaWxlJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHx8XG4gICAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpXG4gICAgICAgICAgICApKSByZXR1cm47XG4gICAgICAgICAgICB1cmwuc2NoZW1lID0gYnVmZmVyO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZJTEU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBiYXNlICYmIGJhc2Uuc2NoZW1lID09IHVybC5zY2hlbWUpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSkge1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTtcbiAgICAgICAgICAgIHBvaW50ZXIgPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIE5PX1NDSEVNRTpcbiAgICAgICAgICBpZiAoIWJhc2UgfHwgKGJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjaHIgIT0gJyMnKSkgcmV0dXJuIElOVkFMSURfU0NIRU1FO1xuICAgICAgICAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0YXRlID0gYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnID8gRklMRSA6IFJFTEFUSVZFO1xuICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgJiYgY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFJFTEFUSVZFO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEhfT1JfQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBSRUxBVElWRTpcbiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7XG4gICAgICAgICAgaWYgKGNociA9PSBFT0YpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnLycgfHwgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBSRUxBVElWRV9TTEFTSDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5O1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5wYXRoLmxlbmd0aC0tO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFJFTEFUSVZFX1NMQVNIOlxuICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykpIHtcbiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM6XG4gICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICBpZiAoY2hyICE9ICcvJyB8fCBjaGFyQXQoYnVmZmVyLCBwb2ludGVyICsgMSkgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzpcbiAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBVVRIT1JJVFk6XG4gICAgICAgICAgaWYgKGNociA9PSAnQCcpIHtcbiAgICAgICAgICAgIGlmIChzZWVuQXQpIGJ1ZmZlciA9ICclNDAnICsgYnVmZmVyO1xuICAgICAgICAgICAgc2VlbkF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJ1ZmZlckNvZGVQb2ludHMgPSBhcnJheUZyb20oYnVmZmVyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyQ29kZVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgY29kZVBvaW50ID0gYnVmZmVyQ29kZVBvaW50c1tpXTtcbiAgICAgICAgICAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7XG4gICAgICAgICAgICAgICAgc2VlblBhc3N3b3JkVG9rZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBlbmNvZGVkQ29kZVBvaW50cyA9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50LCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgICAgICBpZiAoc2VlblBhc3N3b3JkVG9rZW4pIHVybC5wYXNzd29yZCArPSBlbmNvZGVkQ29kZVBvaW50cztcbiAgICAgICAgICAgICAgZWxzZSB1cmwudXNlcm5hbWUgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHNlZW5BdCAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0FVVEhPUklUWTtcbiAgICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBIT1NUO1xuICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgSE9TVDpcbiAgICAgICAgY2FzZSBIT1NUTkFNRTpcbiAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiB1cmwuc2NoZW1lID09ICdmaWxlJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnOicgJiYgIXNlZW5CcmFja2V0KSB7XG4gICAgICAgICAgICBpZiAoYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQT1JUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgPT0gSE9TVE5BTUUpIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiBidWZmZXIgPT0gJycgJiYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSByZXR1cm47XG4gICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpO1xuICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gJ1snKSBzZWVuQnJhY2tldCA9IHRydWU7XG4gICAgICAgICAgICBlbHNlIGlmIChjaHIgPT0gJ10nKSBzZWVuQnJhY2tldCA9IGZhbHNlO1xuICAgICAgICAgICAgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUE9SVDpcbiAgICAgICAgICBpZiAoZXhlYyhESUdJVCwgY2hyKSkge1xuICAgICAgICAgICAgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fFxuICAgICAgICAgICAgKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fFxuICAgICAgICAgICAgc3RhdGVPdmVycmlkZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykge1xuICAgICAgICAgICAgICB2YXIgcG9ydCA9IHBhcnNlSW50KGJ1ZmZlciwgMTApO1xuICAgICAgICAgICAgICBpZiAocG9ydCA+IDB4RkZGRikgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICAgICAgdXJsLnBvcnQgPSAodXJsLmlzU3BlY2lhbCgpICYmIHBvcnQgPT09IHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdKSA/IG51bGwgOiBwb3J0O1xuICAgICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfUE9SVDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEZJTEU6XG4gICAgICAgICAgdXJsLnNjaGVtZSA9ICdmaWxlJztcbiAgICAgICAgICBpZiAoY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnKSBzdGF0ZSA9IEZJTEVfU0xBU0g7XG4gICAgICAgICAgZWxzZSBpZiAoYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIoam9pbihhcnJheVNsaWNlKGNvZGVQb2ludHMsIHBvaW50ZXIpLCAnJykpKSB7XG4gICAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgICAgdXJsLnNob3J0ZW5QYXRoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEZJTEVfU0xBU0g6XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykge1xuICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGpvaW4oYXJyYXlTbGljZShjb2RlUG9pbnRzLCBwb2ludGVyKSwgJycpKSkge1xuICAgICAgICAgICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpIHB1c2godXJsLnBhdGgsIGJhc2UucGF0aFswXSk7XG4gICAgICAgICAgICBlbHNlIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgY2FzZSBGSUxFX0hPU1Q6XG4gICAgICAgICAgaWYgKGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJ1xcXFwnIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykge1xuICAgICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChidWZmZXIgPT0gJycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlO1xuICAgICAgICAgICAgICBpZiAodXJsLmhvc3QgPT0gJ2xvY2FsaG9zdCcpIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7XG4gICAgICAgICAgICB9IGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSF9TVEFSVDpcbiAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcXFwnKSBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nKSBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUEFUSDpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkgfHxcbiAgICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChpc0RvdWJsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICAgIHVybC5zaG9ydGVuUGF0aCgpO1xuICAgICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiAhKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7XG4gICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7XG4gICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5wYXRoLmxlbmd0aCAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVybC5ob3N0KSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGNoYXJBdChidWZmZXIsIDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCBidWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgKGNociA9PSBFT0YgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSkge1xuICAgICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBzaGlmdCh1cmwucGF0aCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaHIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDpcbiAgICAgICAgICBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IFFVRVJZO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgdXJsLnBhdGhbMF0gKz0gcGVyY2VudEVuY29kZShjaHIsIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQpO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBRVUVSWTpcbiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykge1xuICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7XG4gICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikge1xuICAgICAgICAgICAgaWYgKGNociA9PSBcIidcIiAmJiB1cmwuaXNTcGVjaWFsKCkpIHVybC5xdWVyeSArPSAnJTI3JztcbiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnIycpIHVybC5xdWVyeSArPSAnJTIzJztcbiAgICAgICAgICAgIGVsc2UgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgRlJBR01FTlQ6XG4gICAgICAgICAgaWYgKGNociAhPSBFT0YpIHVybC5mcmFnbWVudCArPSBwZXJjZW50RW5jb2RlKGNociwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcG9pbnRlcisrO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNob3N0LXBhcnNpbmdcbiAgcGFyc2VIb3N0OiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDtcbiAgICBpZiAoY2hhckF0KGlucHV0LCAwKSA9PSAnWycpIHtcbiAgICAgIGlmIChjaGFyQXQoaW5wdXQsIGlucHV0Lmxlbmd0aCAtIDEpICE9ICddJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NihzdHJpbmdTbGljZShpbnB1dCwgMSwgLTEpKTtcbiAgICAgIGlmICghcmVzdWx0KSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIC8vIG9wYXF1ZSBob3N0XG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1NwZWNpYWwoKSkge1xuICAgICAgaWYgKGV4ZWMoRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCwgaW5wdXQpKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgcmVzdWx0ID0gJyc7XG4gICAgICBjb2RlUG9pbnRzID0gYXJyYXlGcm9tKGlucHV0KTtcbiAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaW5kZXhdLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5wdXQgPSB0b0FTQ0lJKGlucHV0KTtcbiAgICAgIGlmIChleGVjKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQsIGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7XG4gICAgICBpZiAocmVzdWx0ID09PSBudWxsKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgdGhpcy5ob3N0ID0gcmVzdWx0O1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjYW5ub3QtaGF2ZS1hLXVzZXJuYW1lLXBhc3N3b3JkLXBvcnRcbiAgY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICF0aGlzLmhvc3QgfHwgdGhpcy5jYW5ub3RCZUFCYXNlVVJMIHx8IHRoaXMuc2NoZW1lID09ICdmaWxlJztcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbmNsdWRlLWNyZWRlbnRpYWxzXG4gIGluY2x1ZGVzQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51c2VybmFtZSAhPSAnJyB8fCB0aGlzLnBhc3N3b3JkICE9ICcnO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2lzLXNwZWNpYWxcbiAgaXNTcGVjaWFsOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGhhc093bihzcGVjaWFsU2NoZW1lcywgdGhpcy5zY2hlbWUpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3Nob3J0ZW4tYS11cmxzLXBhdGhcbiAgc2hvcnRlblBhdGg6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDtcbiAgICB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDtcbiAgICBpZiAocGF0aFNpemUgJiYgKHRoaXMuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHtcbiAgICAgIHBhdGgubGVuZ3RoLS07XG4gICAgfVxuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsLXNlcmlhbGl6ZXJcbiAgc2VyaWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVybCA9IHRoaXM7XG4gICAgdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7XG4gICAgdmFyIHVzZXJuYW1lID0gdXJsLnVzZXJuYW1lO1xuICAgIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDtcbiAgICB2YXIgaG9zdCA9IHVybC5ob3N0O1xuICAgIHZhciBwb3J0ID0gdXJsLnBvcnQ7XG4gICAgdmFyIHBhdGggPSB1cmwucGF0aDtcbiAgICB2YXIgcXVlcnkgPSB1cmwucXVlcnk7XG4gICAgdmFyIGZyYWdtZW50ID0gdXJsLmZyYWdtZW50O1xuICAgIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7XG4gICAgaWYgKGhvc3QgIT09IG51bGwpIHtcbiAgICAgIG91dHB1dCArPSAnLy8nO1xuICAgICAgaWYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkpIHtcbiAgICAgICAgb3V0cHV0ICs9IHVzZXJuYW1lICsgKHBhc3N3b3JkID8gJzonICsgcGFzc3dvcmQgOiAnJykgKyAnQCc7XG4gICAgICB9XG4gICAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTtcbiAgICAgIGlmIChwb3J0ICE9PSBudWxsKSBvdXRwdXQgKz0gJzonICsgcG9ydDtcbiAgICB9IGVsc2UgaWYgKHNjaGVtZSA9PSAnZmlsZScpIG91dHB1dCArPSAnLy8nO1xuICAgIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnO1xuICAgIGlmIChxdWVyeSAhPT0gbnVsbCkgb3V0cHV0ICs9ICc/JyArIHF1ZXJ5O1xuICAgIGlmIChmcmFnbWVudCAhPT0gbnVsbCkgb3V0cHV0ICs9ICcjJyArIGZyYWdtZW50O1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gIHNldEhyZWY6IGZ1bmN0aW9uIChocmVmKSB7XG4gICAgdmFyIGZhaWx1cmUgPSB0aGlzLnBhcnNlKGhyZWYpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW5cbiAgZ2V0T3JpZ2luOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjaGVtZSA9IHRoaXMuc2NoZW1lO1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIGlmIChzY2hlbWUgPT0gJ2Jsb2InKSB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBVUkxDb25zdHJ1Y3RvcihzY2hlbWUucGF0aFswXSkub3JpZ2luO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAoc2NoZW1lID09ICdmaWxlJyB8fCAhdGhpcy5pc1NwZWNpYWwoKSkgcmV0dXJuICdudWxsJztcbiAgICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHRoaXMuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wcm90b2NvbFxuICBnZXRQcm90b2NvbDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNjaGVtZSArICc6JztcbiAgfSxcbiAgc2V0UHJvdG9jb2w6IGZ1bmN0aW9uIChwcm90b2NvbCkge1xuICAgIHRoaXMucGFyc2UoJHRvU3RyaW5nKHByb3RvY29sKSArICc6JywgU0NIRU1FX1NUQVJUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lXG4gIGdldFVzZXJuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcm5hbWU7XG4gIH0sXG4gIHNldFVzZXJuYW1lOiBmdW5jdGlvbiAodXNlcm5hbWUpIHtcbiAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcodXNlcm5hbWUpKTtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHRoaXMudXNlcm5hbWUgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMudXNlcm5hbWUgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gIGdldFBhc3N3b3JkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFzc3dvcmQ7XG4gIH0sXG4gIHNldFBhc3N3b3JkOiBmdW5jdGlvbiAocGFzc3dvcmQpIHtcbiAgICB2YXIgY29kZVBvaW50cyA9IGFycmF5RnJvbSgkdG9TdHJpbmcocGFzc3dvcmQpKTtcbiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuO1xuICAgIHRoaXMucGFzc3dvcmQgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucGFzc3dvcmQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RcbiAgZ2V0SG9zdDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJydcbiAgICAgIDogcG9ydCA9PT0gbnVsbCA/IHNlcmlhbGl6ZUhvc3QoaG9zdClcbiAgICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7XG4gIH0sXG4gIHNldEhvc3Q6IGZ1bmN0aW9uIChob3N0KSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGFyc2UoaG9zdCwgSE9TVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZVxuICBnZXRIb3N0bmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0ID0gdGhpcy5ob3N0O1xuICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpO1xuICB9LFxuICBzZXRIb3N0bmFtZTogZnVuY3Rpb24gKGhvc3RuYW1lKSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGFyc2UoaG9zdG5hbWUsIEhPU1ROQU1FKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgZ2V0UG9ydDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0O1xuICAgIHJldHVybiBwb3J0ID09PSBudWxsID8gJycgOiAkdG9TdHJpbmcocG9ydCk7XG4gIH0sXG4gIHNldFBvcnQ6IGZ1bmN0aW9uIChwb3J0KSB7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICBwb3J0ID0gJHRvU3RyaW5nKHBvcnQpO1xuICAgIGlmIChwb3J0ID09ICcnKSB0aGlzLnBvcnQgPSBudWxsO1xuICAgIGVsc2UgdGhpcy5wYXJzZShwb3J0LCBQT1JUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhdGhuYW1lXG4gIGdldFBhdGhuYW1lOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgcmV0dXJuIHRoaXMuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnO1xuICB9LFxuICBzZXRQYXRobmFtZTogZnVuY3Rpb24gKHBhdGhuYW1lKSB7XG4gICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuO1xuICAgIHRoaXMucGF0aCA9IFtdO1xuICAgIHRoaXMucGFyc2UocGF0aG5hbWUsIFBBVEhfU1RBUlQpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoXG4gIGdldFNlYXJjaDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMucXVlcnk7XG4gICAgcmV0dXJuIHF1ZXJ5ID8gJz8nICsgcXVlcnkgOiAnJztcbiAgfSxcbiAgc2V0U2VhcmNoOiBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgc2VhcmNoID0gJHRvU3RyaW5nKHNlYXJjaCk7XG4gICAgaWYgKHNlYXJjaCA9PSAnJykge1xuICAgICAgdGhpcy5xdWVyeSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgnPycgPT0gY2hhckF0KHNlYXJjaCwgMCkpIHNlYXJjaCA9IHN0cmluZ1NsaWNlKHNlYXJjaCwgMSk7XG4gICAgICB0aGlzLnF1ZXJ5ID0gJyc7XG4gICAgICB0aGlzLnBhcnNlKHNlYXJjaCwgUVVFUlkpO1xuICAgIH1cbiAgICB0aGlzLnNlYXJjaFBhcmFtcy51cGRhdGUoKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICBnZXRTZWFyY2hQYXJhbXM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hQYXJhbXMuZmFjYWRlO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaFxuICBnZXRIYXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudDtcbiAgICByZXR1cm4gZnJhZ21lbnQgPyAnIycgKyBmcmFnbWVudCA6ICcnO1xuICB9LFxuICBzZXRIYXNoOiBmdW5jdGlvbiAoaGFzaCkge1xuICAgIGhhc2ggPSAkdG9TdHJpbmcoaGFzaCk7XG4gICAgaWYgKGhhc2ggPT0gJycpIHtcbiAgICAgIHRoaXMuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoJyMnID09IGNoYXJBdChoYXNoLCAwKSkgaGFzaCA9IHN0cmluZ1NsaWNlKGhhc2gsIDEpO1xuICAgIHRoaXMuZnJhZ21lbnQgPSAnJztcbiAgICB0aGlzLnBhcnNlKGhhc2gsIEZSQUdNRU5UKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoUGFyYW1zLnNlcmlhbGl6ZSgpIHx8IG51bGw7XG4gIH1cbn07XG5cbi8vIGBVUkxgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1jbGFzc1xudmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHtcbiAgdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTFByb3RvdHlwZSk7XG4gIHZhciBiYXNlID0gdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSkgPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICB2YXIgc3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIG5ldyBVUkxTdGF0ZSh1cmwsIGZhbHNlLCBiYXNlKSk7XG4gIGlmICghREVTQ1JJUFRPUlMpIHtcbiAgICB0aGF0LmhyZWYgPSBzdGF0ZS5zZXJpYWxpemUoKTtcbiAgICB0aGF0Lm9yaWdpbiA9IHN0YXRlLmdldE9yaWdpbigpO1xuICAgIHRoYXQucHJvdG9jb2wgPSBzdGF0ZS5nZXRQcm90b2NvbCgpO1xuICAgIHRoYXQudXNlcm5hbWUgPSBzdGF0ZS5nZXRVc2VybmFtZSgpO1xuICAgIHRoYXQucGFzc3dvcmQgPSBzdGF0ZS5nZXRQYXNzd29yZCgpO1xuICAgIHRoYXQuaG9zdCA9IHN0YXRlLmdldEhvc3QoKTtcbiAgICB0aGF0Lmhvc3RuYW1lID0gc3RhdGUuZ2V0SG9zdG5hbWUoKTtcbiAgICB0aGF0LnBvcnQgPSBzdGF0ZS5nZXRQb3J0KCk7XG4gICAgdGhhdC5wYXRobmFtZSA9IHN0YXRlLmdldFBhdGhuYW1lKCk7XG4gICAgdGhhdC5zZWFyY2ggPSBzdGF0ZS5nZXRTZWFyY2goKTtcbiAgICB0aGF0LnNlYXJjaFBhcmFtcyA9IHN0YXRlLmdldFNlYXJjaFBhcmFtcygpO1xuICAgIHRoYXQuaGFzaCA9IHN0YXRlLmdldEhhc2goKTtcbiAgfVxufTtcblxudmFyIFVSTFByb3RvdHlwZSA9IFVSTENvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxudmFyIGFjY2Vzc29yRGVzY3JpcHRvciA9IGZ1bmN0aW9uIChnZXR0ZXIsIHNldHRlcikge1xuICByZXR1cm4ge1xuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcylbZ2V0dGVyXSgpO1xuICAgIH0sXG4gICAgc2V0OiBzZXR0ZXIgJiYgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKVtzZXR0ZXJdKHZhbHVlKTtcbiAgICB9LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG4gIH07XG59O1xuXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgZGVmaW5lUHJvcGVydGllcyhVUkxQcm90b3R5cGUsIHtcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ocmVmYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gICAgaHJlZjogYWNjZXNzb3JEZXNjcmlwdG9yKCdzZXJpYWxpemUnLCAnc2V0SHJlZicpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLm9yaWdpbmAgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICAgIG9yaWdpbjogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRPcmlnaW4nKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5wcm90b2NvbGAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgICBwcm90b2NvbDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQcm90b2NvbCcsICdzZXRQcm90b2NvbCcpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnVzZXJuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICAgIHVzZXJuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFVzZXJuYW1lJywgJ3NldFVzZXJuYW1lJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUucGFzc3dvcmRgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gICAgcGFzc3dvcmQ6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UGFzc3dvcmQnLCAnc2V0UGFzc3dvcmQnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0YCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0XG4gICAgaG9zdDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIb3N0JywgJ3NldEhvc3QnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5ob3N0bmFtZWAgYWNjZXNzb3JzIHBhaXJcbiAgICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgICBob3N0bmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIb3N0bmFtZScsICdzZXRIb3N0bmFtZScpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBvcnRgIGFjY2Vzc29ycyBwYWlyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgICBwb3J0OiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBvcnQnLCAnc2V0UG9ydCcpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnBhdGhuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZVxuICAgIHBhdGhuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhdGhuYW1lJywgJ3NldFBhdGhuYW1lJyksXG4gICAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgICBzZWFyY2g6IGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoJywgJ3NldFNlYXJjaCcpLFxuICAgIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaFBhcmFtc2AgZ2V0dGVyXG4gICAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICAgIHNlYXJjaFBhcmFtczogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRTZWFyY2hQYXJhbXMnKSxcbiAgICAvLyBgVVJMLnByb3RvdHlwZS5oYXNoYCBhY2Nlc3NvcnMgcGFpclxuICAgIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gICAgaGFzaDogYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIYXNoJywgJ3NldEhhc2gnKVxuICB9KTtcbn1cblxuLy8gYFVSTC5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb25cbnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvSlNPTicsIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jVVJMLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxucmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbmlmIChOYXRpdmVVUkwpIHtcbiAgdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5jcmVhdGVPYmplY3RVUkw7XG4gIHZhciBuYXRpdmVSZXZva2VPYmplY3RVUkwgPSBOYXRpdmVVUkwucmV2b2tlT2JqZWN0VVJMO1xuICAvLyBgVVJMLmNyZWF0ZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvY3JlYXRlT2JqZWN0VVJMXG4gIGlmIChuYXRpdmVDcmVhdGVPYmplY3RVUkwpIHJlZGVmaW5lKFVSTENvbnN0cnVjdG9yLCAnY3JlYXRlT2JqZWN0VVJMJywgYmluZChuYXRpdmVDcmVhdGVPYmplY3RVUkwsIE5hdGl2ZVVSTCkpO1xuICAvLyBgVVJMLnJldm9rZU9iamVjdFVSTGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvcmV2b2tlT2JqZWN0VVJMXG4gIGlmIChuYXRpdmVSZXZva2VPYmplY3RVUkwpIHJlZGVmaW5lKFVSTENvbnN0cnVjdG9yLCAncmV2b2tlT2JqZWN0VVJMJywgYmluZChuYXRpdmVSZXZva2VPYmplY3RVUkwsIE5hdGl2ZVVSTCkpO1xufVxuXG5zZXRUb1N0cmluZ1RhZyhVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHtcbiAgVVJMOiBVUkxDb25zdHJ1Y3RvclxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG52YXIgYmFzZSA9IDM2O1xudmFyIHRNaW4gPSAxO1xudmFyIHRNYXggPSAyNjtcbnZhciBza2V3ID0gMzg7XG52YXIgZGFtcCA9IDcwMDtcbnZhciBpbml0aWFsQmlhcyA9IDcyO1xudmFyIGluaXRpYWxOID0gMTI4OyAvLyAweDgwXG52YXIgZGVsaW1pdGVyID0gJy0nOyAvLyAnXFx4MkQnXG52YXIgcmVnZXhOb25BU0NJSSA9IC9bXlxcMC1cXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFyc1xudmFyIHJlZ2V4U2VwYXJhdG9ycyA9IC9bLlxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZzsgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xudmFyIE9WRVJGTE9XX0VSUk9SID0gJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJztcbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKHJlZ2V4U2VwYXJhdG9ycy5leGVjKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgdG9Mb3dlckNhc2UgPSB1bmN1cnJ5VGhpcygnJy50b0xvd2VyQ2FzZSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICovXG52YXIgdWNzMmRlY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgY291bnRlciA9IDA7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspO1xuICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICB2YXIgZXh0cmEgPSBjaGFyQ29kZUF0KHN0cmluZywgY291bnRlcisrKTtcbiAgICAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBMb3cgc3Vycm9nYXRlLlxuICAgICAgICBwdXNoKG91dHB1dCwgKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEl0J3MgYW4gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlXG4gICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLlxuICAgICAgICBwdXNoKG91dHB1dCwgdmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqL1xudmFyIGRpZ2l0VG9CYXNpYyA9IGZ1bmN0aW9uIChkaWdpdCkge1xuICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWlxuICAvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcbiAgcmV0dXJuIGRpZ2l0ICsgMjIgKyA3NSAqIChkaWdpdCA8IDI2KTtcbn07XG5cbi8qKlxuICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG4gKi9cbnZhciBhZGFwdCA9IGZ1bmN0aW9uIChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcbiAgdmFyIGsgPSAwO1xuICBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxO1xuICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG4gIHdoaWxlIChkZWx0YSA+IGJhc2VNaW51c1RNaW4gKiB0TWF4ID4+IDEpIHtcbiAgICBkZWx0YSA9IGZsb29yKGRlbHRhIC8gYmFzZU1pbnVzVE1pbik7XG4gICAgayArPSBiYXNlO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYVxuICogUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cbiAqL1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgb3V0cHV0ID0gW107XG5cbiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAgaW5wdXQgPSB1Y3MyZGVjb2RlKGlucHV0KTtcblxuICAvLyBDYWNoZSB0aGUgbGVuZ3RoLlxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuXG4gIHZhciBuID0gaW5pdGlhbE47XG4gIHZhciBkZWx0YSA9IDA7XG4gIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7XG4gIHZhciBpLCBjdXJyZW50VmFsdWU7XG5cbiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHtcbiAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJhc2ljIGNvZGUgcG9pbnRzLlxuICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7XG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgd2l0aCBhIGRlbGltaXRlciB1bmxlc3MgaXQncyBlbXB0eS5cbiAgaWYgKGJhc2ljTGVuZ3RoKSB7XG4gICAgcHVzaChvdXRwdXQsIGRlbGltaXRlcik7XG4gIH1cblxuICAvLyBNYWluIGVuY29kaW5nIGxvb3A6XG4gIHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG4gICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dCBsYXJnZXIgb25lOlxuICAgIHZhciBtID0gbWF4SW50O1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuICAgICAgICBtID0gY3VycmVudFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPiwgYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuXG4gICAgdmFyIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcbiAgICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuICAgICAgdGhyb3cgUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgfVxuXG4gICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcbiAgICBuID0gbTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG4gICAgICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG4gICAgICAgIC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyLlxuICAgICAgICB2YXIgcSA9IGRlbHRhO1xuICAgICAgICB2YXIgayA9IGJhc2U7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7XG4gICAgICAgICAgdmFyIHFNaW51c1QgPSBxIC0gdDtcbiAgICAgICAgICB2YXIgYmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuICAgICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTtcbiAgICAgICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuICAgICAgICAgIGsgKz0gYmFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEpKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgaGFuZGxlZENQQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkZWx0YSsrO1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gam9pbihvdXRwdXQsICcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBlbmNvZGVkID0gW107XG4gIHZhciBsYWJlbHMgPSBzcGxpdChyZXBsYWNlKHRvTG93ZXJDYXNlKGlucHV0KSwgcmVnZXhTZXBhcmF0b3JzLCAnXFx1MDAyRScpLCAnLicpO1xuICB2YXIgaSwgbGFiZWw7XG4gIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICBwdXNoKGVuY29kZWQsIGV4ZWMocmVnZXhOb25BU0NJSSwgbGFiZWwpID8gJ3huLS0nICsgZW5jb2RlKGxhYmVsKSA6IGxhYmVsKTtcbiAgfVxuICByZXR1cm4gam9pbihlbmNvZGVkLCAnLicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xuXG4vLyBgVVJMLnByb3RvdHlwZS50b0pTT05gIG1ldGhvZFxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXRvanNvblxuJCh7IHRhcmdldDogJ1VSTCcsIHByb3RvOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlIH0sIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIGNhbGwoVVJMLnByb3RvdHlwZS50b1N0cmluZywgdGhpcyk7XG4gIH1cbn0pO1xuIiwiZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG4gICAgZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuICAgICAgICBsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG59XG5mdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICAgIGZucy5mb3JFYWNoKHJ1bik7XG59XG5mdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xufVxubGV0IHNyY191cmxfZXF1YWxfYW5jaG9yO1xuZnVuY3Rpb24gc3JjX3VybF9lcXVhbChlbGVtZW50X3NyYywgdXJsKSB7XG4gICAgaWYgKCFzcmNfdXJsX2VxdWFsX2FuY2hvcikge1xuICAgICAgICBzcmNfdXJsX2VxdWFsX2FuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB9XG4gICAgc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gZWxlbWVudF9zcmMgPT09IHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWY7XG59XG5mdW5jdGlvbiBub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiO1xufVxuZnVuY3Rpb24gaXNfZW1wdHkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfc3RvcmUoc3RvcmUsIG5hbWUpIHtcbiAgICBpZiAoc3RvcmUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIC4uLmNhbGxiYWNrcykge1xuICAgIGlmIChzdG9yZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBjb25zdCB1bnN1YiA9IHN0b3JlLnN1YnNjcmliZSguLi5jYWxsYmFja3MpO1xuICAgIHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cbmZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBzdWJzY3JpYmUoc3RvcmUsIF8gPT4gdmFsdWUgPSBfKSgpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbik7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblsxXSAmJiBmblxuICAgICAgICA/IGFzc2lnbigkJHNjb3BlLmN0eC5zbGljZSgpLCBkZWZpbml0aW9uWzFdKGZuKGN0eCkpKVxuICAgICAgICA6ICQkc2NvcGUuY3R4O1xufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY2hhbmdlcyhkZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuICAgICAgICBjb25zdCBsZXRzID0gZGVmaW5pdGlvblsyXShmbihkaXJ0eSkpO1xuICAgICAgICBpZiAoJCRzY29wZS5kaXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGV0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxldHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KCQkc2NvcGUuZGlydHkubGVuZ3RoLCBsZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkW2ldID0gJCRzY29wZS5kaXJ0eVtpXSB8IGxldHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcbiAgICB9XG4gICAgcmV0dXJuICQkc2NvcGUuZGlydHk7XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBpZiAoc2xvdF9jaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQoc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGdldF9zbG90X2NvbnRleHRfZm4pO1xuICAgICAgICBzbG90LnAoc2xvdF9jb250ZXh0LCBzbG90X2NoYW5nZXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90KHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbiwgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG4gICAgdXBkYXRlX3Nsb3RfYmFzZShzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbn1cbmZ1bmN0aW9uIGdldF9hbGxfZGlydHlfZnJvbV9zY29wZSgkJHNjb3BlKSB7XG4gICAgaWYgKCQkc2NvcGUuY3R4Lmxlbmd0aCA+IDMyKSB7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gW107XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9ICQkc2NvcGUuY3R4Lmxlbmd0aCAvIDMyO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkaXJ0eVtpXSA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJ0eTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Jlc3RfcHJvcHMocHJvcHMsIGtleXMpIHtcbiAgICBjb25zdCByZXN0ID0ge307XG4gICAga2V5cyA9IG5ldyBTZXQoa2V5cyk7XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoIWtleXMuaGFzKGspICYmIGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3Rba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfc2xvdHMoc2xvdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgICByZXN1bHRba2V5XSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAocmFuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgIH07XG59XG5mdW5jdGlvbiBudWxsX3RvX2VtcHR5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X3N0b3JlX3ZhbHVlKHN0b3JlLCByZXQsIHZhbHVlKSB7XG4gICAgc3RvcmUuc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gcmV0O1xufVxuY29uc3QgaGFzX3Byb3AgPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbmZ1bmN0aW9uIGFjdGlvbl9kZXN0cm95ZXIoYWN0aW9uX3Jlc3VsdCkge1xuICAgIHJldHVybiBhY3Rpb25fcmVzdWx0ICYmIGlzX2Z1bmN0aW9uKGFjdGlvbl9yZXN1bHQuZGVzdHJveSkgPyBhY3Rpb25fcmVzdWx0LmRlc3Ryb3kgOiBub29wO1xufVxuXG5jb25zdCBpc19jbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbmxldCBub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmxldCByYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIG5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIHJhZiA9IGZuO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHJ1bl90YXNrcyhub3cpIHtcbiAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBpZiAoIXRhc2suYyhub3cpKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgICAgICB0YXNrLmYoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0YXNrcy5zaXplICE9PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShmdWxmaWxsID0+IHtcbiAgICAgICAgICAgIHRhc2tzLmFkZCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIGFib3J0KCkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gVHJhY2sgd2hpY2ggbm9kZXMgYXJlIGNsYWltZWQgZHVyaW5nIGh5ZHJhdGlvbi4gVW5jbGFpbWVkIG5vZGVzIGNhbiB0aGVuIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4vLyBhdCB0aGUgZW5kIG9mIGh5ZHJhdGlvbiB3aXRob3V0IHRvdWNoaW5nIHRoZSByZW1haW5pbmcgbm9kZXMuXG5sZXQgaXNfaHlkcmF0aW5nID0gZmFsc2U7XG5mdW5jdGlvbiBzdGFydF9oeWRyYXRpbmcoKSB7XG4gICAgaXNfaHlkcmF0aW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGVuZF9oeWRyYXRpbmcoKSB7XG4gICAgaXNfaHlkcmF0aW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiB1cHBlcl9ib3VuZChsb3csIGhpZ2gsIGtleSwgdmFsdWUpIHtcbiAgICAvLyBSZXR1cm4gZmlyc3QgaW5kZXggb2YgdmFsdWUgbGFyZ2VyIHRoYW4gaW5wdXQgdmFsdWUgaW4gdGhlIHJhbmdlIFtsb3csIGhpZ2gpXG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgY29uc3QgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSA+PiAxKTtcbiAgICAgICAgaWYgKGtleShtaWQpIDw9IHZhbHVlKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG93O1xufVxuZnVuY3Rpb24gaW5pdF9oeWRyYXRlKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuaHlkcmF0ZV9pbml0KVxuICAgICAgICByZXR1cm47XG4gICAgdGFyZ2V0Lmh5ZHJhdGVfaW5pdCA9IHRydWU7XG4gICAgLy8gV2Uga25vdyB0aGF0IGFsbCBjaGlsZHJlbiBoYXZlIGNsYWltX29yZGVyIHZhbHVlcyBzaW5jZSB0aGUgdW5jbGFpbWVkIGhhdmUgYmVlbiBkZXRhY2hlZCBpZiB0YXJnZXQgaXMgbm90IDxoZWFkPlxuICAgIGxldCBjaGlsZHJlbiA9IHRhcmdldC5jaGlsZE5vZGVzO1xuICAgIC8vIElmIHRhcmdldCBpcyA8aGVhZD4sIHRoZXJlIG1heSBiZSBjaGlsZHJlbiB3aXRob3V0IGNsYWltX29yZGVyXG4gICAgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gJ0hFQUQnKSB7XG4gICAgICAgIGNvbnN0IG15Q2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGUuY2xhaW1fb3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG15Q2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbiA9IG15Q2hpbGRyZW47XG4gICAgfVxuICAgIC8qXG4gICAgKiBSZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5LlxuICAgICogV2UgY2FuIHJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkgYnkgZmluZGluZyB0aGUgbG9uZ2VzdCBzdWJzZXF1ZW5jZSBvZlxuICAgICogbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBjbGFpbWVkIGluIG9yZGVyIGFuZCBvbmx5IG1vdmluZyB0aGUgcmVzdC4gVGhlIGxvbmdlc3RcbiAgICAqIHN1YnNlcXVlbmNlIHN1YnNlcXVlbmNlIG9mIG5vZGVzIHRoYXQgYXJlIGNsYWltZWQgaW4gb3JkZXIgY2FuIGJlIGZvdW5kIGJ5XG4gICAgKiBjb21wdXRpbmcgdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiAuY2xhaW1fb3JkZXIgdmFsdWVzLlxuICAgICpcbiAgICAqIFRoaXMgYWxnb3JpdGhtIGlzIG9wdGltYWwgaW4gZ2VuZXJhdGluZyB0aGUgbGVhc3QgYW1vdW50IG9mIHJlb3JkZXIgb3BlcmF0aW9uc1xuICAgICogcG9zc2libGUuXG4gICAgKlxuICAgICogUHJvb2Y6XG4gICAgKiBXZSBrbm93IHRoYXQsIGdpdmVuIGEgc2V0IG9mIHJlb3JkZXJpbmcgb3BlcmF0aW9ucywgdGhlIG5vZGVzIHRoYXQgZG8gbm90IG1vdmVcbiAgICAqIGFsd2F5cyBmb3JtIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2UsIHNpbmNlIHRoZXkgZG8gbm90IG1vdmUgYW1vbmcgZWFjaCBvdGhlclxuICAgICogbWVhbmluZyB0aGF0IHRoZXkgbXVzdCBiZSBhbHJlYWR5IG9yZGVyZWQgYW1vbmcgZWFjaCBvdGhlci4gVGh1cywgdGhlIG1heGltYWxcbiAgICAqIHNldCBvZiBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlIGZvcm0gYSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2UuXG4gICAgKi9cbiAgICAvLyBDb21wdXRlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuICAgIC8vIG06IHN1YnNlcXVlbmNlIGxlbmd0aCBqID0+IGluZGV4IGsgb2Ygc21hbGxlc3QgdmFsdWUgdGhhdCBlbmRzIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgbGVuZ3RoIGpcbiAgICBjb25zdCBtID0gbmV3IEludDMyQXJyYXkoY2hpbGRyZW4ubGVuZ3RoICsgMSk7XG4gICAgLy8gUHJlZGVjZXNzb3IgaW5kaWNlcyArIDFcbiAgICBjb25zdCBwID0gbmV3IEludDMyQXJyYXkoY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICBtWzBdID0gLTE7XG4gICAgbGV0IGxvbmdlc3QgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGNoaWxkcmVuW2ldLmNsYWltX29yZGVyO1xuICAgICAgICAvLyBGaW5kIHRoZSBsYXJnZXN0IHN1YnNlcXVlbmNlIGxlbmd0aCBzdWNoIHRoYXQgaXQgZW5kcyBpbiBhIHZhbHVlIGxlc3MgdGhhbiBvdXIgY3VycmVudCB2YWx1ZVxuICAgICAgICAvLyB1cHBlcl9ib3VuZCByZXR1cm5zIGZpcnN0IGdyZWF0ZXIgdmFsdWUsIHNvIHdlIHN1YnRyYWN0IG9uZVxuICAgICAgICAvLyB3aXRoIGZhc3QgcGF0aCBmb3Igd2hlbiB3ZSBhcmUgb24gdGhlIGN1cnJlbnQgbG9uZ2VzdCBzdWJzZXF1ZW5jZVxuICAgICAgICBjb25zdCBzZXFMZW4gPSAoKGxvbmdlc3QgPiAwICYmIGNoaWxkcmVuW21bbG9uZ2VzdF1dLmNsYWltX29yZGVyIDw9IGN1cnJlbnQpID8gbG9uZ2VzdCArIDEgOiB1cHBlcl9ib3VuZCgxLCBsb25nZXN0LCBpZHggPT4gY2hpbGRyZW5bbVtpZHhdXS5jbGFpbV9vcmRlciwgY3VycmVudCkpIC0gMTtcbiAgICAgICAgcFtpXSA9IG1bc2VxTGVuXSArIDE7XG4gICAgICAgIGNvbnN0IG5ld0xlbiA9IHNlcUxlbiArIDE7XG4gICAgICAgIC8vIFdlIGNhbiBndWFyYW50ZWUgdGhhdCBjdXJyZW50IGlzIHRoZSBzbWFsbGVzdCB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSB3b3VsZCBoYXZlIGdlbmVyYXRlZCBhIGxvbmdlciBzZXF1ZW5jZS5cbiAgICAgICAgbVtuZXdMZW5dID0gaTtcbiAgICAgICAgbG9uZ2VzdCA9IE1hdGgubWF4KG5ld0xlbiwgbG9uZ2VzdCk7XG4gICAgfVxuICAgIC8vIFRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgKGluaXRpYWxseSByZXZlcnNlZClcbiAgICBjb25zdCBsaXMgPSBbXTtcbiAgICAvLyBUaGUgcmVzdCBvZiB0aGUgbm9kZXMsIG5vZGVzIHRoYXQgd2lsbCBiZSBtb3ZlZFxuICAgIGNvbnN0IHRvTW92ZSA9IFtdO1xuICAgIGxldCBsYXN0ID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBjdXIgPSBtW2xvbmdlc3RdICsgMTsgY3VyICE9IDA7IGN1ciA9IHBbY3VyIC0gMV0pIHtcbiAgICAgICAgbGlzLnB1c2goY2hpbGRyZW5bY3VyIC0gMV0pO1xuICAgICAgICBmb3IgKDsgbGFzdCA+PSBjdXI7IGxhc3QtLSkge1xuICAgICAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3QtLTtcbiAgICB9XG4gICAgZm9yICg7IGxhc3QgPj0gMDsgbGFzdC0tKSB7XG4gICAgICAgIHRvTW92ZS5wdXNoKGNoaWxkcmVuW2xhc3RdKTtcbiAgICB9XG4gICAgbGlzLnJldmVyc2UoKTtcbiAgICAvLyBXZSBzb3J0IHRoZSBub2RlcyBiZWluZyBtb3ZlZCB0byBndWFyYW50ZWUgdGhhdCB0aGVpciBpbnNlcnRpb24gb3JkZXIgbWF0Y2hlcyB0aGUgY2xhaW0gb3JkZXJcbiAgICB0b01vdmUuc29ydCgoYSwgYikgPT4gYS5jbGFpbV9vcmRlciAtIGIuY2xhaW1fb3JkZXIpO1xuICAgIC8vIEZpbmFsbHksIHdlIG1vdmUgdGhlIG5vZGVzXG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDwgdG9Nb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdoaWxlIChqIDwgbGlzLmxlbmd0aCAmJiB0b01vdmVbaV0uY2xhaW1fb3JkZXIgPj0gbGlzW2pdLmNsYWltX29yZGVyKSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5jaG9yID0gaiA8IGxpcy5sZW5ndGggPyBsaXNbal0gOiBudWxsO1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKHRvTW92ZVtpXSwgYW5jaG9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlcyh0YXJnZXQsIHN0eWxlX3NoZWV0X2lkLCBzdHlsZXMpIHtcbiAgICBjb25zdCBhcHBlbmRfc3R5bGVzX3RvID0gZ2V0X3Jvb3RfZm9yX3N0eWxlKHRhcmdldCk7XG4gICAgaWYgKCFhcHBlbmRfc3R5bGVzX3RvLmdldEVsZW1lbnRCeUlkKHN0eWxlX3NoZWV0X2lkKSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlLmlkID0gc3R5bGVfc2hlZXRfaWQ7XG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVzO1xuICAgICAgICBhcHBlbmRfc3R5bGVzaGVldChhcHBlbmRfc3R5bGVzX3RvLCBzdHlsZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICBjb25zdCByb290ID0gbm9kZS5nZXRSb290Tm9kZSA/IG5vZGUuZ2V0Um9vdE5vZGUoKSA6IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICBpZiAocm9vdCAmJiByb290Lmhvc3QpIHtcbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSB7XG4gICAgY29uc3Qgc3R5bGVfZWxlbWVudCA9IGVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgYXBwZW5kX3N0eWxlc2hlZXQoZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpLCBzdHlsZV9lbGVtZW50KTtcbiAgICByZXR1cm4gc3R5bGVfZWxlbWVudC5zaGVldDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXNoZWV0KG5vZGUsIHN0eWxlKSB7XG4gICAgYXBwZW5kKG5vZGUuaGVhZCB8fCBub2RlLCBzdHlsZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSkge1xuICAgIGlmIChpc19oeWRyYXRpbmcpIHtcbiAgICAgICAgaW5pdF9oeWRyYXRlKHRhcmdldCk7XG4gICAgICAgIGlmICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPT09IHVuZGVmaW5lZCkgfHwgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCkgJiYgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLnBhcmVudEVsZW1lbnQgIT09IHRhcmdldCkpKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5maXJzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNraXAgbm9kZXMgb2YgdW5kZWZpbmVkIG9yZGVyaW5nXG4gICAgICAgIHdoaWxlICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgIT09IG51bGwpICYmICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5jbGFpbV9vcmRlciA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZSAhPT0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgaW5zZXJ0IGlmIHRoZSBvcmRlcmluZyBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlIG1vZGlmaWVkIG9yIHRoZSBwYXJlbnQgbm9kZSBpcyBub3QgdGFyZ2V0XG4gICAgICAgICAgICBpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkIHx8IG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkge1xuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG59XG5mdW5jdGlvbiBpbnNlcnRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgaWYgKGlzX2h5ZHJhdGluZyAmJiAhYW5jaG9yKSB7XG4gICAgICAgIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPSBhbmNob3IpIHtcbiAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2VhY2goaXRlcmF0aW9ucywgZGV0YWNoaW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpdGVyYXRpb25zW2ldKVxuICAgICAgICAgICAgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBlbGVtZW50X2lzKG5hbWUsIGlzKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cbmZ1bmN0aW9uIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAoaGFzX3Byb3Aob2JqLCBrKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgJiYgZXhjbHVkZS5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHRleHQoZGF0YSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNwYWNlKCkge1xuICAgIHJldHVybiB0ZXh0KCcgJyk7XG59XG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGV4dCgnJyk7XG59XG5mdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcHJldmVudF9kZWZhdWx0KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RvcF9wcm9wYWdhdGlvbihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzZWxmKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJ1c3RlZChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoZXZlbnQuaXNUcnVzdGVkKVxuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgIGVsc2UgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkgIT09IHZhbHVlKVxuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldF9hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhub2RlLl9fcHJvdG9fXyk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBpZiAoYXR0cmlidXRlc1trZXldID09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBub2RlLnN0eWxlLmNzc1RleHQgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnX192YWx1ZScpIHtcbiAgICAgICAgICAgIG5vZGUudmFsdWUgPSBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVzY3JpcHRvcnNba2V5XSAmJiBkZXNjcmlwdG9yc1trZXldLnNldCkge1xuICAgICAgICAgICAgbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3ZnX2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgYXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBpZiAocHJvcCBpbiBub2RlKSB7XG4gICAgICAgIG5vZGVbcHJvcF0gPSB0eXBlb2Ygbm9kZVtwcm9wXSA9PT0gJ2Jvb2xlYW4nICYmIHZhbHVlID09PSAnJyA/IHRydWUgOiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF0dHIobm9kZSwgcHJvcCwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHhsaW5rX2F0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlKGdyb3VwLCBfX3ZhbHVlLCBjaGVja2VkKSB7XG4gICAgY29uc3QgdmFsdWUgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoZ3JvdXBbaV0uY2hlY2tlZClcbiAgICAgICAgICAgIHZhbHVlLmFkZChncm91cFtpXS5fX3ZhbHVlKTtcbiAgICB9XG4gICAgaWYgKCFjaGVja2VkKSB7XG4gICAgICAgIHZhbHVlLmRlbGV0ZShfX3ZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20odmFsdWUpO1xufVxuZnVuY3Rpb24gdG9fbnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAnJyA/IG51bGwgOiArdmFsdWU7XG59XG5mdW5jdGlvbiB0aW1lX3Jhbmdlc190b19hcnJheShyYW5nZXMpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycmF5LnB1c2goeyBzdGFydDogcmFuZ2VzLnN0YXJ0KGkpLCBlbmQ6IHJhbmdlcy5lbmQoaSkgfSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkTm9kZXMpO1xufVxuZnVuY3Rpb24gaW5pdF9jbGFpbV9pbmZvKG5vZGVzKSB7XG4gICAgaWYgKG5vZGVzLmNsYWltX2luZm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvID0geyBsYXN0X2luZGV4OiAwLCB0b3RhbF9jbGFpbWVkOiAwIH07XG4gICAgfVxufVxuZnVuY3Rpb24gY2xhaW1fbm9kZShub2RlcywgcHJlZGljYXRlLCBwcm9jZXNzTm9kZSwgY3JlYXRlTm9kZSwgZG9udFVwZGF0ZUxhc3RJbmRleCA9IGZhbHNlKSB7XG4gICAgLy8gVHJ5IHRvIGZpbmQgbm9kZXMgaW4gYW4gb3JkZXIgc3VjaCB0aGF0IHdlIGxlbmd0aGVuIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2VcbiAgICBpbml0X2NsYWltX2luZm8obm9kZXMpO1xuICAgIGNvbnN0IHJlc3VsdE5vZGUgPSAoKCkgPT4ge1xuICAgICAgICAvLyBXZSBmaXJzdCB0cnkgdG8gZmluZCBhbiBlbGVtZW50IGFmdGVyIHRoZSBwcmV2aW91cyBvbmVcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbnRVcGRhdGVMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSB0cnkgdG8gZmluZCBvbmUgYmVmb3JlXG4gICAgICAgIC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBzbyB0aGF0IHdlIGRvbid0IGdvIHRvbyBmYXIgYmFja1xuICAgICAgICBmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIHNwbGljZWQgYmVmb3JlIHRoZSBsYXN0X2luZGV4LCB3ZSBkZWNyZWFzZSBpdFxuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgZmluZCBhbnkgbWF0Y2hpbmcgbm9kZSwgd2UgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICByZXR1cm4gY3JlYXRlTm9kZSgpO1xuICAgIH0pKCk7XG4gICAgcmVzdWx0Tm9kZS5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICByZXR1cm4gcmVzdWx0Tm9kZTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgY3JlYXRlX2VsZW1lbnQpIHtcbiAgICByZXR1cm4gY2xhaW1fbm9kZShub2RlcywgKG5vZGUpID0+IG5vZGUubm9kZU5hbWUgPT09IG5hbWUsIChub2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbW92ZSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gbm9kZS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW1vdmUuZm9yRWFjaCh2ID0+IG5vZGUucmVtb3ZlQXR0cmlidXRlKHYpKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCAoKSA9PiBjcmVhdGVfZWxlbWVudChuYW1lKSk7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgZWxlbWVudCk7XG59XG5mdW5jdGlvbiBjbGFpbV9zdmdfZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Z19lbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGNsYWltX3RleHQobm9kZXMsIGRhdGEpIHtcbiAgICByZXR1cm4gY2xhaW1fbm9kZShub2RlcywgKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDMsIChub2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGFTdHIgPSAnJyArIGRhdGE7XG4gICAgICAgIGlmIChub2RlLmRhdGEuc3RhcnRzV2l0aChkYXRhU3RyKSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuZGF0YS5sZW5ndGggIT09IGRhdGFTdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuc3BsaXRUZXh0KGRhdGFTdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IGRhdGFTdHI7XG4gICAgICAgIH1cbiAgICB9LCAoKSA9PiB0ZXh0KGRhdGEpLCB0cnVlIC8vIFRleHQgbm9kZXMgc2hvdWxkIG5vdCB1cGRhdGUgbGFzdCBpbmRleCBzaW5jZSBpdCBpcyBsaWtlbHkgbm90IHdvcnRoIGl0IHRvIGVsaW1pbmF0ZSBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGFjdHVhbCBlbGVtZW50c1xuICAgICk7XG59XG5mdW5jdGlvbiBjbGFpbV9zcGFjZShub2Rlcykge1xuICAgIHJldHVybiBjbGFpbV90ZXh0KG5vZGVzLCAnICcpO1xufVxuZnVuY3Rpb24gZmluZF9jb21tZW50KG5vZGVzLCB0ZXh0LCBzdGFydCkge1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogY29tbWVudCBub2RlICovICYmIG5vZGUudGV4dENvbnRlbnQudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXMubGVuZ3RoO1xufVxuZnVuY3Rpb24gY2xhaW1faHRtbF90YWcobm9kZXMpIHtcbiAgICAvLyBmaW5kIGh0bWwgb3BlbmluZyB0YWdcbiAgICBjb25zdCBzdGFydF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX1NUQVJUJywgMCk7XG4gICAgY29uc3QgZW5kX2luZGV4ID0gZmluZF9jb21tZW50KG5vZGVzLCAnSFRNTF9UQUdfRU5EJywgc3RhcnRfaW5kZXgpO1xuICAgIGlmIChzdGFydF9pbmRleCA9PT0gZW5kX2luZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbigpO1xuICAgIH1cbiAgICBpbml0X2NsYWltX2luZm8obm9kZXMpO1xuICAgIGNvbnN0IGh0bWxfdGFnX25vZGVzID0gbm9kZXMuc3BsaWNlKHN0YXJ0X2luZGV4LCBlbmRfaW5kZXggLSBzdGFydF9pbmRleCArIDEpO1xuICAgIGRldGFjaChodG1sX3RhZ19ub2Rlc1swXSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzW2h0bWxfdGFnX25vZGVzLmxlbmd0aCAtIDFdKTtcbiAgICBjb25zdCBjbGFpbWVkX25vZGVzID0gaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSk7XG4gICAgZm9yIChjb25zdCBuIG9mIGNsYWltZWRfbm9kZXMpIHtcbiAgICAgICAgbi5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihjbGFpbWVkX25vZGVzKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCAhPT0gZGF0YSlcbiAgICAgICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF92YWx1ZShpbnB1dCwgdmFsdWUpIHtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3R5cGUoaW5wdXQsIHR5cGUpIHtcbiAgICB0cnkge1xuICAgICAgICBpbnB1dC50eXBlID0gdHlwZTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdHlsZShub2RlLCBrZXksIHZhbHVlLCBpbXBvcnRhbnQpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlLCBpbXBvcnRhbnQgPyAnaW1wb3J0YW50JyA6ICcnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gLTE7IC8vIG5vIG9wdGlvbiBzaG91bGQgYmUgc2VsZWN0ZWRcbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X3ZhbHVlKHNlbGVjdCkge1xuICAgIGNvbnN0IHNlbGVjdGVkX29wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpIHx8IHNlbGVjdC5vcHRpb25zWzBdO1xuICAgIHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5mdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG4gICAgcmV0dXJuIFtdLm1hcC5jYWxsKHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKCc6Y2hlY2tlZCcpLCBvcHRpb24gPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuLy8gdW5mb3J0dW5hdGVseSB0aGlzIGNhbid0IGJlIGEgY29uc3RhbnQgYXMgdGhhdCB3b3VsZG4ndCBiZSB0cmVlLXNoYWtlYWJsZVxuLy8gc28gd2UgY2FjaGUgdGhlIHJlc3VsdCBpbnN0ZWFkXG5sZXQgY3Jvc3NvcmlnaW47XG5mdW5jdGlvbiBpc19jcm9zc29yaWdpbigpIHtcbiAgICBpZiAoY3Jvc3NvcmlnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjcm9zc29yaWdpbiA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB2b2lkIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjcm9zc29yaWdpbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNyb3Nzb3JpZ2luO1xufVxuZnVuY3Rpb24gYWRkX3Jlc2l6ZV9saXN0ZW5lcihub2RlLCBmbikge1xuICAgIGNvbnN0IGNvbXB1dGVkX3N0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoY29tcHV0ZWRfc3R5bGUucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIH1cbiAgICBjb25zdCBpZnJhbWUgPSBlbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5OiBibG9jazsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7ICcgK1xuICAgICAgICAnb3ZlcmZsb3c6IGhpZGRlbjsgYm9yZGVyOiAwOyBvcGFjaXR5OiAwOyBwb2ludGVyLWV2ZW50czogbm9uZTsgei1pbmRleDogLTE7Jyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIGlmcmFtZS50YWJJbmRleCA9IC0xO1xuICAgIGNvbnN0IGNyb3Nzb3JpZ2luID0gaXNfY3Jvc3NvcmlnaW4oKTtcbiAgICBsZXQgdW5zdWJzY3JpYmU7XG4gICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSBcImRhdGE6dGV4dC9odG1sLDxzY3JpcHQ+b25yZXNpemU9ZnVuY3Rpb24oKXtwYXJlbnQucG9zdE1lc3NhZ2UoMCwnKicpfTwvc2NyaXB0PlwiO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3Rlbih3aW5kb3csICdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBpZnJhbWUuY29udGVudFdpbmRvdylcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4oaWZyYW1lLmNvbnRlbnRXaW5kb3csICdyZXNpemUnLCBmbik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGFwcGVuZChub2RlLCBpZnJhbWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bnN1YnNjcmliZSAmJiBpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBkZXRhY2goaWZyYW1lKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9nZ2xlX2NsYXNzKGVsZW1lbnQsIG5hbWUsIHRvZ2dsZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0W3RvZ2dsZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xufVxuZnVuY3Rpb24gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCwgYnViYmxlcyA9IGZhbHNlKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGZhbHNlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmNsYXNzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgIH1cbiAgICBtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuZSkge1xuICAgICAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5jKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5jbGFzcyBIdG1sVGFnSHlkcmF0aW9uIGV4dGVuZHMgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoY2xhaW1lZF9ub2Rlcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMubCkge1xuICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuYyhodG1sKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZV90b19vYmplY3QoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gZm9yIG11bHRpcGxlIGRvY3VtZW50cyBiZWNhdXNlIGEgU3ZlbHRlIGFwcGxpY2F0aW9uIGNvdWxkIGFsc28gY29udGFpbiBpZnJhbWVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy8zNjI0XG5jb25zdCBtYW5hZ2VkX3N0eWxlcyA9IG5ldyBNYXAoKTtcbmxldCBhY3RpdmUgPSAwO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpIHtcbiAgICBjb25zdCBpbmZvID0geyBzdHlsZXNoZWV0OiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSwgcnVsZXM6IHt9IH07XG4gICAgbWFuYWdlZF9zdHlsZXMuc2V0KGRvYywgaW5mbyk7XG4gICAgcmV0dXJuIGluZm87XG59XG5mdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuICAgIGxldCBrZXlmcmFtZXMgPSAne1xcbic7XG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhICsgKGIgLSBhKSAqIGVhc2UocCk7XG4gICAgICAgIGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuICAgIGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuICAgIGNvbnN0IGRvYyA9IGdldF9yb290X2Zvcl9zdHlsZShub2RlKTtcbiAgICBjb25zdCB7IHN0eWxlc2hlZXQsIHJ1bGVzIH0gPSBtYW5hZ2VkX3N0eWxlcy5nZXQoZG9jKSB8fCBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKTtcbiAgICBpZiAoIXJ1bGVzW25hbWVdKSB7XG4gICAgICAgIHJ1bGVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7bmFtZX0gJHtydWxlfWAsIHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uID0gbm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJyc7XG4gICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBgJHthbmltYXRpb24gPyBgJHthbmltYXRpb259LCBgIDogJyd9JHtuYW1lfSAke2R1cmF0aW9ufW1zIGxpbmVhciAke2RlbGF5fW1zIDEgYm90aGA7XG4gICAgYWN0aXZlICs9IDE7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSAobm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIobmFtZVxuICAgICAgICA/IGFuaW0gPT4gYW5pbS5pbmRleE9mKG5hbWUpIDwgMCAvLyByZW1vdmUgc3BlY2lmaWMgYW5pbWF0aW9uXG4gICAgICAgIDogYW5pbSA9PiBhbmltLmluZGV4T2YoJ19fc3ZlbHRlJykgPT09IC0xIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGRlbGV0ZWQgPSBwcmV2aW91cy5sZW5ndGggLSBuZXh0Lmxlbmd0aDtcbiAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IG5leHQuam9pbignLCAnKTtcbiAgICAgICAgYWN0aXZlIC09IGRlbGV0ZWQ7XG4gICAgICAgIGlmICghYWN0aXZlKVxuICAgICAgICAgICAgY2xlYXJfcnVsZXMoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcbiAgICByYWYoKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5mb3JFYWNoKGluZm8gPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBzdHlsZXNoZWV0IH0gPSBpbmZvO1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgaW5mby5ydWxlcyA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuY2xlYXIoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG4gICAgaWYgKCFmcm9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJiBmcm9tLnJpZ2h0ID09PSB0by5yaWdodCAmJiBmcm9tLnRvcCA9PT0gdG8udG9wICYmIGZyb20uYm90dG9tID09PSB0by5ib3R0b20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogc2hvdWxkIHRoaXMgYmUgc2VwYXJhdGVkIGZyb20gZGVzdHJ1Y3R1cmluZz8gT3Igc3RhcnQvZW5kIGFkZGVkIHRvIHB1YmxpYyBhcGkgYW5kIGRvY3VtZW50YXRpb24/XG4gICAgc3RhcnQ6IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86XG4gICAgZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLCB0aWNrID0gbm9vcCwgY3NzIH0gPSBmbihub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgbGV0IG5hbWU7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5KSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgbmFtZSk7XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9vcChub3cgPT4ge1xuICAgICAgICBpZiAoIXN0YXJ0ZWQgJiYgbm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkICYmIG5vdyA+PSBlbmQpIHtcbiAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBzdGFydF90aW1lO1xuICAgICAgICAgICAgY29uc3QgdCA9IDAgKyAxICogZWFzaW5nKHAgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydCgpO1xuICAgIHRpY2soMCwgMSk7XG4gICAgcmV0dXJuIHN0b3A7XG59XG5mdW5jdGlvbiBmaXhfcG9zaXRpb24obm9kZSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdhYnNvbHV0ZScgJiYgc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcbiAgICAgICAgY29uc3QgYSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZF90cmFuc2Zvcm0obm9kZSwgYSkge1xuICAgIGNvbnN0IGIgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcbiAgICB9XG59XG5cbmxldCBjdXJyZW50X2NvbXBvbmVudDtcbmZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBjdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWN1cnJlbnRfY29tcG9uZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIGNhbGxlZCBvdXRzaWRlIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbicpO1xuICAgIHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGJlZm9yZVVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmJlZm9yZV91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG5mdW5jdGlvbiBjcmVhdGVFdmVudERpc3BhdGNoZXIoKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcmV0dXJuICh0eXBlLCBkZXRhaWwpID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY29tcG9uZW50LCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBzZXRDb250ZXh0KGtleSwgY29udGV4dCkge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KGtleSkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LmdldChrZXkpO1xufVxuZnVuY3Rpb24gZ2V0QWxsQ29udGV4dHMoKSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQ7XG59XG5mdW5jdGlvbiBoYXNDb250ZXh0KGtleSkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LmhhcyhrZXkpO1xufVxuLy8gVE9ETyBmaWd1cmUgb3V0IGlmIHdlIHN0aWxsIHdhbnQgdG8gc3VwcG9ydFxuLy8gc2hvcnRoYW5kIGV2ZW50cywgb3IgaWYgd2Ugd2FudCB0byBpbXBsZW1lbnRcbi8vIGEgcmVhbCBidWJibGluZyBtZWNoYW5pc21cbmZ1bmN0aW9uIGJ1YmJsZShjb21wb25lbnQsIGV2ZW50KSB7XG4gICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1tldmVudC50eXBlXTtcbiAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiBmbi5jYWxsKHRoaXMsIGV2ZW50KSk7XG4gICAgfVxufVxuXG5jb25zdCBkaXJ0eV9jb21wb25lbnRzID0gW107XG5jb25zdCBpbnRyb3MgPSB7IGVuYWJsZWQ6IGZhbHNlIH07XG5jb25zdCBiaW5kaW5nX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVuZGVyX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgZmx1c2hfY2FsbGJhY2tzID0gW107XG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5sZXQgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuZnVuY3Rpb24gc2NoZWR1bGVfdXBkYXRlKCkge1xuICAgIGlmICghdXBkYXRlX3NjaGVkdWxlZCkge1xuICAgICAgICB1cGRhdGVfc2NoZWR1bGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZWRfcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0aWNrKCkge1xuICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgIHJldHVybiByZXNvbHZlZF9wcm9taXNlO1xufVxuZnVuY3Rpb24gYWRkX3JlbmRlcl9jYWxsYmFjayhmbikge1xuICAgIHJlbmRlcl9jYWxsYmFja3MucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZGRfZmx1c2hfY2FsbGJhY2soZm4pIHtcbiAgICBmbHVzaF9jYWxsYmFja3MucHVzaChmbik7XG59XG4vLyBmbHVzaCgpIGNhbGxzIGNhbGxiYWNrcyBpbiB0aGlzIG9yZGVyOlxuLy8gMS4gQWxsIGJlZm9yZVVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlblxuLy8gMi4gQWxsIGJpbmQ6dGhpcyBjYWxsYmFja3MsIGluIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gMy4gQWxsIGFmdGVyVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuLiBFWENFUFRcbi8vICAgIGZvciBhZnRlclVwZGF0ZXMgY2FsbGVkIGR1cmluZyB0aGUgaW5pdGlhbCBvbk1vdW50LCB3aGljaCBhcmUgY2FsbGVkIGluXG4vLyAgICByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIFNpbmNlIGNhbGxiYWNrcyBtaWdodCB1cGRhdGUgY29tcG9uZW50IHZhbHVlcywgd2hpY2ggY291bGQgdHJpZ2dlciBhbm90aGVyXG4vLyBjYWxsIHRvIGZsdXNoKCksIHRoZSBmb2xsb3dpbmcgc3RlcHMgZ3VhcmQgYWdhaW5zdCB0aGlzOlxuLy8gMS4gRHVyaW5nIGJlZm9yZVVwZGF0ZSwgYW55IHVwZGF0ZWQgY29tcG9uZW50cyB3aWxsIGJlIGFkZGVkIHRvIHRoZVxuLy8gICAgZGlydHlfY29tcG9uZW50cyBhcnJheSBhbmQgd2lsbCBjYXVzZSBhIHJlZW50cmFudCBjYWxsIHRvIGZsdXNoKCkuIEJlY2F1c2Vcbi8vICAgIHRoZSBmbHVzaCBpbmRleCBpcyBrZXB0IG91dHNpZGUgdGhlIGZ1bmN0aW9uLCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbCBwaWNrXG4vLyAgICB1cCB3aGVyZSB0aGUgZWFybGllciBjYWxsIGxlZnQgb2ZmIGFuZCBnbyB0aHJvdWdoIGFsbCBkaXJ0eSBjb21wb25lbnRzLiBUaGVcbi8vICAgIGN1cnJlbnRfY29tcG9uZW50IHZhbHVlIGlzIHNhdmVkIGFuZCByZXN0b3JlZCBzbyB0aGF0IHRoZSByZWVudHJhbnQgY2FsbCB3aWxsXG4vLyAgICBub3QgaW50ZXJmZXJlIHdpdGggdGhlIFwicGFyZW50XCIgZmx1c2goKSBjYWxsLlxuLy8gMi4gYmluZDp0aGlzIGNhbGxiYWNrcyBjYW5ub3QgdHJpZ2dlciBuZXcgZmx1c2goKSBjYWxscy5cbi8vIDMuIER1cmluZyBhZnRlclVwZGF0ZSwgYW55IHVwZGF0ZWQgY29tcG9uZW50cyB3aWxsIE5PVCBoYXZlIHRoZWlyIGFmdGVyVXBkYXRlXG4vLyAgICBjYWxsYmFjayBjYWxsZWQgYSBzZWNvbmQgdGltZTsgdGhlIHNlZW5fY2FsbGJhY2tzIHNldCwgb3V0c2lkZSB0aGUgZmx1c2goKVxuLy8gICAgZnVuY3Rpb24sIGd1YXJhbnRlZXMgdGhpcyBiZWhhdmlvci5cbmNvbnN0IHNlZW5fY2FsbGJhY2tzID0gbmV3IFNldCgpO1xubGV0IGZsdXNoaWR4ID0gMDsgLy8gRG8gKm5vdCogbW92ZSB0aGlzIGluc2lkZSB0aGUgZmx1c2goKSBmdW5jdGlvblxuZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgY29uc3Qgc2F2ZWRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgZG8ge1xuICAgICAgICAvLyBmaXJzdCwgY2FsbCBiZWZvcmVVcGRhdGUgZnVuY3Rpb25zXG4gICAgICAgIC8vIGFuZCB1cGRhdGUgY29tcG9uZW50c1xuICAgICAgICB3aGlsZSAoZmx1c2hpZHggPCBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGlydHlfY29tcG9uZW50c1tmbHVzaGlkeF07XG4gICAgICAgICAgICBmbHVzaGlkeCsrO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoY29tcG9uZW50LiQkKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgZmx1c2hpZHggPSAwO1xuICAgICAgICB3aGlsZSAoYmluZGluZ19jYWxsYmFja3MubGVuZ3RoKVxuICAgICAgICAgICAgYmluZGluZ19jYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgLy8gdGhlbiwgb25jZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBjYWxsXG4gICAgICAgIC8vIGFmdGVyVXBkYXRlIGZ1bmN0aW9ucy4gVGhpcyBtYXkgY2F1c2VcbiAgICAgICAgLy8gc3Vic2VxdWVudCB1cGRhdGVzLi4uXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSByZW5kZXJfY2FsbGJhY2tzW2ldO1xuICAgICAgICAgICAgaWYgKCFzZWVuX2NhbGxiYWNrcy5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgLy8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgICAgIHNlZW5fY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgfSB3aGlsZSAoZGlydHlfY29tcG9uZW50cy5sZW5ndGgpO1xuICAgIHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIGZsdXNoX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgIH1cbiAgICB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgc2Vlbl9jYWxsYmFja3MuY2xlYXIoKTtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoc2F2ZWRfY29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZSgkJCkge1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAkJC51cGRhdGUoKTtcbiAgICAgICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAgICAgY29uc3QgZGlydHkgPSAkJC5kaXJ0eTtcbiAgICAgICAgJCQuZGlydHkgPSBbLTFdO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5wKCQkLmN0eCwgZGlydHkpO1xuICAgICAgICAkJC5hZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbiAgICB9XG59XG5cbmxldCBwcm9taXNlO1xuZnVuY3Rpb24gd2FpdCgpIHtcbiAgICBpZiAoIXByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKG5vZGUsIGRpcmVjdGlvbiwga2luZCkge1xuICAgIG5vZGUuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQoYCR7ZGlyZWN0aW9uID8gJ2ludHJvJyA6ICdvdXRybyd9JHtraW5kfWApKTtcbn1cbmNvbnN0IG91dHJvaW5nID0gbmV3IFNldCgpO1xubGV0IG91dHJvcztcbmZ1bmN0aW9uIGdyb3VwX291dHJvcygpIHtcbiAgICBvdXRyb3MgPSB7XG4gICAgICAgIHI6IDAsXG4gICAgICAgIGM6IFtdLFxuICAgICAgICBwOiBvdXRyb3MgLy8gcGFyZW50IGdyb3VwXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrX291dHJvcygpIHtcbiAgICBpZiAoIW91dHJvcy5yKSB7XG4gICAgICAgIHJ1bl9hbGwob3V0cm9zLmMpO1xuICAgIH1cbiAgICBvdXRyb3MgPSBvdXRyb3MucDtcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25faW4oYmxvY2ssIGxvY2FsKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLmkpIHtcbiAgICAgICAgb3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcbiAgICAgICAgYmxvY2suaShsb2NhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9vdXQoYmxvY2ssIGxvY2FsLCBkZXRhY2gsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLm8pIHtcbiAgICAgICAgaWYgKG91dHJvaW5nLmhhcyhibG9jaykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG91dHJvaW5nLmFkZChibG9jayk7XG4gICAgICAgIG91dHJvcy5jLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgb3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChkZXRhY2gpXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmQoMSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJsb2NrLm8obG9jYWwpO1xuICAgIH1cbn1cbmNvbnN0IG51bGxfdHJhbnNpdGlvbiA9IHsgZHVyYXRpb246IDAgfTtcbmZ1bmN0aW9uIGNyZWF0ZV9pbl90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IGZhbHNlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBsZXQgdGFzaztcbiAgICBsZXQgdWlkID0gMDtcbiAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzLCB1aWQrKyk7XG4gICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRhc2spXG4gICAgICAgICAgICB0YXNrLmFib3J0KCk7XG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIHRydWUsICdzdGFydCcpKTtcbiAgICAgICAgdGFzayA9IGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCB0cnVlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbihnbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX291dF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGNvbnN0IGdyb3VwID0gb3V0cm9zO1xuICAgIGdyb3VwLnIgKz0gMTtcbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMSwgMCwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IChwcm9ncmFtLmIgLSB0KTtcbiAgICAgICAgZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhOiB0LFxuICAgICAgICAgICAgYjogcHJvZ3JhbS5iLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgc3RhcnQ6IHByb2dyYW0uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHByb2dyYW0uc3RhcnQgKyBkdXJhdGlvbixcbiAgICAgICAgICAgIGdyb3VwOiBwcm9ncmFtLmdyb3VwXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKGIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyDigJQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyDigJQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrc1tpXSA9PT0gYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICAgICAgaWYgKCFpbmZvLmhhc0NhdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHByb21pc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaChpbmZvLCBjdHgsIGRpcnR5KSB7XG4gICAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gICAgY29uc3QgeyByZXNvbHZlZCB9ID0gaW5mbztcbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgY2hpbGRfY3R4W2luZm8udmFsdWVdID0gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGlmIChpbmZvLmN1cnJlbnQgPT09IGluZm8uY2F0Y2gpIHtcbiAgICAgICAgY2hpbGRfY3R4W2luZm8uZXJyb3JdID0gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGluZm8uYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbn1cblxuY29uc3QgZ2xvYmFscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBnbG9iYWxUaGlzXG4gICAgICAgIDogZ2xvYmFsKTtcblxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZCgxKTtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5mdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKG9sZF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCBkeW5hbWljLCBjdHgsIGxpc3QsIGxvb2t1cCwgbm9kZSwgZGVzdHJveSwgY3JlYXRlX2VhY2hfYmxvY2ssIG5leHQsIGdldF9jb250ZXh0KSB7XG4gICAgbGV0IG8gPSBvbGRfYmxvY2tzLmxlbmd0aDtcbiAgICBsZXQgbiA9IGxpc3QubGVuZ3RoO1xuICAgIGxldCBpID0gbztcbiAgICBjb25zdCBvbGRfaW5kZXhlcyA9IHt9O1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG4gICAgY29uc3QgbmV3X2Jsb2NrcyA9IFtdO1xuICAgIGNvbnN0IG5ld19sb29rdXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuICAgIGkgPSBuO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgYmxvY2sgPSBsb29rdXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgICAgIGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2soa2V5LCBjaGlsZF9jdHgpO1xuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgICAgIGJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3X2xvb2t1cC5zZXQoa2V5LCBuZXdfYmxvY2tzW2ldID0gYmxvY2spO1xuICAgICAgICBpZiAoa2V5IGluIG9sZF9pbmRleGVzKVxuICAgICAgICAgICAgZGVsdGFzLnNldChrZXksIE1hdGguYWJzKGkgLSBvbGRfaW5kZXhlc1trZXldKSk7XG4gICAgfVxuICAgIGNvbnN0IHdpbGxfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBkaWRfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBpbnNlcnQoYmxvY2spIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgIGJsb2NrLm0obm9kZSwgbmV4dCk7XG4gICAgICAgIGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG4gICAgICAgIG5leHQgPSBibG9jay5maXJzdDtcbiAgICAgICAgbi0tO1xuICAgIH1cbiAgICB3aGlsZSAobyAmJiBuKSB7XG4gICAgICAgIGNvbnN0IG5ld19ibG9jayA9IG5ld19ibG9ja3NbbiAtIDFdO1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcbiAgICAgICAgY29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG4gICAgICAgIGNvbnN0IG9sZF9rZXkgPSBvbGRfYmxvY2sua2V5O1xuICAgICAgICBpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkIGJsb2NrXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbG9va3VwLmhhcyhuZXdfa2V5KSB8fCB3aWxsX21vdmUuaGFzKG5ld19rZXkpKSB7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWx0YXMuZ2V0KG5ld19rZXkpID4gZGVsdGFzLmdldChvbGRfa2V5KSkge1xuICAgICAgICAgICAgZGlkX21vdmUuYWRkKG5ld19rZXkpO1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWxsX21vdmUuYWRkKG9sZF9rZXkpO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChvLS0pIHtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvXTtcbiAgICAgICAgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSlcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgIH1cbiAgICB3aGlsZSAobilcbiAgICAgICAgaW5zZXJ0KG5ld19ibG9ja3NbbiAtIDFdKTtcbiAgICByZXR1cm4gbmV3X2Jsb2Nrcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfa2V5cyhjdHgsIGxpc3QsIGdldF9jb250ZXh0LCBnZXRfa2V5KSB7XG4gICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpKTtcbiAgICAgICAgaWYgKGtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGhhdmUgZHVwbGljYXRlIGtleXMgaW4gYSBrZXllZCBlYWNoJyk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldF9zcHJlYWRfdXBkYXRlKGxldmVscywgdXBkYXRlcykge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHt9O1xuICAgIGNvbnN0IHRvX251bGxfb3V0ID0ge307XG4gICAgY29uc3QgYWNjb3VudGVkX2ZvciA9IHsgJCRzY29wZTogMSB9O1xuICAgIGxldCBpID0gbGV2ZWxzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IG8gPSBsZXZlbHNbaV07XG4gICAgICAgIGNvbnN0IG4gPSB1cGRhdGVzW2ldO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBuKSlcbiAgICAgICAgICAgICAgICAgICAgdG9fbnVsbF9vdXRba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50ZWRfZm9yW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlW2tleV0gPSBuW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV2ZWxzW2ldID0gbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRvX251bGxfb3V0KSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUpKVxuICAgICAgICAgICAgdXBkYXRlW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGU7XG59XG5mdW5jdGlvbiBnZXRfc3ByZWFkX29iamVjdChzcHJlYWRfcHJvcHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNwcmVhZF9wcm9wcyA9PT0gJ29iamVjdCcgJiYgc3ByZWFkX3Byb3BzICE9PSBudWxsID8gc3ByZWFkX3Byb3BzIDoge307XG59XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sXG5jb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICAnYWxsb3dmdWxsc2NyZWVuJyxcbiAgICAnYWxsb3dwYXltZW50cmVxdWVzdCcsXG4gICAgJ2FzeW5jJyxcbiAgICAnYXV0b2ZvY3VzJyxcbiAgICAnYXV0b3BsYXknLFxuICAgICdjaGVja2VkJyxcbiAgICAnY29udHJvbHMnLFxuICAgICdkZWZhdWx0JyxcbiAgICAnZGVmZXInLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ2Zvcm1ub3ZhbGlkYXRlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaXNtYXAnLFxuICAgICdsb29wJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdtdXRlZCcsXG4gICAgJ25vbW9kdWxlJyxcbiAgICAnbm92YWxpZGF0ZScsXG4gICAgJ29wZW4nLFxuICAgICdwbGF5c2lubGluZScsXG4gICAgJ3JlYWRvbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdyZXZlcnNlZCcsXG4gICAgJ3NlbGVjdGVkJ1xuXSk7XG5cbmNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gL1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuZnVuY3Rpb24gc3ByZWFkKGFyZ3MsIGF0dHJzX3RvX2FkZCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5hcmdzKTtcbiAgICBpZiAoYXR0cnNfdG9fYWRkKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLmNsYXNzZXM7XG4gICAgICAgIGNvbnN0IHN0eWxlc190b19hZGQgPSBhdHRyc190b19hZGQuc3R5bGVzO1xuICAgICAgICBpZiAoY2xhc3Nlc190b19hZGQpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gY2xhc3Nlc190b19hZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzICs9ICcgJyArIGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZXNfdG9fYWRkKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5zdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVzX3RvX2FkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnN0eWxlID0gc3R5bGVfb2JqZWN0X3RvX3N0cmluZyhtZXJnZV9zc3Jfc3R5bGVzKGF0dHJpYnV0ZXMuc3R5bGUsIHN0eWxlc190b19hZGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RyID0gJyc7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLnRlc3QobmFtZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKVxuICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0ciArPSBgICR7bmFtZX09XCIke3ZhbHVlfVwiYDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBtZXJnZV9zc3Jfc3R5bGVzKHN0eWxlX2F0dHJpYnV0ZSwgc3R5bGVfZGlyZWN0aXZlKSB7XG4gICAgY29uc3Qgc3R5bGVfb2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCBpbmRpdmlkdWFsX3N0eWxlIG9mIHN0eWxlX2F0dHJpYnV0ZS5zcGxpdCgnOycpKSB7XG4gICAgICAgIGNvbnN0IGNvbG9uX2luZGV4ID0gaW5kaXZpZHVhbF9zdHlsZS5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBpbmRpdmlkdWFsX3N0eWxlLnNsaWNlKDAsIGNvbG9uX2luZGV4KS50cmltKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5kaXZpZHVhbF9zdHlsZS5zbGljZShjb2xvbl9pbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgaWYgKCFuYW1lKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHN0eWxlX29iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGVfZGlyZWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVfZGlyZWN0aXZlW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN0eWxlX29iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHN0eWxlX29iamVjdFtuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVfb2JqZWN0O1xufVxuY29uc3QgZXNjYXBlZCA9IHtcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7JyxcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0Oydcbn07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCkge1xuICAgIHJldHVybiBTdHJpbmcoaHRtbCkucmVwbGFjZSgvW1wiJyY8Pl0vZywgbWF0Y2ggPT4gZXNjYXBlZFttYXRjaF0pO1xufVxuZnVuY3Rpb24gZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gZXNjYXBlKHZhbHVlKSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZXNjYXBlX29iamVjdChvYmopIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGVhY2goaXRlbXMsIGZuKSB7XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgc3RyICs9IGZuKGl0ZW1zW2ldLCBpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IG1pc3NpbmdfY29tcG9uZW50ID0ge1xuICAgICQkcmVuZGVyOiAoKSA9PiAnJ1xufTtcbmZ1bmN0aW9uIHZhbGlkYXRlX2NvbXBvbmVudChjb21wb25lbnQsIG5hbWUpIHtcbiAgICBpZiAoIWNvbXBvbmVudCB8fCAhY29tcG9uZW50LiQkcmVuZGVyKSB7XG4gICAgICAgIGlmIChuYW1lID09PSAnc3ZlbHRlOmNvbXBvbmVudCcpXG4gICAgICAgICAgICBuYW1lICs9ICcgdGhpcz17Li4ufSc7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgPCR7bmFtZX0+IGlzIG5vdCBhIHZhbGlkIFNTUiBjb21wb25lbnQuIFlvdSBtYXkgbmVlZCB0byByZXZpZXcgeW91ciBidWlsZCBjb25maWcgdG8gZW5zdXJlIHRoYXQgZGVwZW5kZW5jaWVzIGFyZSBjb21waWxlZCwgcmF0aGVyIHRoYW4gaW1wb3J0ZWQgYXMgcHJlLWNvbXBpbGVkIG1vZHVsZXNgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGRlYnVnKGZpbGUsIGxpbmUsIGNvbHVtbiwgdmFsdWVzKSB7XG4gICAgY29uc29sZS5sb2coYHtAZGVidWd9ICR7ZmlsZSA/IGZpbGUgKyAnICcgOiAnJ30oJHtsaW5lfToke2NvbHVtbn0pYCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIHJldHVybiAnJztcbn1cbmxldCBvbl9kZXN0cm95O1xuZnVuY3Rpb24gY3JlYXRlX3Nzcl9jb21wb25lbnQoZm4pIHtcbiAgICBmdW5jdGlvbiAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMsIGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgICAgICBjb25zdCAkJCA9IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3ksXG4gICAgICAgICAgICBjb250ZXh0OiBuZXcgTWFwKGNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuICAgICAgICAgICAgLy8gdGhlc2Ugd2lsbCBiZSBpbW1lZGlhdGVseSBkaXNjYXJkZWRcbiAgICAgICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KClcbiAgICAgICAgfTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHsgJCQgfSk7XG4gICAgICAgIGNvbnN0IGh0bWwgPSBmbihyZXN1bHQsIHByb3BzLCBiaW5kaW5ncywgc2xvdHMpO1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG4gICAgICAgIHJldHVybiBodG1sO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXI6IChwcm9wcyA9IHt9LCB7ICQkc2xvdHMgPSB7fSwgY29udGV4dCA9IG5ldyBNYXAoKSB9ID0ge30pID0+IHtcbiAgICAgICAgICAgIG9uX2Rlc3Ryb3kgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHsgdGl0bGU6ICcnLCBoZWFkOiAnJywgY3NzOiBuZXcgU2V0KCkgfTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSAkJHJlbmRlcihyZXN1bHQsIHByb3BzLCB7fSwgJCRzbG90cywgY29udGV4dCk7XG4gICAgICAgICAgICBydW5fYWxsKG9uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBodG1sLFxuICAgICAgICAgICAgICAgIGNzczoge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBBcnJheS5mcm9tKHJlc3VsdC5jc3MpLm1hcChjc3MgPT4gY3NzLmNvZGUpLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgICAgICAgICBtYXA6IG51bGwgLy8gVE9ET1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhZDogcmVzdWx0LnRpdGxlICsgcmVzdWx0LmhlYWRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgICQkcmVuZGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGFkZF9hdHRyaWJ1dGUobmFtZSwgdmFsdWUsIGJvb2xlYW4pIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAoYm9vbGVhbiAmJiAhdmFsdWUpKVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgcmV0dXJuIGAgJHtuYW1lfSR7dmFsdWUgPT09IHRydWUgJiYgYm9vbGVhbl9hdHRyaWJ1dGVzLmhhcyhuYW1lKSA/ICcnIDogYD0ke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeShlc2NhcGUodmFsdWUpKSA6IGBcIiR7dmFsdWV9XCJgfWB9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZV9vYmplY3QpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHN0eWxlX29iamVjdFtrZXldKVxuICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9OiAke3N0eWxlX29iamVjdFtrZXldfTtgKVxuICAgICAgICAuam9pbignICcpO1xufVxuZnVuY3Rpb24gYWRkX3N0eWxlcyhzdHlsZV9vYmplY3QpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCk7XG4gICAgcmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IsIGN1c3RvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBvbl9tb3VudCwgb25fZGVzdHJveSwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG4gICAgZnJhZ21lbnQgJiYgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgaWYgKCFjdXN0b21FbGVtZW50KSB7XG4gICAgICAgIC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICBpZiAob25fZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIG9uX2Rlc3Ryb3kucHVzaCguLi5uZXdfb25fZGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFZGdlIGNhc2UgLSBjb21wb25lbnQgd2FzIGRlc3Ryb3llZCBpbW1lZGlhdGVseSxcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG4gICAgICAgICAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gZGVzdHJveV9jb21wb25lbnQoY29tcG9uZW50LCBkZXRhY2hpbmcpIHtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJDtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuZChkZXRhY2hpbmcpO1xuICAgICAgICAvLyBUT0RPIG51bGwgb3V0IG90aGVyIHJlZnMsIGluY2x1ZGluZyBjb21wb25lbnQuJCQgKGJ1dCBuZWVkIHRvXG4gICAgICAgIC8vIHByZXNlcnZlIGZpbmFsIHN0YXRlPylcbiAgICAgICAgJCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgJCQuY3R4ID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcbiAgICBpZiAoY29tcG9uZW50LiQkLmRpcnR5WzBdID09PSAtMSkge1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgICAgIGNvbXBvbmVudC4kJC5kaXJ0eS5maWxsKDApO1xuICAgIH1cbiAgICBjb21wb25lbnQuJCQuZGlydHlbKGkgLyAzMSkgfCAwXSB8PSAoMSA8PCAoaSAlIDMxKSk7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UsIGNyZWF0ZV9mcmFnbWVudCwgbm90X2VxdWFsLCBwcm9wcywgYXBwZW5kX3N0eWxlcywgZGlydHkgPSBbLTFdKSB7XG4gICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgICAgY3R4OiBudWxsLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBwcm9wcyxcbiAgICAgICAgdXBkYXRlOiBub29wLFxuICAgICAgICBub3RfZXF1YWwsXG4gICAgICAgIGJvdW5kOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlXG4gICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgb25fZGVzdHJveTogW10sXG4gICAgICAgIG9uX2Rpc2Nvbm5lY3Q6IFtdLFxuICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgY29udGV4dDogbmV3IE1hcChvcHRpb25zLmNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuICAgICAgICAvLyBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgZGlydHksXG4gICAgICAgIHNraXBfYm91bmQ6IGZhbHNlLFxuICAgICAgICByb290OiBvcHRpb25zLnRhcmdldCB8fCBwYXJlbnRfY29tcG9uZW50LiQkLnJvb3RcbiAgICB9O1xuICAgIGFwcGVuZF9zdHlsZXMgJiYgYXBwZW5kX3N0eWxlcygkJC5yb290KTtcbiAgICBsZXQgcmVhZHkgPSBmYWxzZTtcbiAgICAkJC5jdHggPSBpbnN0YW5jZVxuICAgICAgICA/IGluc3RhbmNlKGNvbXBvbmVudCwgb3B0aW9ucy5wcm9wcyB8fCB7fSwgKGksIHJldCwgLi4ucmVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN0Lmxlbmd0aCA/IHJlc3RbMF0gOiByZXQ7XG4gICAgICAgICAgICBpZiAoJCQuY3R4ICYmIG5vdF9lcXVhbCgkJC5jdHhbaV0sICQkLmN0eFtpXSA9IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICghJCQuc2tpcF9ib3VuZCAmJiAkJC5ib3VuZFtpXSlcbiAgICAgICAgICAgICAgICAgICAgJCQuYm91bmRbaV0odmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZWFkeSlcbiAgICAgICAgICAgICAgICAgICAgbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSlcbiAgICAgICAgOiBbXTtcbiAgICAkJC51cGRhdGUoKTtcbiAgICByZWFkeSA9IHRydWU7XG4gICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAvLyBgZmFsc2VgIGFzIGEgc3BlY2lhbCBjYXNlIG9mIG5vIERPTSBjb21wb25lbnRcbiAgICAkJC5mcmFnbWVudCA9IGNyZWF0ZV9mcmFnbWVudCA/IGNyZWF0ZV9mcmFnbWVudCgkJC5jdHgpIDogZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLmh5ZHJhdGUpIHtcbiAgICAgICAgICAgIHN0YXJ0X2h5ZHJhdGluZygpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQubChub2Rlcyk7XG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKGRldGFjaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgICBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IsIG9wdGlvbnMuY3VzdG9tRWxlbWVudCk7XG4gICAgICAgIGVuZF9oeWRyYXRpbmcoKTtcbiAgICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xufVxubGV0IFN2ZWx0ZUVsZW1lbnQ7XG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgU3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25fbW91bnQgfSA9IHRoaXMuJCQ7XG4gICAgICAgICAgICB0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCQuc2xvdHRlZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLiQkLnNsb3R0ZWRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbYXR0cl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHJ1bl9hbGwodGhpcy4kJC5vbl9kaXNjb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHNob3VsZCB0aGlzIGRlbGVnYXRlIHRvIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuNDYuMicgfSwgZGV0YWlsKSwgdHJ1ZSkpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZCh0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbl9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBpbnNlcnRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9kZXYobm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlJywgeyBub2RlIH0pO1xuICAgIGRldGFjaChub2RlKTtcbn1cbmZ1bmN0aW9uIGRldGFjaF9iZXR3ZWVuX2RldihiZWZvcmUsIGFmdGVyKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZyAmJiBiZWZvcmUubmV4dFNpYmxpbmcgIT09IGFmdGVyKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYmVmb3JlX2RldihhZnRlcikge1xuICAgIHdoaWxlIChhZnRlci5wcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihhZnRlci5wcmV2aW91c1NpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9hZnRlcl9kZXYoYmVmb3JlKSB7XG4gICAgd2hpbGUgKGJlZm9yZS5uZXh0U2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbGlzdGVuX2Rldihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucywgaGFzX3ByZXZlbnRfZGVmYXVsdCwgaGFzX3N0b3BfcHJvcGFnYXRpb24pIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBvcHRpb25zID09PSB0cnVlID8gWydjYXB0dXJlJ10gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01BZGRFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgIGNvbnN0IGRpc3Bvc2UgPSBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICAgICAgZGlzcG9zZSgpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyX2Rldihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSB9KTtcbiAgICBlbHNlXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0QXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUsIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gcHJvcF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZVtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldFByb3BlcnR5JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBkYXRhc2V0X2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlLmRhdGFzZXRbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhc2V0JywgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ID09PSBkYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhJywgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzIHdpdGggc29tZSBtaW5vciBkZXYtZW5oYW5jZW1lbnRzLiBVc2VkIHdoZW4gZGV2PXRydWUuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudERldiBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgKCFvcHRpb25zLnRhcmdldCAmJiAhb3B0aW9ucy4kJGlubGluZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIid0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgICRkZXN0cm95KCkge1xuICAgICAgICBzdXBlci4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAkY2FwdHVyZV9zdGF0ZSgpIHsgfVxuICAgICRpbmplY3Rfc3RhdGUoKSB7IH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyB0byBjcmVhdGUgc3Ryb25nbHkgdHlwZWQgU3ZlbHRlIGNvbXBvbmVudHMuXG4gKiBUaGlzIG9ubHkgZXhpc3RzIGZvciB0eXBpbmcgcHVycG9zZXMgYW5kIHNob3VsZCBiZSB1c2VkIGluIGAuZC50c2AgZmlsZXMuXG4gKlxuICogIyMjIEV4YW1wbGU6XG4gKlxuICogWW91IGhhdmUgY29tcG9uZW50IGxpYnJhcnkgb24gbnBtIGNhbGxlZCBgY29tcG9uZW50LWxpYnJhcnlgLCBmcm9tIHdoaWNoXG4gKiB5b3UgZXhwb3J0IGEgY29tcG9uZW50IGNhbGxlZCBgTXlDb21wb25lbnRgLiBGb3IgU3ZlbHRlK1R5cGVTY3JpcHQgdXNlcnMsXG4gKiB5b3Ugd2FudCB0byBwcm92aWRlIHR5cGluZ3MuIFRoZXJlZm9yZSB5b3UgY3JlYXRlIGEgYGluZGV4LmQudHNgOlxuICogYGBgdHNcbiAqIGltcG9ydCB7IFN2ZWx0ZUNvbXBvbmVudFR5cGVkIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50VHlwZWQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGBgYFxuICogVHlwaW5nIHRoaXMgbWFrZXMgaXQgcG9zc2libGUgZm9yIElERXMgbGlrZSBWUyBDb2RlIHdpdGggdGhlIFN2ZWx0ZSBleHRlbnNpb25cbiAqIHRvIHByb3ZpZGUgaW50ZWxsaXNlbnNlIGFuZCB0byB1c2UgdGhlIGNvbXBvbmVudCBsaWtlIHRoaXMgaW4gYSBTdmVsdGUgZmlsZVxuICogd2l0aCBUeXBlU2NyaXB0OlxuICogYGBgc3ZlbHRlXG4gKiA8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICogXHRpbXBvcnQgeyBNeUNvbXBvbmVudCB9IGZyb20gXCJjb21wb25lbnQtbGlicmFyeVwiO1xuICogPC9zY3JpcHQ+XG4gKiA8TXlDb21wb25lbnQgZm9vPXsnYmFyJ30gLz5cbiAqIGBgYFxuICpcbiAqICMjIyMgV2h5IG5vdCBtYWtlIHRoaXMgcGFydCBvZiBgU3ZlbHRlQ29tcG9uZW50KERldilgP1xuICogQmVjYXVzZVxuICogYGBgdHNcbiAqIGNsYXNzIEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50PHtmb286IHN0cmluZ30+IHt9XG4gKiBjb25zdCBjb21wb25lbnQ6IHR5cGVvZiBTdmVsdGVDb21wb25lbnQgPSBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudDtcbiAqIGBgYFxuICogd2lsbCB0aHJvdyBhIHR5cGUgZXJyb3IsIHNvIHdlIG5lZWQgdG8gc2VwYXJhdGUgdGhlIG1vcmUgc3RyaWN0bHkgdHlwZWQgY2xhc3MuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50RGV2IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ID4gdGltZW91dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBIdG1sVGFnLCBIdG1sVGFnSHlkcmF0aW9uLCBTdmVsdGVDb21wb25lbnQsIFN2ZWx0ZUNvbXBvbmVudERldiwgU3ZlbHRlQ29tcG9uZW50VHlwZWQsIFN2ZWx0ZUVsZW1lbnQsIGFjdGlvbl9kZXN0cm95ZXIsIGFkZF9hdHRyaWJ1dGUsIGFkZF9jbGFzc2VzLCBhZGRfZmx1c2hfY2FsbGJhY2ssIGFkZF9sb2NhdGlvbiwgYWRkX3JlbmRlcl9jYWxsYmFjaywgYWRkX3Jlc2l6ZV9saXN0ZW5lciwgYWRkX3N0eWxlcywgYWRkX3RyYW5zZm9ybSwgYWZ0ZXJVcGRhdGUsIGFwcGVuZCwgYXBwZW5kX2RldiwgYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQsIGFwcGVuZF9oeWRyYXRpb24sIGFwcGVuZF9oeWRyYXRpb25fZGV2LCBhcHBlbmRfc3R5bGVzLCBhc3NpZ24sIGF0dHIsIGF0dHJfZGV2LCBhdHRyaWJ1dGVfdG9fb2JqZWN0LCBiZWZvcmVVcGRhdGUsIGJpbmQsIGJpbmRpbmdfY2FsbGJhY2tzLCBibGFua19vYmplY3QsIGJ1YmJsZSwgY2hlY2tfb3V0cm9zLCBjaGlsZHJlbiwgY2xhaW1fY29tcG9uZW50LCBjbGFpbV9lbGVtZW50LCBjbGFpbV9odG1sX3RhZywgY2xhaW1fc3BhY2UsIGNsYWltX3N2Z19lbGVtZW50LCBjbGFpbV90ZXh0LCBjbGVhcl9sb29wcywgY29tcG9uZW50X3N1YnNjcmliZSwgY29tcHV0ZV9yZXN0X3Byb3BzLCBjb21wdXRlX3Nsb3RzLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGNyZWF0ZV9hbmltYXRpb24sIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24sIGNyZWF0ZV9jb21wb25lbnQsIGNyZWF0ZV9pbl90cmFuc2l0aW9uLCBjcmVhdGVfb3V0X3RyYW5zaXRpb24sIGNyZWF0ZV9zbG90LCBjcmVhdGVfc3NyX2NvbXBvbmVudCwgY3VycmVudF9jb21wb25lbnQsIGN1c3RvbV9ldmVudCwgZGF0YXNldF9kZXYsIGRlYnVnLCBkZXN0cm95X2Jsb2NrLCBkZXN0cm95X2NvbXBvbmVudCwgZGVzdHJveV9lYWNoLCBkZXRhY2gsIGRldGFjaF9hZnRlcl9kZXYsIGRldGFjaF9iZWZvcmVfZGV2LCBkZXRhY2hfYmV0d2Vlbl9kZXYsIGRldGFjaF9kZXYsIGRpcnR5X2NvbXBvbmVudHMsIGRpc3BhdGNoX2RldiwgZWFjaCwgZWxlbWVudCwgZWxlbWVudF9pcywgZW1wdHksIGVuZF9oeWRyYXRpbmcsIGVzY2FwZSwgZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSwgZXNjYXBlX29iamVjdCwgZXNjYXBlZCwgZXhjbHVkZV9pbnRlcm5hbF9wcm9wcywgZml4X2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfcG9zaXRpb24sIGZsdXNoLCBnZXRBbGxDb250ZXh0cywgZ2V0Q29udGV4dCwgZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlLCBnZXRfYmluZGluZ19ncm91cF92YWx1ZSwgZ2V0X2N1cnJlbnRfY29tcG9uZW50LCBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzLCBnZXRfcm9vdF9mb3Jfc3R5bGUsIGdldF9zbG90X2NoYW5nZXMsIGdldF9zcHJlYWRfb2JqZWN0LCBnZXRfc3ByZWFkX3VwZGF0ZSwgZ2V0X3N0b3JlX3ZhbHVlLCBnbG9iYWxzLCBncm91cF9vdXRyb3MsIGhhbmRsZV9wcm9taXNlLCBoYXNDb250ZXh0LCBoYXNfcHJvcCwgaWRlbnRpdHksIGluaXQsIGluc2VydCwgaW5zZXJ0X2RldiwgaW5zZXJ0X2h5ZHJhdGlvbiwgaW5zZXJ0X2h5ZHJhdGlvbl9kZXYsIGludHJvcywgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIsIGlzX2NsaWVudCwgaXNfY3Jvc3NvcmlnaW4sIGlzX2VtcHR5LCBpc19mdW5jdGlvbiwgaXNfcHJvbWlzZSwgbGlzdGVuLCBsaXN0ZW5fZGV2LCBsb29wLCBsb29wX2d1YXJkLCBtZXJnZV9zc3Jfc3R5bGVzLCBtaXNzaW5nX2NvbXBvbmVudCwgbW91bnRfY29tcG9uZW50LCBub29wLCBub3RfZXF1YWwsIG5vdywgbnVsbF90b19lbXB0eSwgb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcywgb25EZXN0cm95LCBvbk1vdW50LCBvbmNlLCBvdXRyb19hbmRfZGVzdHJveV9ibG9jaywgcHJldmVudF9kZWZhdWx0LCBwcm9wX2RldiwgcXVlcnlfc2VsZWN0b3JfYWxsLCByYWYsIHJ1biwgcnVuX2FsbCwgc2FmZV9ub3RfZXF1YWwsIHNjaGVkdWxlX3VwZGF0ZSwgc2VsZWN0X211bHRpcGxlX3ZhbHVlLCBzZWxlY3Rfb3B0aW9uLCBzZWxlY3Rfb3B0aW9ucywgc2VsZWN0X3ZhbHVlLCBzZWxmLCBzZXRDb250ZXh0LCBzZXRfYXR0cmlidXRlcywgc2V0X2N1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSwgc2V0X2RhdGEsIHNldF9kYXRhX2Rldiwgc2V0X2lucHV0X3R5cGUsIHNldF9pbnB1dF92YWx1ZSwgc2V0X25vdywgc2V0X3JhZiwgc2V0X3N0b3JlX3ZhbHVlLCBzZXRfc3R5bGUsIHNldF9zdmdfYXR0cmlidXRlcywgc3BhY2UsIHNwcmVhZCwgc3JjX3VybF9lcXVhbCwgc3RhcnRfaHlkcmF0aW5nLCBzdG9wX3Byb3BhZ2F0aW9uLCBzdWJzY3JpYmUsIHN2Z19lbGVtZW50LCB0ZXh0LCB0aWNrLCB0aW1lX3Jhbmdlc190b19hcnJheSwgdG9fbnVtYmVyLCB0b2dnbGVfY2xhc3MsIHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0LCB0cnVzdGVkLCB1cGRhdGVfYXdhaXRfYmxvY2tfYnJhbmNoLCB1cGRhdGVfa2V5ZWRfZWFjaCwgdXBkYXRlX3Nsb3QsIHVwZGF0ZV9zbG90X2Jhc2UsIHZhbGlkYXRlX2NvbXBvbmVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHhsaW5rX2F0dHIgfTtcbiIsIi8vIGltcG9ydCB7IFNWTSB9IGZyb20gXCJsaWJzdm0tanNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5nZShuKSB7XHJcbiAgcmV0dXJuIEFycmF5KG4pXHJcbiAgICAuZmlsbCgpXHJcbiAgICAubWFwKChfLCBpKSA9PiBpKTtcclxufVxyXG5cclxuLy8gZXhwb3J0IGZ1bmN0aW9uIHZtaW4oYXJyKSB7XHJcbi8vICAgcmV0dXJuIGFyci5yZWR1Y2UoKHByZXYsIGN1ciApPT4gTWF0aC5taW4oKSlcclxuLy8gfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNxcmRpc3QocDEsIHAyKSB7XHJcbiAgbGV0IGR4ID0gcDJbMF0gLSBwMVswXSxcclxuICAgIGR5ID0gcDJbMV0gLSBwMVsxXTtcclxuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RlbFNoYXBlKHRoZXRhLCB4bGltLCB5bGltKSB7XHJcbiAgbGV0IHgxID0geGxpbVswXTtcclxuICBsZXQgeDIgPSB4bGltWzFdO1xyXG4gIGxldCB5MSA9ICgtdGhldGFbMl0gLSB4MSAqIHRoZXRhWzBdKSAvIHRoZXRhWzFdO1xyXG4gIGxldCB5MiA9ICgtdGhldGFbMl0gLSB4MiAqIHRoZXRhWzBdKSAvIHRoZXRhWzFdO1xyXG5cclxuICBsZXQgYmVsb3cgPSBbXSxcclxuICAgIGFib3ZlID0gW1xyXG4gICAgICBbeDEsIHlsaW1bMF1dLFxyXG4gICAgICBbeDEsIHlsaW1bMV1dLFxyXG4gICAgICBbeDIsIHlsaW1bMV1dLFxyXG4gICAgICBbeDIsIHlsaW1bMF1dLFxyXG4gICAgICBbeDEsIHlsaW1bMF1dLFxyXG4gICAgXTtcclxuXHJcbiAgaWYgKHkxID4geWxpbVsxXSAmJiB5MiA+IHlsaW1bMV0pIFthYm92ZSwgYmVsb3ddID0gW2JlbG93LCBhYm92ZV07XHJcbiAgZWxzZSB7XHJcbiAgICBiZWxvdyA9IFtcclxuICAgICAgW3gxLCB5MV0sXHJcbiAgICAgIFt4MiwgeTJdLFxyXG4gICAgICBbeDIsIE1hdGgubWluKHkxLCB5bGltWzBdKV0sXHJcbiAgICAgIFt4MSwgTWF0aC5taW4oeTEsIHlsaW1bMF0pXSxcclxuICAgICAgW3gxLCB5MV0sXHJcbiAgICBdO1xyXG5cclxuICAgIGFib3ZlID0gW1xyXG4gICAgICBbeDEsIHkxXSxcclxuICAgICAgW3gyLCB5Ml0sXHJcbiAgICAgIFt4MiwgTWF0aC5tYXgoeTEsIHlsaW1bMV0pXSxcclxuICAgICAgW3gxLCBNYXRoLm1heCh5MSwgeWxpbVsxXSldLFxyXG4gICAgICBbeDEsIHkxXSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgYm91bmRhcnk6IFtcclxuICAgICAgW3gxLCB5MV0sXHJcbiAgICAgIFt4MiwgeTJdLFxyXG4gICAgXSxcclxuICAgIGJlbG93OiBiZWxvdyxcclxuICAgIGFib3ZlOiBhYm92ZSxcclxuICB9O1xyXG59XHJcblxyXG4vLyBzaG91bGQgbW92ZSB0aGlzIGludG8ganNvbiBpbnN0ZWFkIG9mIGNvbXB1dGluZ1xyXG5leHBvcnQgZnVuY3Rpb24gYXR0YWNrU3VjY2VzcyhzdWJwb3B1bGF0aW9uLCB0aGV0YSkge1xyXG4gIHJldHVybiAwO1xyXG59XHJcblxyXG5sZXQgcm5nID0ge1xyXG4gIHN0YXRlOiAxLFxyXG4gIG06IDB4ODAwMDAwMDAsXHJcbiAgYTogMTEwMzUxNTI0NSxcclxuICBjOiAxMjM0NSxcclxufTtcclxuZnVuY3Rpb24gcmFuZG9tKCkge1xyXG4gIHJuZy5zdGF0ZSA9IChybmcuYSAqIHJuZy5zdGF0ZSArIHJuZy5jKSAlIHJuZy5tO1xyXG4gIHJldHVybiBybmcuc3RhdGUgLyAocm5nLm0gLSAxKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmFuZEdhdXNzKCkge1xyXG4gIGxldCB1ID0gMCxcclxuICAgIHYgPSAwO1xyXG4gIHdoaWxlICh1ID09PSAwKSB1ID0gcmFuZG9tKCk7XHJcbiAgd2hpbGUgKHYgPT09IDApIHYgPSByYW5kb20oKTtcclxuICByZXR1cm4gTWF0aC5zcXJ0KC0yLjAgKiBNYXRoLmxvZyh1KSkgKiBNYXRoLmNvcygyLjAgKiBNYXRoLlBJICogdik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJhbmRJbnQobikge1xyXG4gIHJldHVybiBwYXJzZUludChuICogcmFuZG9tKCkpICUgbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VfY2xhc3NpZmljYXRpb24obl9zYW1wbGVzLCBmbGlwX3ksIGNsYXNzX3NlcCwgc2VlZCkge1xyXG4gIGxldCBYID0gW10sXHJcbiAgICB5ID0gW107XHJcblxyXG4gIHJuZy5zdGF0ZSA9IHNlZWQ7XHJcblxyXG4gIGxldCBybmRDb3JuZXIgPSBbcmFuZEludCgyKSwgcmFuZEludCgyKV07XHJcbiAgaWYgKHJuZENvcm5lciA9PSBbMSwgMV0pO1xyXG4gIFstMSwgMV0uZm9yRWFjaCgobGFiZWwpID0+IHtcclxuICAgIGxldCBbczEsIHMyXSA9IFtyYW5kb20oKSArIDAuNSwgcmFuZG9tKCkgKyAwLjVdO1xyXG4gICAgbGV0IHQgPSByYW5kR2F1c3MoKSAvIDI7XHJcbiAgICBsZXQgY2x1c3RlciA9IHJhbmdlKG5fc2FtcGxlcyAvIDIpLm1hcCgoKSA9PiB7XHJcbiAgICAgIGxldCBlID0gW1xyXG4gICAgICAgIGxhYmVsICogY2xhc3Nfc2VwICsgczEgKiByYW5kR2F1c3MoKSxcclxuICAgICAgICBsYWJlbCAqIGNsYXNzX3NlcCArIHMyICogcmFuZEdhdXNzKCksXHJcbiAgICAgIF07XHJcbiAgICAgIGVbMV0gKz0gdCAqIGVbMF07XHJcbiAgICAgIHJldHVybiBlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyArK2kpIHt9XHJcblxyXG4gICAgWCA9IFguY29uY2F0KGNsdXN0ZXIpO1xyXG5cclxuICAgIC8vIHkgPSB5LmNvbmNhdChyYW5nZShuX3NhbXBsZXMgLyAyKS5tYXAoKCkgPT4gbGFiZWwpKTtcclxuXHJcbiAgICB5ID0geS5jb25jYXQoXHJcbiAgICAgIHJhbmdlKG5fc2FtcGxlcyAvIDIpLm1hcCgoKSA9PiAoMiAqIHJhbmRvbSgpIDwgZmxpcF95ID8gLWxhYmVsIDogbGFiZWwpKVxyXG4gICAgKTtcclxuICB9KTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAyOyArK2kpIHtcclxuICAgIGxldCBbeE1pbiwgeE1heF0gPSBbXHJcbiAgICAgIE1hdGgubWluKC4uLlgubWFwKCh4KSA9PiB4W2ldKSksXHJcbiAgICAgIE1hdGgubWF4KC4uLlgubWFwKCh4KSA9PiB4W2ldKSksXHJcbiAgICBdO1xyXG4gICAgbGV0IHAycCA9IHhNYXggLSB4TWluO1xyXG4gICAgWCA9IFgubWFwKChlKSA9PiB7XHJcbiAgICAgIGVbaV0gPSAoZVtpXSAtIHhNaW4pIC8gcDJwO1xyXG4gICAgICByZXR1cm4gZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbGV0IGRzZXQgPSBYLm1hcCgoZSwgaSkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogZSxcclxuICAgICAgeTogeVtpXSxcclxuICAgICAgc3VicG9wczogW10sXHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZHNldDtcclxufVxyXG5cclxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRyYWluX3N2YyhYLCB5KSB7XHJcbi8vICAgbGV0IHN2bSA9IG5ldyBTVk0oe1xyXG4vLyAgICAga2VybmVsOiBTVk0uS0VSTkVMX1RZUEVTLkxJTkVBUixcclxuLy8gICAgIHR5cGU6IFNWTS5TVk1fVFlQRVMuT05FX0NMQVNTLFxyXG4vLyAgICAgY29zdDogMSxcclxuLy8gICB9KTtcclxuXHJcbi8vICAgc3ZtLnRyYWluKFgsIHkpO1xyXG4vLyAgIHJldHVybiBzdm07XHJcbi8vIH1cclxuIiwiPHNjcmlwdD5cclxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xyXG4gIGltcG9ydCB7IHNxcmRpc3QsIGdldE1vZGVsU2hhcGUgfSBmcm9tIFwiLi4vdXRpbC5qc1wiO1xyXG5cclxuICBleHBvcnQgbGV0IGluaXRTcEluZGV4O1xyXG4gIGV4cG9ydCBsZXQgZGF0YTtcclxuICBleHBvcnQgbGV0IGZJRDtcclxuXHJcbiAgbGV0IGNhbnZhcztcclxuICBsZXQgc3ZnO1xyXG4gIGxldCBzbGlkZXI7XHJcbiAgbGV0IHBsYXlCdXR0b247XHJcbiAgbGV0IHN0ZXBGb3J3YXJkQnV0dG9uLCBzdGVwQmFja0J1dHRvbjtcclxuXHJcbiAgbGV0IHNwX2luZGV4ID0gaW5pdFNwSW5kZXg7XHJcbiAgbGV0IGhvdmVyX2luZGV4ID0gLTE7XHJcbiAgbGV0IHBvaXNvbkluZGV4ID0gMDtcclxuICBsZXQgcG9pc29ucyA9IFtdO1xyXG4gIGxldCBuUG9pc29ucyA9IGRhdGEuYXR0YWNrc1tzcF9pbmRleF0ucG9pc29ucy5sZW5ndGg7XHJcbiAgbGV0IGZyYW1lcmF0ZSA9IE1hdGgubWF4KE1hdGgubWluKDE1LCBwYXJzZUludCgoblBvaXNvbnMgKyAxKSAvIDEwKSksIDEpO1xyXG4gIGxldCBpc1BsYXlpbmcgPSB0cnVlO1xyXG4gIGxldCB3YWl0aW5nID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0IHdpZHRoID0gNzA0O1xyXG4gIGNvbnN0IGhlaWdodCA9IDYwMDtcclxuXHJcbiAgY29uc3QgcGxheVBhdGggPSBcIk0gMCAwIEwgMTAgNSBMIDAgMTAgWlwiO1xyXG4gIGNvbnN0IHBhdXNlUGF0aCA9IFwiTSAwIDAgTCAwIDEwIEwgMyAxMCBMIDMgMCBaIE0gNiAwIEwgNiAxMCBMIDkgMTAgTCA5IDAgWlwiO1xyXG4gIGNvbnN0IHN0ZXBGb3J3YXJkUGF0aCA9IFwiTSAwIDAgTCAzIDAgTCA5IDUgTCAzIDEwIEwgMCAxMCBMIDAgMTAgTCA2IDUgTCAwIDBcIjtcclxuICBjb25zdCBzdGVwQmFja1BhdGggPSBcIk0gOSAwIEwgNiAwIEwgMCA1IEwgNiAxMCBMIDkgMTAgTCA5IDEwIEwgMyA1IEwgOSAwXCI7XHJcblxyXG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcclxuICAgIGxldCBkc2V0ID0gZGF0YS5kc2V0O1xyXG4gICAgY29uc3QgeFZhbHVlID0gKHApID0+IHAueFswXTtcclxuICAgIGNvbnN0IHlWYWx1ZSA9IChwKSA9PiBwLnhbMV07XHJcbiAgICBjb25zdCBnZXRDbGFzcyA9IChwKSA9PiB7XHJcbiAgICAgIGlmIChwLnN1YnBvcHMgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiBwLnkgPT0gMSA/IFwiYmx1ZS1wb2lzb25cIiA6IFwicmVkLXBvaXNvblwiO1xyXG4gICAgICBpZiAocC5zdWJwb3BzLmluY2x1ZGVzKHNwX2luZGV4KSkgcmV0dXJuIFwidGFyZ2V0LXBvaW50XCI7XHJcbiAgICAgIGVsc2UgaWYgKHAuc3VicG9wcy5pbmNsdWRlcyhob3Zlcl9pbmRleCkpIHJldHVybiBcInNlbGVjdGVkLXBvaW50XCI7XHJcbiAgICAgIGVsc2UgaWYgKHAueSA9PSAxKSByZXR1cm4gXCJibHVlLXBvaW50XCI7XHJcbiAgICAgIGVsc2UgcmV0dXJuIFwicmVkLXBvaW50XCI7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiA2MCwgcmlnaHQ6IDQwLCBib3R0b206IDYwLCBsZWZ0OiA0MCB9O1xyXG4gICAgY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XHJcbiAgICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xyXG5cclxuICAgIGxldCBleHRlbnRYID0gZDMuZXh0ZW50KGRzZXQsIHhWYWx1ZSk7XHJcbiAgICBleHRlbnRYID0gW2V4dGVudFhbMF0gLSAwLjEsIGV4dGVudFhbMV0gKyAwLjFdO1xyXG4gICAgY29uc3QgeFNjYWxlID0gZDNcclxuICAgICAgLnNjYWxlTGluZWFyKClcclxuICAgICAgLmRvbWFpbihleHRlbnRYKVxyXG4gICAgICAucmFuZ2UoWzAsIGlubmVyV2lkdGhdKVxyXG4gICAgICAubmljZSgpO1xyXG5cclxuICAgIGxldCBleHRlbnRZID0gZDMuZXh0ZW50KGRzZXQsIHlWYWx1ZSk7XHJcbiAgICBleHRlbnRZID0gW2V4dGVudFlbMF0gLSAwLjEsIGV4dGVudFlbMV0gKyAwLjFdO1xyXG4gICAgY29uc3QgeVNjYWxlID0gZDNcclxuICAgICAgLnNjYWxlTGluZWFyKClcclxuICAgICAgLmRvbWFpbihleHRlbnRZKVxyXG4gICAgICAucmFuZ2UoW2lubmVySGVpZ2h0LCAwXSlcclxuICAgICAgLm5pY2UoKTtcclxuXHJcbiAgICBjb25zdCBzaGFkaW5nRyA9IGQzXHJcbiAgICAgIC5zZWxlY3Qoc3ZnKVxyXG4gICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKVxyXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG4gICAgY29uc3QgZHNldEcgPSBkM1xyXG4gICAgICAuc2VsZWN0KHN2ZylcclxuICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIilcclxuICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xyXG5cclxuICAgIGNvbnN0IHBvaXNvbkcgPSBkM1xyXG4gICAgICAuc2VsZWN0KHN2ZylcclxuICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIilcclxuICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xyXG5cclxuICAgIGNvbnN0IG1vZGVsRyA9IGQzXHJcbiAgICAgIC5zZWxlY3Qoc3ZnKVxyXG4gICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKVxyXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG4gICAgY29uc3QgeEF4aXMgPSBkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja1NpemUoLWlubmVySGVpZ2h0KS50aWNrUGFkZGluZygxNSk7XHJcbiAgICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHlTY2FsZSkudGlja1NpemUoLWlubmVyV2lkdGgpLnRpY2tQYWRkaW5nKDEwKTtcclxuXHJcbiAgICBjb25zdCB5QXhpc0cgPSBkc2V0Ry5hcHBlbmQoXCJnXCIpLmNhbGwoeUF4aXMpO1xyXG5cclxuICAgIGNvbnN0IHhBeGlzRyA9IGRzZXRHXHJcbiAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5jYWxsKHhBeGlzKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XHJcblxyXG4gICAgbGV0IGxpbmUgPSBkM1xyXG4gICAgICAubGluZSgpXHJcbiAgICAgIC54KChkKSA9PiB4U2NhbGUoZFswXSkpXHJcbiAgICAgIC55KChkKSA9PiB5U2NhbGUoZFsxXSkpO1xyXG5cclxuICAgIG1vZGVsR1xyXG4gICAgICAuYXBwZW5kKFwiY2xpcFBhdGhcIilcclxuICAgICAgLmF0dHIoXCJpZFwiLCBgcmVjdC1jbGlwJHtmSUR9YClcclxuICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgLmF0dHIoXCJ4XCIsIDApXHJcbiAgICAgIC5hdHRyKFwieVwiLCAwKVxyXG4gICAgICAuYXR0cihcIndpZHRoXCIsIGlubmVyV2lkdGgpXHJcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGlubmVySGVpZ2h0KTtcclxuXHJcbiAgICBjb25zdCBtb2RlbF9jID0gbW9kZWxHXHJcbiAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXHJcbiAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImRhcmtncmF5XCIpXHJcbiAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCA1KVxyXG4gICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBgdXJsKCNyZWN0LWNsaXAke2ZJRH0pYCk7XHJcblxyXG4gICAgY29uc3QgbW9kZWxfdCA9IG1vZGVsR1xyXG4gICAgICAuYXBwZW5kKFwibGluZVwiKVxyXG4gICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJibGFja1wiKVxyXG4gICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgNSlcclxuICAgICAgLmF0dHIoXCJjbGlwLXBhdGhcIiwgYHVybCgjcmVjdC1jbGlwJHtmSUR9KWApO1xyXG5cclxuICAgIGNvbnN0IGJlbG93QXJlYSA9IHNoYWRpbmdHXHJcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgIC5hdHRyKFwiY2xpcC1wYXRoXCIsIGB1cmwoI3JlY3QtY2xpcCR7ZklEfSlgKTtcclxuXHJcbiAgICBjb25zdCBhYm92ZUFyZWEgPSBzaGFkaW5nR1xyXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBgdXJsKCNyZWN0LWNsaXAke2ZJRH0pYCk7XHJcblxyXG4gICAgbGV0IGRzZXRTY2F0dGVyID0gZHNldEdcclxuICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxyXG4gICAgICAuZGF0YShkc2V0KVxyXG4gICAgICAuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZ2V0Q2xhc3MpXHJcbiAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxyXG4gICAgICAuYXR0cihcImN5XCIsIChkKSA9PiB5U2NhbGUoeVZhbHVlKGQpKSk7XHJcblxyXG4gICAgbGV0IHBvaXNvblNjYXR0ZXIgPSBwb2lzb25HLnNlbGVjdEFsbChcInBhdGhcIik7XHJcblxyXG4gICAgY29uc3QgZGVsYXVuYXkgPSBkMy5EZWxhdW5heS5mcm9tKGRhdGEuY2x1c3Rlcl9jZW50ZXJzKTtcclxuXHJcbiAgICAvLy0tLSBmaWd1cmUgaW50ZXJhY3Rpb24gY29udHJvbCAtLS0vL1xyXG4gICAgY29uc3QgdXBkYXRlQ2xhc3NlcyA9ICgpID0+IHtcclxuICAgICAgcG9pc29uU2NhdHRlci5hdHRyKFwiY2xhc3NcIiwgZ2V0Q2xhc3MpO1xyXG4gICAgICBkc2V0U2NhdHRlci5hdHRyKFwiY2xhc3NcIiwgZ2V0Q2xhc3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCByZXNldFNsaWRlciA9ICgpID0+IHtcclxuICAgICAgc2xpZGVyLnZhbHVlID0gcG9pc29uSW5kZXggPSAwO1xyXG4gICAgICBkMy5zZWxlY3Qoc2xpZGVyKS5hdHRyKFwibWF4XCIsIG5Qb2lzb25zKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcGF1c2UgPSAocGF1c2VkKSA9PiB7XHJcbiAgICAgIGlzUGxheWluZyA9IHBhdXNlZCA9PSB1bmRlZmluZWQgPyAhaXNQbGF5aW5nIDogcGF1c2VkO1xyXG4gICAgICBkMy5zZWxlY3QocGxheUJ1dHRvbilcclxuICAgICAgICAuc2VsZWN0KFwic3ZnXCIpXHJcbiAgICAgICAgLnNlbGVjdChcInBhdGhcIilcclxuICAgICAgICAuYXR0cihcImRcIiwgaXNQbGF5aW5nID8gcGF1c2VQYXRoIDogcGxheVBhdGgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBhbmltU3RlcEZyYW1lID0gKCkgPT4ge1xyXG4gICAgICBpZiAoaXNQbGF5aW5nICYmICF3YWl0aW5nKSB7XHJcbiAgICAgICAgc2xpZGVyLnZhbHVlID0gKDEgKyArc2xpZGVyLnZhbHVlKSAlIChuUG9pc29ucyArIDEpO1xyXG4gICAgICAgIHNsaWRlckhhbmRsZXIoZmFsc2UpO1xyXG4gICAgICAgIGlmIChwb2lzb25JbmRleCA9PSBuUG9pc29ucykge1xyXG4gICAgICAgICAgd2FpdGluZyA9IHRydWU7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+ICh3YWl0aW5nID0gZmFsc2UpLCAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgc2V0VGltZW91dChhbmltU3RlcEZyYW1lLCAxMDAwIC8gZnJhbWVyYXRlKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTW9kZWxzID0gKCkgPT4ge1xyXG4gICAgICBsZXQgbW9kZWxTaGFwZTtcclxuICAgICAgbGV0IHRoZXRhX2MgPSBkYXRhLmF0dGFja3Nbc3BfaW5kZXhdLmltX21vZGVsc1swXTtcclxuICAgICAgbGV0IHRoZXRhX3QgPSBkYXRhLmF0dGFja3Nbc3BfaW5kZXhdLmltX21vZGVsc1twb2lzb25JbmRleF07XHJcblxyXG4gICAgICBtb2RlbFNoYXBlID0gZ2V0TW9kZWxTaGFwZSh0aGV0YV9jLCBleHRlbnRYLCBleHRlbnRZKTtcclxuICAgICAgbW9kZWxfY1xyXG4gICAgICAgIC5hdHRyKFwieDFcIiwgeFNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMF1bMF0pKVxyXG4gICAgICAgIC5hdHRyKFwieDJcIiwgeFNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMV1bMF0pKVxyXG4gICAgICAgIC5hdHRyKFwieTFcIiwgeVNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMF1bMV0pKVxyXG4gICAgICAgIC5hdHRyKFwieTJcIiwgeVNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMV1bMV0pKTtcclxuXHJcbiAgICAgIG1vZGVsU2hhcGUgPSBnZXRNb2RlbFNoYXBlKHRoZXRhX3QsIGV4dGVudFgsIGV4dGVudFkpO1xyXG4gICAgICBtb2RlbF90XHJcbiAgICAgICAgLmF0dHIoXCJ4MVwiLCB4U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVswXVswXSkpXHJcbiAgICAgICAgLmF0dHIoXCJ4MlwiLCB4U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVsxXVswXSkpXHJcbiAgICAgICAgLmF0dHIoXCJ5MVwiLCB5U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVswXVsxXSkpXHJcbiAgICAgICAgLmF0dHIoXCJ5MlwiLCB5U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVsxXVsxXSkpO1xyXG4gICAgICBiZWxvd0FyZWFcclxuICAgICAgICAuYXR0cihcImRcIiwgbGluZShtb2RlbFNoYXBlLmJlbG93KSlcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIHRoZXRhX3RbMV0gPCAwID8gXCJhcmVhLWJsdWVcIiA6IFwiYXJlYS1yZWRcIik7XHJcbiAgICAgIGFib3ZlQXJlYVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBsaW5lKG1vZGVsU2hhcGUuYWJvdmUpKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgdGhldGFfdFsxXSA8IDAgPyBcImFyZWEtcmVkXCIgOiBcImFyZWEtYmx1ZVwiKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgdXBkYXRlRGF0YSA9ICgpID0+IHtcclxuICAgICAgcG9pc29ucy5mb3JFYWNoKChlLCBpKSA9PiAoZS5pZCA9IGkudG9TdHJpbmcoKSkpO1xyXG4gICAgICBwb2lzb25TY2F0dGVyID0gcG9pc29uRy5zZWxlY3RBbGwoXCJwYXRoXCIpLmRhdGEocG9pc29ucywgKGQpID0+IGQuaWQpO1xyXG5cclxuICAgICAgcG9pc29uU2NhdHRlclxyXG4gICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIChkKSA9PiBnZXRDbGFzcyhkKSlcclxuICAgICAgICAuYXR0cihcImRcIiwgZDMuc3ltYm9sKCkudHlwZShkMy5zeW1ib2xDcm9zcykuc2l6ZSg2MDApKVxyXG4gICAgICAgIC5hdHRyKFxyXG4gICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgIChkKSA9PiBgdHJhbnNsYXRlKCR7eFNjYWxlKHhWYWx1ZShkKSl9LCR7eVNjYWxlKHlWYWx1ZShkKSl9KWBcclxuICAgICAgICApXHJcbiAgICAgICAgLy8gLmF0dHIoXCJjeFwiLCAoZCkgPT4geFNjYWxlKHhWYWx1ZShkKSkpXHJcbiAgICAgICAgLy8gLmF0dHIoXCJjeVwiLCAoZCkgPT4geVNjYWxlKHlWYWx1ZShkKSkpO1xyXG4gICAgICAgIC50cmFuc2l0aW9uKClcclxuICAgICAgICAuZHVyYXRpb24oaXNQbGF5aW5nID8gMjAwIDogMjAwKVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBkMy5zeW1ib2woKS50eXBlKGQzLnN5bWJvbENyb3NzKS5zaXplKDIwMCkpO1xyXG4gICAgICAvLyAudHJhbnNpdGlvbigpXHJcbiAgICAgIC8vIC5kdXJhdGlvbig1MDApXHJcbiAgICAgIC8vIC5hdHRyKFxyXG4gICAgICAvLyAgIFwidHJhbnNmb3JtXCIsXHJcbiAgICAgIC8vICAgKGQpID0+XHJcbiAgICAgIC8vICAgICBgdHJhbnNsYXRlKCR7eFNjYWxlKHhWYWx1ZShkKSl9LCR7eVNjYWxlKHlWYWx1ZShkKSl9KXJvdGF0ZSgtNDUpYFxyXG4gICAgICAvLyApO1xyXG5cclxuICAgICAgcG9pc29uU2NhdHRlci5leGl0KCkucmVtb3ZlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG1vdXNlbW92ZUhhbmRsZXIgPSAoZXZlbnQpID0+IHtcclxuICAgICAgbGV0IFt4LCB5XSA9IGQzLnBvaW50ZXIoZXZlbnQpO1xyXG4gICAgICAoeCAtPSBtYXJnaW4ubGVmdCksICh5IC09IG1hcmdpbi50b3ApO1xyXG4gICAgICBbeCwgeV0gPSBbeFNjYWxlLmludmVydCh4KSwgeVNjYWxlLmludmVydCh5KV07XHJcbiAgICAgIGhvdmVyX2luZGV4ID0gZGVsYXVuYXkuZmluZCh4LCB5LCBzcF9pbmRleCk7XHJcbiAgICAgIGlmIChzcXJkaXN0KGRhdGEuY2x1c3Rlcl9jZW50ZXJzW2hvdmVyX2luZGV4XSwgW3gsIHldKSA+IDAuMDUpXHJcbiAgICAgICAgaG92ZXJfaW5kZXggPSAtMTtcclxuICAgICAgdXBkYXRlQ2xhc3NlcygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjbGlja0hhbmRsZXIgPSAoZXZlbnQpID0+IHtcclxuICAgICAgaWYgKGhvdmVyX2luZGV4ICE9IC0xICYmIGhvdmVyX2luZGV4ICE9IHNwX2luZGV4KSB7XHJcbiAgICAgICAgc3BfaW5kZXggPSBob3Zlcl9pbmRleDtcclxuICAgICAgICBuUG9pc29ucyA9IGRhdGEuYXR0YWNrc1tzcF9pbmRleF0ucG9pc29ucy5sZW5ndGg7XHJcbiAgICAgICAgZnJhbWVyYXRlID0gTWF0aC5tYXgoTWF0aC5taW4oMTUsIHBhcnNlSW50KChuUG9pc29ucyArIDEpIC8gMTApKSwgMSk7XHJcbiAgICAgICAgcmVzZXRTbGlkZXIoKTtcclxuICAgICAgICBzbGlkZXJIYW5kbGVyKCk7XHJcbiAgICAgICAgdXBkYXRlQ2xhc3NlcygpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG1vdXNlb3V0SGFuZGxlciA9IChldmVudCkgPT4ge1xyXG4gICAgICBob3Zlcl9pbmRleCA9IC0xO1xyXG4gICAgICB1cGRhdGVDbGFzc2VzKCk7XHJcbiAgICAgIHVwZGF0ZU1vZGVscygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBzbGlkZXJIYW5kbGVyID0gKGlzVXNlcikgPT4ge1xyXG4gICAgICBpZiAoaXNVc2VyKSBwYXVzZShmYWxzZSk7XHJcbiAgICAgIHBvaXNvbkluZGV4ID0gK3NsaWRlci52YWx1ZTtcclxuICAgICAgcG9pc29ucyA9IGRhdGEuYXR0YWNrc1tzcF9pbmRleF0ucG9pc29ucy5zbGljZSgwLCBwb2lzb25JbmRleCk7XHJcbiAgICAgIHVwZGF0ZURhdGEoKTtcclxuICAgICAgdXBkYXRlTW9kZWxzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGQzLnNlbGVjdChjYW52YXMpXHJcbiAgICAgIC5vbihcIm1vdXNlbW92ZVwiLCBtb3VzZW1vdmVIYW5kbGVyKVxyXG4gICAgICAub24oXCJjbGlja1wiLCBjbGlja0hhbmRsZXIpXHJcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIG1vdXNlb3V0SGFuZGxlcik7XHJcblxyXG4gICAgZDMuc2VsZWN0KHNsaWRlcilcclxuICAgICAgLmF0dHIoXCJtYXhcIiwgblBvaXNvbnMpXHJcbiAgICAgIC5vbihcImlucHV0XCIsICgpID0+IHNsaWRlckhhbmRsZXIodHJ1ZSkpO1xyXG5cclxuICAgIGQzLnNlbGVjdChwbGF5QnV0dG9uKS5vbihcImNsaWNrXCIsICgpID0+IHBhdXNlKCkpO1xyXG4gICAgZDMuc2VsZWN0KHN0ZXBGb3J3YXJkQnV0dG9uKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgc2xpZGVyLnZhbHVlID0gTWF0aC5taW4oK3NsaWRlci52YWx1ZSArIDEsIG5Qb2lzb25zKTtcclxuICAgICAgc2xpZGVySGFuZGxlcih0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgZDMuc2VsZWN0KHN0ZXBCYWNrQnV0dG9uKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgc2xpZGVyLnZhbHVlID0gTWF0aC5tYXgoK3NsaWRlci52YWx1ZSAtIDEsIDApO1xyXG4gICAgICBzbGlkZXJIYW5kbGVyKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdXBkYXRlRGF0YSgpO1xyXG4gICAgdXBkYXRlRGF0YSgpOyAvLyBwcm9iYWJseSBhIGJ1ZyBzb21ld2hlcmUsIGJ1dCBuZWVkIHRvIGRvIHRoaXMgdHdpY2UgZm9yIGhpZ2hsaWdodGluZyBzdWJwb3BzIHRvIHdvcmsgZm9yIHNvbWUgcmVhc29uXHJcbiAgICB1cGRhdGVNb2RlbHMoKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KGFuaW1TdGVwRnJhbWUsIDEwMDAgLyBmcmFtZXJhdGUpO1xyXG4gIH07XHJcblxyXG4gIG9uTW91bnQoKCkgPT4ge1xyXG4gICAgcmVuZGVyKCk7XHJcbiAgfSk7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN2ZyBiaW5kOnRoaXM9e3N2Z30ge3dpZHRofSB7aGVpZ2h0fSBjbGFzcz1cIm92ZXJsYXlcIj5cclxuICA8dGV4dCB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiIHg9XCI1MCVcIiB5PVwiOTklXCJcclxuICAgID57cG9pc29uSW5kZXh9IC8ge25Qb2lzb25zfSBQb2lzb25zPC90ZXh0XHJcbiAgPjwvc3ZnXHJcbj5cclxuPGNhbnZhcyBiaW5kOnRoaXM9e2NhbnZhc30ge3dpZHRofSB7aGVpZ2h0fSAvPlxyXG48YnV0dG9uXHJcbiAgYmluZDp0aGlzPXtwbGF5QnV0dG9ufVxyXG4gIGNsYXNzPVwiYnV0dG9uIHBsYXktYnV0dG9uXCJcclxuICBzdHlsZT1cImN1cnNvcjogcG9pbnRlclwiXHJcbj5cclxuICA8c3ZnIHdpZHRoPVwiMTBcIiBoZWlnaHQ9XCIxMFwiIHZpZXdCb3g9XCIwIDAgMTAgMTBcIj5cclxuICAgIDxwYXRoIGQ9e3BhdXNlUGF0aH0gZmlsbD1cIiM4ODhcIiAvPlxyXG4gIDwvc3ZnPlxyXG48L2J1dHRvbj5cclxuPGJ1dHRvblxyXG4gIGJpbmQ6dGhpcz17c3RlcEZvcndhcmRCdXR0b259XHJcbiAgY2xhc3M9XCJidXR0b24gc3RlcC1mb3J3YXJkLWJ1dHRvblwiXHJcbiAgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXJcIlxyXG4+XHJcbiAgPHN2ZyB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiMTBcIiB2aWV3Qm94PVwiMCAwIDEwIDEwXCI+XHJcbiAgICA8cGF0aCBkPXtzdGVwRm9yd2FyZFBhdGh9IGZpbGw9XCIjODg4XCIgLz5cclxuICA8L3N2Zz5cclxuPC9idXR0b24+XHJcbjxidXR0b25cclxuICBiaW5kOnRoaXM9e3N0ZXBCYWNrQnV0dG9ufVxyXG4gIGNsYXNzPVwiYnV0dG9uIHN0ZXAtYmFjay1idXR0b25cIlxyXG4gIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyXCJcclxuPlxyXG4gIDxzdmcgd2lkdGg9XCIxMFwiIGhlaWdodD1cIjEwXCIgdmlld0JveD1cIjAgMCAxMCAxMFwiPlxyXG4gICAgPHBhdGggZD17c3RlcEJhY2tQYXRofSBmaWxsPVwiIzg4OFwiIC8+XHJcbiAgPC9zdmc+XHJcbjwvYnV0dG9uPlxyXG48aW5wdXRcclxuICBiaW5kOnRoaXM9e3NsaWRlcn1cclxuICB0eXBlPVwicmFuZ2VcIlxyXG4gIGNsYXNzPVwic2xpZGVyIGF0dGFjay1zbGlkZXJcIlxyXG4gIG1pbj1cIjBcIlxyXG4gIG1heD1cIjFcIlxyXG4gIHZhbHVlPVwiMFwiXHJcbi8+XHJcbiIsImZ1bmN0aW9uIHJhbmRJbnQobWF4KSB7XHJcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIG1heCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRvdCh4LCB5KSB7XHJcbiAgcmV0dXJuIHhbMF0gKiB5WzBdICsgeFsxXSAqIHlbMV07XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTVk0ge1xyXG4gICNhbHBoYSA9IFtdO1xyXG4gICNrZXJuZWwgPSBkb3Q7XHJcbiAgI21heEl0ZXJzID0gMjAwO1xyXG4gICN0b2wgPSAwLjAwMDE7XHJcbiAgI0MgPSAxMDAwMDA7XHJcbiAgI3RoZXRhID0gbmV3IEFycmF5KDIpLmZpbGwoMCk7XHJcbiAgI2IgPSAwO1xyXG4gICNuQ2FsbHMgPSAwO1xyXG5cclxuICBjb25zdHJ1Y3RvcihDLCBtYXhJdGVycywgdG9sKSB7XHJcbiAgICBpZiAoQyAhPT0gdW5kZWZpbmVkKSB0aGlzLiNDID0gQztcclxuICAgIGlmIChtYXhJdGVycyAhPT0gdW5kZWZpbmVkKSB0aGlzLiNtYXhJdGVycyA9IG1heEl0ZXJzO1xyXG4gICAgaWYgKHRvbCAhPT0gdW5kZWZpbmVkKSB0aGlzLiN0b2wgPSB0b2w7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmaXQoWCwgeSwgb25VcGRhdGUsIHJlc2V0ID0gdHJ1ZSkge1xyXG4gICAgbGV0IGlkID0gKyt0aGlzLiNuQ2FsbHM7XHJcbiAgICBpZiAocmVzZXQpIHtcclxuICAgICAgdGhpcy4jYWxwaGEgPSBBcnJheShOKS5maWxsKDApO1xyXG4gICAgICB0aGlzLiN0aGV0YSA9IEFycmF5KDIpLmZpbGwoMCk7XHJcbiAgICAgIHRoaXMuI2IgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBOID0gWC5sZW5ndGg7XHJcbiAgICB3aGlsZSAodGhpcy4jYWxwaGEubGVuZ3RoIDwgTikgdGhpcy4jYWxwaGEucHVzaCgwKTtcclxuXHJcbiAgICBsZXQgaXRlciA9IDA7XHJcbiAgICB3aGlsZSAoaXRlciA8IHRoaXMuI21heEl0ZXJzICYmIGlkID09PSB0aGlzLiNuQ2FsbHMpIHtcclxuICAgICAgbGV0IG5DaGFuZ2VkQWxwaGFzID0gMDtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBOOyArK2kpIHtcclxuICAgICAgICBsZXQgRV9pID0gdGhpcy4jYiAtIHlbaV07XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBOOyArK2opIHtcclxuICAgICAgICAgIEVfaSArPSB0aGlzLiNhbHBoYVtqXSAqIHlbal0gKiB0aGlzLiNrZXJuZWwoWFtpXSwgWFtqXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAhKHlbaV0gKiBFX2kgPCAtdGhpcy4jdG9sICYmIHRoaXMuI2FscGhhW2ldIDwgdGhpcy4jQykgJiZcclxuICAgICAgICAgICEoeVtpXSAqIEVfaSA+IHRoaXMuI3RvbCAmJiB0aGlzLiNhbHBoYVtpXSA+IDApXHJcbiAgICAgICAgKVxyXG4gICAgICAgICAgY29udGludWU7XHJcblxyXG4gICAgICAgIGxldCBqID0gaTtcclxuICAgICAgICB3aGlsZSAoaiA9PT0gaSkgaiA9IHJhbmRJbnQoTik7XHJcblxyXG4gICAgICAgIGxldCBFX2ogPSB0aGlzLiNiIC0geVtqXTtcclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IE47ICsraykge1xyXG4gICAgICAgICAgRV9qICs9IHRoaXMuI2FscGhhW2tdICogeVtrXSAqIHRoaXMuI2tlcm5lbChYW2pdLCBYW2tdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBhbHBoYV9pID0gdGhpcy4jYWxwaGFbaV07XHJcbiAgICAgICAgbGV0IGFscGhhX2ogPSB0aGlzLiNhbHBoYVtqXTtcclxuXHJcbiAgICAgICAgbGV0IEwsIEg7XHJcbiAgICAgICAgaWYgKHlbaV0gPT09IHlbal0pIHtcclxuICAgICAgICAgIEwgPSBNYXRoLm1heCgwLCBhbHBoYV9pICsgYWxwaGFfaiAtIHRoaXMuI0MpO1xyXG4gICAgICAgICAgSCA9IE1hdGgubWluKHRoaXMuI0MsIGFscGhhX2kgKyBhbHBoYV9qKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgTCA9IE1hdGgubWF4KDAsIGFscGhhX2ogLSBhbHBoYV9pKTtcclxuICAgICAgICAgIEggPSBNYXRoLm1pbih0aGlzLiNDLCB0aGlzLiNDICsgYWxwaGFfaiAtIGFscGhhX2kpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKE1hdGguYWJzKEwgLSBIKSA8IDFlLTUpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICBsZXQgZXRhID1cclxuICAgICAgICAgIDIgKiB0aGlzLiNrZXJuZWwoWFtpXSwgWFtqXSkgLVxyXG4gICAgICAgICAgdGhpcy4ja2VybmVsKFhbaV0sIFhbaV0pIC1cclxuICAgICAgICAgIHRoaXMuI2tlcm5lbChYW2pdLCBYW2pdKTtcclxuXHJcbiAgICAgICAgaWYgKGV0YSA+PSAwKSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgdGhpcy4jYWxwaGFbal0gPSBhbHBoYV9qIC0gKHlbal0gKiAoRV9pIC0gRV9qKSkgLyBldGE7XHJcbiAgICAgICAgdGhpcy4jYWxwaGFbal0gPSBNYXRoLm1pbihNYXRoLm1heCh0aGlzLiNhbHBoYVtqXSwgTCksIEgpO1xyXG4gICAgICAgIHRoaXMuI2FscGhhW2ldID0gYWxwaGFfaSArIHlbaV0gKiB5W2pdICogKGFscGhhX2ogLSB0aGlzLiNhbHBoYVtqXSk7XHJcblxyXG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLiNhbHBoYVtqXSAtIGFscGhhX2opIDwgMWUtNSkgY29udGludWU7XHJcblxyXG4gICAgICAgIGxldCBiXzEgPVxyXG4gICAgICAgICAgdGhpcy4jYiAtXHJcbiAgICAgICAgICBFX2kgLVxyXG4gICAgICAgICAgeVtpXSAqICh0aGlzLiNhbHBoYVtpXSAtIGFscGhhX2kpICogdGhpcy4ja2VybmVsKFhbaV0sIFhbaV0pIC1cclxuICAgICAgICAgIHlbal0gKiAodGhpcy4jYWxwaGFbal0gLSBhbHBoYV9qKSAqIHRoaXMuI2tlcm5lbChYW2ldLCBYW2pdKTtcclxuICAgICAgICBsZXQgYl8yID1cclxuICAgICAgICAgIHRoaXMuI2IgLVxyXG4gICAgICAgICAgRV9qIC1cclxuICAgICAgICAgIHlbaV0gKiAodGhpcy4jYWxwaGFbaV0gLSBhbHBoYV9pKSAqIHRoaXMuI2tlcm5lbChYW2ldLCBYW2pdKSAtXHJcbiAgICAgICAgICB5W2pdICogKHRoaXMuI2FscGhhW2pdIC0gYWxwaGFfaikgKiB0aGlzLiNrZXJuZWwoWFtqXSwgWFtqXSk7XHJcblxyXG4gICAgICAgIGlmICgwIDwgdGhpcy4jYWxwaGFbaV0gJiYgdGhpcy4jYWxwaGFbaV0gPCB0aGlzLiNDKSB0aGlzLiNiID0gYl8xO1xyXG4gICAgICAgIGVsc2UgaWYgKDAgPCB0aGlzLiNhbHBoYVtqXSAmJiB0aGlzLiNhbHBoYVtqXSA8IHRoaXMuI0MpIHRoaXMuI2IgPSBiXzI7XHJcbiAgICAgICAgZWxzZSB0aGlzLiNiID0gMC41ICogKGJfMSArIGJfMik7XHJcblxyXG4gICAgICAgIG5DaGFuZ2VkQWxwaGFzICs9IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChuQ2hhbmdlZEFscGhhcyA9PT0gMCkgaXRlciArPSAxO1xyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpdGVyID0gMDtcclxuICAgICAgICB0aGlzLiN0aGV0YSA9IG5ldyBBcnJheSgyKS5maWxsKDApO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XHJcbiAgICAgICAgICB0aGlzLiN0aGV0YVswXSArPSB0aGlzLiNhbHBoYVtpXSAqIHlbaV0gKiBYW2ldWzBdO1xyXG4gICAgICAgICAgdGhpcy4jdGhldGFbMV0gKz0gdGhpcy4jYWxwaGFbaV0gKiB5W2ldICogWFtpXVsxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb25VcGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBmaXRHRChYLCB5LCBvblVwZGF0ZSkge1xyXG4gICAgbGV0IGlkID0gKyt0aGlzLiNuQ2FsbHM7XHJcbiAgICBsZXQgTiA9IFgubGVuZ3RoO1xyXG4gICAgbGV0IGV0YSA9IDAuMjU7XHJcbiAgICBsZXQgZ3JhZCA9IG5ldyBBcnJheSgzKS5maWxsKDApO1xyXG4gICAgbGV0IG9sZEdyYWQgPSBuZXcgQXJyYXkoMykuZmlsbCgwKTtcclxuXHJcbiAgICBkbyB7XHJcbiAgICAgIG9sZEdyYWQgPSBbLi4uZ3JhZF07XHJcbiAgICAgIGdyYWQuZmlsbCgwKTtcclxuXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTjsgKytpKSB7XHJcbiAgICAgICAgaWYgKHlbaV0gKiAoZG90KHRoaXMuI3RoZXRhLCBYW2ldKSArIHRoaXMuI2IpIDwgMSkge1xyXG4gICAgICAgICAgZ3JhZFswXSAtPSB5W2ldICogWFtpXVswXTtcclxuICAgICAgICAgIGdyYWRbMV0gLT0geVtpXSAqIFhbaV1bMV07XHJcbiAgICAgICAgICBncmFkWzJdIC09IHlbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGdyYWRbMF0gLz0gTjtcclxuICAgICAgZ3JhZFsxXSAvPSBOO1xyXG4gICAgICBncmFkWzJdIC89IE47XHJcblxyXG4gICAgICBncmFkWzBdICs9IHRoaXMuI3RoZXRhWzBdIC8gdGhpcy4jQztcclxuICAgICAgZ3JhZFsxXSArPSB0aGlzLiN0aGV0YVsxXSAvIHRoaXMuI0M7XHJcblxyXG4gICAgICAvLyBncmFkWzBdID0gMC4zICogZ3JhZFswXSArIDAuNzUgKiBvbGRHcmFkWzBdO1xyXG4gICAgICAvLyBncmFkWzFdID0gMC4zICogZ3JhZFsxXSArIDAuNzUgKiBvbGRHcmFkWzFdO1xyXG4gICAgICAvLyBncmFkWzJdID0gMC4zICogZ3JhZFsyXSArIDAuNzUgKiBvbGRHcmFkWzJdO1xyXG5cclxuICAgICAgdGhpcy4jdGhldGFbMF0gLT0gZXRhICogZ3JhZFswXTtcclxuICAgICAgdGhpcy4jdGhldGFbMV0gLT0gZXRhICogZ3JhZFsxXTtcclxuICAgICAgdGhpcy4jYiAtPSBldGEgKiBncmFkWzJdO1xyXG5cclxuICAgICAgb25VcGRhdGUoKTtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMSkpO1xyXG4gICAgfSB3aGlsZSAoTWF0aC5hYnMoZG90KGdyYWQsIGdyYWQpKSA+IDFlLTYgJiYgaWQgPT0gdGhpcy4jbkNhbGxzKTtcclxuICB9XHJcblxyXG4gIGdldCBwYXJhbWV0ZXJzKCkge1xyXG4gICAgcmV0dXJuIFsuLi50aGlzLiN0aGV0YSwgdGhpcy4jYl07XHJcbiAgfVxyXG59XHJcbiIsIjxzY3JpcHQ+XHJcbiAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcclxuICBpbXBvcnQgeyBtYWtlX2NsYXNzaWZpY2F0aW9uLCBnZXRNb2RlbFNoYXBlIH0gZnJvbSBcIi4uL3V0aWwuanNcIjtcclxuICBpbXBvcnQgeyBTVk0gfSBmcm9tIFwiLi4vc3ZtLmpzXCI7XHJcblxyXG4gIGV4cG9ydCBsZXQgZklEO1xyXG4gIGV4cG9ydCBsZXQgY29udHJvbHM7XHJcblxyXG4gIGxldCBjYW52YXM7XHJcbiAgbGV0IHN2ZztcclxuICBsZXQgcmVzZXRCdXR0b247XHJcbiAgbGV0IGFscGhhU2xpZGVyO1xyXG4gIGxldCBiZXRhU2xpZGVyO1xyXG4gIGxldCBzZWVkU2xpZGVyO1xyXG4gIGxldCBhbHBoYVRleHQ7XHJcbiAgbGV0IGJldGFUZXh0O1xyXG4gIGxldCBzZWVkVGV4dDtcclxuXHJcbiAgbGV0IGZsaXBfeSA9IDAuMDtcclxuICBsZXQgY2xhc3Nfc2VwID0gMS4wO1xyXG4gIGxldCBzZWVkID0gMTtcclxuICBjb25zdCBuX3NhbXBsZXMgPSAxMjg7XHJcblxyXG4gIGxldCBkc2V0ID0gbWFrZV9jbGFzc2lmaWNhdGlvbihuX3NhbXBsZXMsIGZsaXBfeSwgY2xhc3Nfc2VwLCBzZWVkKTtcclxuICBsZXQgc3ZtQ2xlYW4gPSBuZXcgU1ZNKCk7XHJcbiAgbGV0IHN2bSA9IG5ldyBTVk0oKTtcclxuICBsZXQgc3BfaW5kZXggPSAwO1xyXG4gIGxldCBob3Zlcl9pbmRleCA9IC0xO1xyXG4gIGxldCBhY3Rpb24gPSBcImFkZFwiO1xyXG4gIGxldCBwb2lzb25MYWJlbCA9IDE7XHJcblxyXG4gIGxldCBwb2lzb25zID0gW107XHJcbiAgbGV0IHByZXZpZXdQb2lzb24gPSBbXTtcclxuXHJcbiAgY29uc3Qgd2lkdGggPSA5ODQ7XHJcbiAgY29uc3QgaGVpZ2h0ID0gNDUwO1xyXG5cclxuICBjb25zdCByZXNldFBhdGggPSBcIk0gMCAwXCI7XHJcblxyXG4gIGNvbnN0IHJlbmRlciA9ICgpID0+IHtcclxuICAgIGNvbnN0IHhWYWx1ZSA9IChwKSA9PiBwLnhbMF07XHJcbiAgICBjb25zdCB5VmFsdWUgPSAocCkgPT4gcC54WzFdO1xyXG4gICAgY29uc3QgZ2V0Q2xhc3MgPSAocCkgPT4ge1xyXG4gICAgICBpZiAocC5zdWJwb3BzID09IHVuZGVmaW5lZClcclxuICAgICAgICByZXR1cm4gcC55ID09IDEgPyBcImJsdWUtcG9pc29uXCIgOiBcInJlZC1wb2lzb25cIjtcclxuICAgICAgaWYgKHAuc3VicG9wcy5pbmNsdWRlcyhzcF9pbmRleCkpIHJldHVybiBcInRhcmdldC1wb2ludFwiO1xyXG4gICAgICBlbHNlIGlmIChwLnN1YnBvcHMuaW5jbHVkZXMoaG92ZXJfaW5kZXgpKSByZXR1cm4gXCJzZWxlY3RlZC1wb2ludFwiO1xyXG4gICAgICBlbHNlIGlmIChwLnkgPT0gMSkgcmV0dXJuIFwiYmx1ZS1wb2ludFwiO1xyXG4gICAgICBlbHNlIHJldHVybiBcInJlZC1wb2ludFwiO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBtYXJnaW4gPSB7IHRvcDogNSwgcmlnaHQ6IDQwLCBib3R0b206IDE1MCwgbGVmdDogNDAgfTtcclxuICAgIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xyXG4gICAgY29uc3QgaW5uZXJIZWlnaHQgPSBoZWlnaHQgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcclxuXHJcbiAgICBsZXQgZXh0ZW50WCA9IFswLjAsIDEuMF07XHJcbiAgICBsZXQgZXh0ZW50WFBhZCA9IFtleHRlbnRYWzBdIC0gMC4xLCBleHRlbnRYWzFdICsgMC4xXTtcclxuICAgIGNvbnN0IHhTY2FsZSA9IGQzXHJcbiAgICAgIC5zY2FsZUxpbmVhcigpXHJcbiAgICAgIC5kb21haW4oZXh0ZW50WFBhZClcclxuICAgICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSlcclxuICAgICAgLm5pY2UoKTtcclxuXHJcbiAgICBsZXQgZXh0ZW50WSA9IFstMC4wLCAxLjBdO1xyXG4gICAgbGV0IGV4dGVudFlQYWQgPSBbZXh0ZW50WVswXSAtIDAuMSwgZXh0ZW50WVsxXSArIDAuMV07XHJcbiAgICBjb25zdCB5U2NhbGUgPSBkM1xyXG4gICAgICAuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAuZG9tYWluKGV4dGVudFlQYWQpXHJcbiAgICAgIC5yYW5nZShbaW5uZXJIZWlnaHQsIDBdKVxyXG4gICAgICAubmljZSgpO1xyXG5cclxuICAgIGNvbnN0IHNoYWRpbmdHID0gZDNcclxuICAgICAgLnNlbGVjdChzdmcpXHJcbiAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJub25lXCIpXHJcbiAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgKTtcclxuXHJcbiAgICBjb25zdCBkc2V0RyA9IGQzXHJcbiAgICAgIC5zZWxlY3Qoc3ZnKVxyXG4gICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKVxyXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG4gICAgY29uc3QgcG9pc29uRyA9IGQzXHJcbiAgICAgIC5zZWxlY3Qoc3ZnKVxyXG4gICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKVxyXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG4gICAgY29uc3QgcHJldmlld1BvaXNvbkcgPSBkM1xyXG4gICAgICAuc2VsZWN0KHN2ZylcclxuICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIilcclxuICAgICAgLmFwcGVuZChcImdcIilcclxuICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwke21hcmdpbi50b3B9KWApO1xyXG5cclxuICAgIGNvbnN0IG1vZGVsRyA9IGQzXHJcbiAgICAgIC5zZWxlY3Qoc3ZnKVxyXG4gICAgICAuYXR0cihcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKVxyXG4gICAgICAuYXBwZW5kKFwiZ1wiKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XHJcblxyXG4gICAgY29uc3QgeEF4aXMgPSBkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja1NpemUoLWlubmVySGVpZ2h0KS50aWNrUGFkZGluZygxNSk7XHJcbiAgICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHlTY2FsZSkudGlja1NpemUoLWlubmVyV2lkdGgpLnRpY2tQYWRkaW5nKDEwKTtcclxuXHJcbiAgICBjb25zdCB5QXhpc0cgPSBkc2V0Ry5hcHBlbmQoXCJnXCIpLmNhbGwoeUF4aXMpO1xyXG5cclxuICAgIGNvbnN0IHhBeGlzRyA9IGRzZXRHXHJcbiAgICAgIC5hcHBlbmQoXCJnXCIpXHJcbiAgICAgIC5jYWxsKHhBeGlzKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XHJcblxyXG4gICAgbGV0IGxpbmUgPSBkM1xyXG4gICAgICAubGluZSgpXHJcbiAgICAgIC54KChkKSA9PiB4U2NhbGUoZFswXSkpXHJcbiAgICAgIC55KChkKSA9PiB5U2NhbGUoZFsxXSkpO1xyXG5cclxuICAgIG1vZGVsR1xyXG4gICAgICAuYXBwZW5kKFwiY2xpcFBhdGhcIilcclxuICAgICAgLmF0dHIoXCJpZFwiLCBgcmVjdC1jbGlwJHtmSUR9YClcclxuICAgICAgLmFwcGVuZChcInJlY3RcIilcclxuICAgICAgLmF0dHIoXCJ4XCIsIDApXHJcbiAgICAgIC5hdHRyKFwieVwiLCAwKVxyXG4gICAgICAuYXR0cihcIndpZHRoXCIsIGlubmVyV2lkdGgpXHJcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGlubmVySGVpZ2h0KTtcclxuXHJcbiAgICBjb25zdCBtb2RlbF9jID0gbW9kZWxHXHJcbiAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXHJcbiAgICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImRhcmtncmF5XCIpXHJcbiAgICAgIC5zdHlsZShcInN0cm9rZS13aWR0aFwiLCA1KVxyXG4gICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBgdXJsKCNyZWN0LWNsaXAke2ZJRH0pYCk7XHJcblxyXG4gICAgY29uc3QgbW9kZWxfdCA9IG1vZGVsR1xyXG4gICAgICAuYXBwZW5kKFwibGluZVwiKVxyXG4gICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJibGFja1wiKVxyXG4gICAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgNSlcclxuICAgICAgLmF0dHIoXCJjbGlwLXBhdGhcIiwgYHVybCgjcmVjdC1jbGlwJHtmSUR9KWApO1xyXG5cclxuICAgIGNvbnN0IGJlbG93QXJlYSA9IHNoYWRpbmdHXHJcbiAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXHJcbiAgICAgIC5hdHRyKFwiY2xpcC1wYXRoXCIsIGB1cmwoI3JlY3QtY2xpcCR7ZklEfSlgKTtcclxuXHJcbiAgICBjb25zdCBhYm92ZUFyZWEgPSBzaGFkaW5nR1xyXG4gICAgICAuYXBwZW5kKFwicGF0aFwiKVxyXG4gICAgICAuYXR0cihcImNsaXAtcGF0aFwiLCBgdXJsKCNyZWN0LWNsaXAke2ZJRH0pYCk7XHJcblxyXG4gICAgbGV0IGRzZXRTY2F0dGVyID0gZHNldEdcclxuICAgICAgLnNlbGVjdEFsbChcImNpcmNsZVwiKVxyXG4gICAgICAuZGF0YShkc2V0KVxyXG4gICAgICAuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kKFwiY2lyY2xlXCIpXHJcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZ2V0Q2xhc3MpXHJcbiAgICAgIC5hdHRyKFwiY3hcIiwgKGQpID0+IHhTY2FsZSh4VmFsdWUoZCkpKVxyXG4gICAgICAuYXR0cihcImN5XCIsIChkKSA9PiB5U2NhbGUoeVZhbHVlKGQpKSk7XHJcblxyXG4gICAgbGV0IHBvaXNvblNjYXR0ZXIgPSBwb2lzb25HLnNlbGVjdEFsbChcInBhdGhcIik7XHJcbiAgICBsZXQgcHJldmlld1BvaXNvblNjYXR0ZXIgPSBwcmV2aWV3UG9pc29uRy5zZWxlY3RBbGwoXCJwYXRoXCIpO1xyXG5cclxuICAgIGFscGhhU2xpZGVyID0gZDMuc2VsZWN0KGNvbnRyb2xzKS5zZWxlY3QoXCIjYWxwaGFTbGlkZXJcIik7XHJcbiAgICBiZXRhU2xpZGVyID0gZDMuc2VsZWN0KGNvbnRyb2xzKS5zZWxlY3QoXCIjYmV0YVNsaWRlclwiKTtcclxuICAgIHNlZWRTbGlkZXIgPSBkMy5zZWxlY3QoY29udHJvbHMpLnNlbGVjdChcIiNzZWVkU2xpZGVyXCIpO1xyXG5cclxuICAgIGFscGhhVGV4dCA9IGQzLnNlbGVjdChjb250cm9scykuc2VsZWN0QWxsKFwic3ZnXCIpLnNlbGVjdChcIiNhbHBoYVRleHRcIik7XHJcbiAgICBiZXRhVGV4dCA9IGQzLnNlbGVjdChjb250cm9scykuc2VsZWN0QWxsKFwic3ZnXCIpLnNlbGVjdChcIiNiZXRhVGV4dFwiKTtcclxuICAgIHNlZWRUZXh0ID0gZDMuc2VsZWN0KGNvbnRyb2xzKS5zZWxlY3RBbGwoXCJzdmdcIikuc2VsZWN0KFwiI3NlZWRUZXh0XCIpO1xyXG5cclxuICAgIC8vLS0tIGZpZ3VyZSBpbnRlcmFjdGlvbiBjb250cm9sIC0tLS8vXHJcbiAgICBjb25zdCB1cGRhdGVDbGFzc2VzID0gKCkgPT4ge1xyXG4gICAgICBwb2lzb25TY2F0dGVyLmF0dHIoXCJjbGFzc1wiLCBnZXRDbGFzcyk7XHJcbiAgICAgIGRzZXRTY2F0dGVyLmF0dHIoXCJjbGFzc1wiLCBnZXRDbGFzcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc2V0UG9pc29ucyA9ICgpID0+IHtcclxuICAgICAgcG9pc29ucyA9IFtdO1xyXG4gICAgICBwb2lzb25TY2F0dGVyID0gcG9pc29uRy5zZWxlY3RBbGwoXCJwYXRoXCIpLmRhdGEocG9pc29ucykuZXhpdCgpLnJlbW92ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB1cGRhdGVNb2RlbHMgPSAoKSA9PiB7XHJcbiAgICAgIGxldCBtb2RlbFNoYXBlO1xyXG4gICAgICBsZXQgdGhldGFfYyA9IHN2bUNsZWFuLnBhcmFtZXRlcnM7XHJcbiAgICAgIGxldCB0aGV0YV90ID0gc3ZtLnBhcmFtZXRlcnM7XHJcblxyXG4gICAgICBtb2RlbFNoYXBlID0gZ2V0TW9kZWxTaGFwZSh0aGV0YV9jLCBleHRlbnRYUGFkLCBleHRlbnRZUGFkKTtcclxuICAgICAgbW9kZWxfY1xyXG4gICAgICAgIC5hdHRyKFwieDFcIiwgeFNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMF1bMF0pKVxyXG4gICAgICAgIC5hdHRyKFwieDJcIiwgeFNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMV1bMF0pKVxyXG4gICAgICAgIC5hdHRyKFwieTFcIiwgeVNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMF1bMV0pKVxyXG4gICAgICAgIC5hdHRyKFwieTJcIiwgeVNjYWxlKG1vZGVsU2hhcGUuYm91bmRhcnlbMV1bMV0pKTtcclxuXHJcbiAgICAgIG1vZGVsU2hhcGUgPSBnZXRNb2RlbFNoYXBlKHRoZXRhX3QsIGV4dGVudFhQYWQsIGV4dGVudFlQYWQpO1xyXG4gICAgICBtb2RlbF90XHJcbiAgICAgICAgLmF0dHIoXCJ4MVwiLCB4U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVswXVswXSkpXHJcbiAgICAgICAgLmF0dHIoXCJ4MlwiLCB4U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVsxXVswXSkpXHJcbiAgICAgICAgLmF0dHIoXCJ5MVwiLCB5U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVswXVsxXSkpXHJcbiAgICAgICAgLmF0dHIoXCJ5MlwiLCB5U2NhbGUobW9kZWxTaGFwZS5ib3VuZGFyeVsxXVsxXSkpO1xyXG4gICAgICBiZWxvd0FyZWFcclxuICAgICAgICAuYXR0cihcImRcIiwgbGluZShtb2RlbFNoYXBlLmJlbG93KSlcclxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIHRoZXRhX3RbMV0gPCAwID8gXCJhcmVhLWJsdWVcIiA6IFwiYXJlYS1yZWRcIik7XHJcbiAgICAgIGFib3ZlQXJlYVxyXG4gICAgICAgIC5hdHRyKFwiZFwiLCBsaW5lKG1vZGVsU2hhcGUuYWJvdmUpKVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgdGhldGFfdFsxXSA8IDAgPyBcImFyZWEtcmVkXCIgOiBcImFyZWEtYmx1ZVwiKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmV0cmFpbk1vZGVscyA9IChyZXRyYWluQ2xlYW4pID0+IHtcclxuICAgICAgbGV0IGRhdGEgPSBkc2V0LmNvbmNhdChwb2lzb25zKTtcclxuICAgICAgaWYgKHJldHJhaW5DbGVhbilcclxuICAgICAgICBzdm1DbGVhbi5maXRHRChcclxuICAgICAgICAgIGRzZXQubWFwKChkKSA9PiBkLngpLFxyXG4gICAgICAgICAgZHNldC5tYXAoKGQpID0+IGQueSksXHJcbiAgICAgICAgICB1cGRhdGVNb2RlbHNcclxuICAgICAgICApO1xyXG4gICAgICBzdm0uZml0R0QoXHJcbiAgICAgICAgZGF0YS5tYXAoKGQpID0+IGQueCksXHJcbiAgICAgICAgZGF0YS5tYXAoKGQpID0+IGQueSksXHJcbiAgICAgICAgdXBkYXRlTW9kZWxzXHJcbiAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG1vdXNlbW92ZUhhbmRsZXIgPSAoZXZlbnQpID0+IHtcclxuICAgICAgbGV0IFt4LCB5XSA9IGQzLnBvaW50ZXIoZXZlbnQpO1xyXG4gICAgICAoeCAtPSBtYXJnaW4ubGVmdCksICh5IC09IG1hcmdpbi50b3ApO1xyXG4gICAgICBbeCwgeV0gPSBbeFNjYWxlLmludmVydCh4KSwgeVNjYWxlLmludmVydCh5KV07XHJcbiAgICAgIGxldCBwb2lzb24gPSBbeCwgeV07XHJcblxyXG4gICAgICBzd2l0Y2ggKGFjdGlvbikge1xyXG4gICAgICAgIGNhc2UgXCJhZGRcIjpcclxuICAgICAgICAgIHByZXZpZXdQb2lzb24gPVxyXG4gICAgICAgICAgICB4ID49IGV4dGVudFhbMF0gJiZcclxuICAgICAgICAgICAgeCA8PSBleHRlbnRYWzFdICYmXHJcbiAgICAgICAgICAgIHkgPj0gZXh0ZW50WVswXSAmJlxyXG4gICAgICAgICAgICB5IDw9IGV4dGVudFlbMV1cclxuICAgICAgICAgICAgICA/IFtcclxuICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IHBvaXNvbixcclxuICAgICAgICAgICAgICAgICAgICB5OiBwb2lzb25MYWJlbCxcclxuICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICA6IFtdO1xyXG4gICAgICAgICAgcHJldmlld1BvaXNvblNjYXR0ZXIgPSBwcmV2aWV3UG9pc29uR1xyXG4gICAgICAgICAgICAuc2VsZWN0QWxsKFwicGF0aFwiKVxyXG4gICAgICAgICAgICAuZGF0YShwcmV2aWV3UG9pc29uKTtcclxuXHJcbiAgICAgICAgICBwcmV2aWV3UG9pc29uU2NhdHRlci5leGl0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgcHJldmlld1BvaXNvblNjYXR0ZXJcclxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLnN5bWJvbCgpLnR5cGUoZDMuc3ltYm9sQ3Jvc3MpLnNpemUoMjAwKSlcclxuICAgICAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgICAoZCkgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZSh4VmFsdWUoZCkpfSwke3lTY2FsZSh5VmFsdWUoZCkpfSlgXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBnZXRDbGFzcylcclxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGQzLnN5bWJvbCgpLnR5cGUoZDMuc3ltYm9sQ3Jvc3MpLnNpemUoMjAwKSlcclxuICAgICAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgICAgXCJ0cmFuc2Zvcm1cIixcclxuICAgICAgICAgICAgICAoZCkgPT4gYHRyYW5zbGF0ZSgke3hTY2FsZSh4VmFsdWUoZCkpfSwke3lTY2FsZSh5VmFsdWUoZCkpfSlgXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICB1cGRhdGVDbGFzc2VzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9IChldmVudCkgPT4ge1xyXG4gICAgICBsZXQgW3gsIHldID0gZDMucG9pbnRlcihldmVudCk7XHJcbiAgICAgICh4IC09IG1hcmdpbi5sZWZ0KSwgKHkgLT0gbWFyZ2luLnRvcCk7XHJcbiAgICAgIFt4LCB5XSA9IFt4U2NhbGUuaW52ZXJ0KHgpLCB5U2NhbGUuaW52ZXJ0KHkpXTtcclxuICAgICAgbGV0IHBvaXNvbiA9IFt4LCB5XTtcclxuXHJcbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XHJcbiAgICAgICAgY2FzZSBcImFkZFwiOlxyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB4ID49IGV4dGVudFhbMF0gJiZcclxuICAgICAgICAgICAgeCA8PSBleHRlbnRYWzFdICYmXHJcbiAgICAgICAgICAgIHkgPj0gZXh0ZW50WVswXSAmJlxyXG4gICAgICAgICAgICB5IDw9IGV4dGVudFlbMV1cclxuICAgICAgICAgICkge1xyXG4gICAgICAgICAgICBwb2lzb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgIHg6IHBvaXNvbixcclxuICAgICAgICAgICAgICB5OiBwb2lzb25MYWJlbCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHBvaXNvblNjYXR0ZXIgPSBwb2lzb25HLnNlbGVjdEFsbChcInBhdGhcIikuZGF0YShwb2lzb25zKTtcclxuICAgICAgICAgICAgcG9pc29uU2NhdHRlclxyXG4gICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcclxuICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGdldENsYXNzKVxyXG4gICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBkMy5zeW1ib2woKS50eXBlKGQzLnN5bWJvbENyb3NzKS5zaXplKDIwMCkpXHJcbiAgICAgICAgICAgICAgLmF0dHIoXHJcbiAgICAgICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxyXG4gICAgICAgICAgICAgICAgKGQpID0+IGB0cmFuc2xhdGUoJHt4U2NhbGUoeFZhbHVlKGQpKX0sJHt5U2NhbGUoeVZhbHVlKGQpKX0pYFxyXG4gICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICByZXRyYWluTW9kZWxzKGZhbHNlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IG1vdXNlb3V0SGFuZGxlciA9IChldmVudCkgPT4ge1xyXG4gICAgICBob3Zlcl9pbmRleCA9IC0xO1xyXG4gICAgICB1cGRhdGVDbGFzc2VzKCk7XHJcblxyXG4gICAgICBwcmV2aWV3UG9pc29uU2NhdHRlci5kYXRhKFtdKS5leGl0KCkucmVtb3ZlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlZ2VuZXJhdGVEYXRhc2V0ID0gKCkgPT4ge1xyXG4gICAgICBkc2V0ID0gbWFrZV9jbGFzc2lmaWNhdGlvbihuX3NhbXBsZXMsIGZsaXBfeSwgY2xhc3Nfc2VwLCBzZWVkKTtcclxuICAgICAgZHNldFNjYXR0ZXIgPSBkc2V0Ry5zZWxlY3RBbGwoXCJjaXJjbGVcIikuZGF0YShkc2V0KTtcclxuICAgICAgZHNldFNjYXR0ZXJcclxuICAgICAgICAuZGF0YShkc2V0KVxyXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZ2V0Q2xhc3MpXHJcbiAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgIC5kdXJhdGlvbigyNTApXHJcbiAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4geFNjYWxlKHhWYWx1ZShkKSkpXHJcbiAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4geVNjYWxlKHlWYWx1ZShkKSkpO1xyXG4gICAgICBkc2V0U2NhdHRlci5leGl0KCkucmVtb3ZlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHNsaWRlckhhbmRsZXIgPSAoc2xpZGVyKSA9PiB7XHJcbiAgICAgIHN3aXRjaCAoc2xpZGVyKSB7XHJcbiAgICAgICAgY2FzZSBcImFscGhhXCI6XHJcbiAgICAgICAgICBjbGFzc19zZXAgPSAwLjI1ICogK2FscGhhU2xpZGVyLm5vZGUoKS52YWx1ZTtcclxuICAgICAgICAgIGFscGhhVGV4dC50ZXh0KGBDbGFzcyBTZXBhcmF0aW9uIM6xID0gJHtjbGFzc19zZXAudG9GaXhlZCgyKX1gKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJiZXRhXCI6XHJcbiAgICAgICAgICBmbGlwX3kgPSAwLjEgKiArYmV0YVNsaWRlci5ub2RlKCkudmFsdWU7XHJcbiAgICAgICAgICBiZXRhVGV4dC50ZXh0KGBSYW5kb20gTGFiZWwgRnJhY3Rpb24gzrIgPSAke2ZsaXBfeS50b0ZpeGVkKDIpfWApO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcInNlZWRcIjpcclxuICAgICAgICAgIHNlZWQgPSArc2VlZFNsaWRlci5ub2RlKCkudmFsdWU7XHJcbiAgICAgICAgICBzZWVkVGV4dC50ZXh0KGBEYXRhc2V0IFNlZWQgcyA9ICR7c2VlZH1gKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHJlZ2VuZXJhdGVEYXRhc2V0KCk7XHJcbiAgICAgIHJlc2V0UG9pc29ucygpO1xyXG4gICAgICByZXRyYWluTW9kZWxzKHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICBkMy5zZWxlY3QoY2FudmFzKVxyXG4gICAgICAub24oXCJtb3VzZW1vdmVcIiwgbW91c2Vtb3ZlSGFuZGxlcilcclxuICAgICAgLm9uKFwiY2xpY2tcIiwgY2xpY2tIYW5kbGVyKVxyXG4gICAgICAub24oXCJtb3VzZW91dFwiLCBtb3VzZW91dEhhbmRsZXIpO1xyXG5cclxuICAgIGFscGhhU2xpZGVyLm9uKFwiaW5wdXRcIiwgKCkgPT4gc2xpZGVySGFuZGxlcihcImFscGhhXCIpKTtcclxuICAgIGJldGFTbGlkZXIub24oXCJpbnB1dFwiLCAoKSA9PiBzbGlkZXJIYW5kbGVyKFwiYmV0YVwiKSk7XHJcbiAgICBzZWVkU2xpZGVyLm9uKFwiY2hhbmdlXCIsICgpID0+IHNsaWRlckhhbmRsZXIoXCJzZWVkXCIpKTtcclxuXHJcbiAgICByZXRyYWluTW9kZWxzKHRydWUpO1xyXG4gIH07XHJcblxyXG4gIG9uTW91bnQoKCkgPT4ge1xyXG4gICAgcmVuZGVyKCk7XHJcbiAgfSk7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN2ZyBiaW5kOnRoaXM9e3N2Z30ge3dpZHRofSB7aGVpZ2h0fSBjbGFzcz1cIm92ZXJsYXlcIiAvPlxyXG48Y2FudmFzIGJpbmQ6dGhpcz17Y2FudmFzfSB7d2lkdGh9IHtoZWlnaHR9IC8+XHJcbiIsIi8vIEhvdCByZWxvYWRpbmdcclxuLy8gaW1wb3J0ICogYXMgX3VudXNlZCBmcm9tIFwicmF3LWxvYWRlciEuL2luZGV4LmVqc1wiO1xyXG4vLyBUT0RPOiBkaXNhYmxlIGJlZm9yZSBwdWJsaXNoaW5nXHJcblxyXG5pbXBvcnQgXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIjtcclxuaW1wb3J0IFwiY29yZS1qcy9zdGFibGVcIjtcclxuXHJcbmltcG9ydCBBdHRhY2tBbmltYXRpb24gZnJvbSBcIi4vZGlhZ3JhbXMvYXR0YWNrLWFuaW1hdGlvbi5zdmVsdGVcIjtcclxuaW1wb3J0IFBvaXNvbkRlbW8gZnJvbSBcIi4vZGlhZ3JhbXMvcG9pc29uaW5nLWRlbW8uc3ZlbHRlXCI7XHJcblxyXG5sZXQgZklEID0gMDtcclxuXHJcbntcclxuICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2ZWx0ZS1wb2lzb24tZGVtby1kZmlndXJlXCIpO1xyXG4gIGxldCBkZW1vO1xyXG4gIGZpZ3VyZS5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlcIiwgKCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gZmlndXJlLnF1ZXJ5U2VsZWN0b3IoXCIjc3ZlbHRlLWRlbW8tdGFyZ2V0XCIpO1xyXG4gICAgY29uc3QgY29udHJvbHMgPSBmaWd1cmUucXVlcnlTZWxlY3RvcihcIiNzdmVsdGUtZGVtby1jb250cm9sc1wiKTtcclxuICAgIGRlbW8gPSBuZXcgUG9pc29uRGVtbyh7XHJcbiAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICBwcm9wczoge1xyXG4gICAgICAgIGZJRDogZklEKyssXHJcbiAgICAgICAgY29udHJvbHM6IGNvbnRyb2xzLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbntcclxuICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2ZWx0ZS1zY2F0dGVycGxvdC1kZmlndXJlLWV4YW1wbGUxXCIpO1xyXG4gIGxldCBzY2F0dGVycGxvdDtcclxuICBmaWd1cmUuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5XCIsICgpID0+IHtcclxuICAgIGZldGNoKFwiaHR0cHM6Ly9lc2NvdHRyb3NlMDEuZ2l0aHViLmlvL3BvaXNvbmluZy1kYXRhLzEuMDAtMC4xLTUuanNvblwiKVxyXG4gICAgICAudGhlbigocmVzcCkgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgIC50aGVuKChkYXRhSnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZpZ3VyZS5xdWVyeVNlbGVjdG9yKFwiI3N2ZWx0ZS1zY2F0dGVycGxvdC10YXJnZXRcIik7XHJcbiAgICAgICAgc2NhdHRlcnBsb3QgPSBuZXcgQXR0YWNrQW5pbWF0aW9uKHtcclxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YUpzb24sXHJcbiAgICAgICAgICAgIGluaXRTcEluZGV4OiA2LFxyXG4gICAgICAgICAgICBmSUQ6IGZJRCsrLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbntcclxuICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2ZWx0ZS1zY2F0dGVycGxvdC1kZmlndXJlLWV4YW1wbGUyXCIpO1xyXG4gIGxldCBzY2F0dGVycGxvdDtcclxuICBmaWd1cmUuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5XCIsICgpID0+IHtcclxuICAgIGZldGNoKFwiaHR0cHM6Ly9lc2NvdHRyb3NlMDEuZ2l0aHViLmlvL3BvaXNvbmluZy1kYXRhLzIuMDAtMS4wLTQuanNvblwiKVxyXG4gICAgICAudGhlbigocmVzcCkgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgIC50aGVuKChkYXRhSnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZpZ3VyZS5xdWVyeVNlbGVjdG9yKFwiI3N2ZWx0ZS1zY2F0dGVycGxvdC10YXJnZXRcIik7XHJcbiAgICAgICAgc2NhdHRlcnBsb3QgPSBuZXcgQXR0YWNrQW5pbWF0aW9uKHtcclxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YUpzb24sXHJcbiAgICAgICAgICAgIGluaXRTcEluZGV4OiA2LFxyXG4gICAgICAgICAgICBmSUQ6IGZJRCsrLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbntcclxuICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2ZWx0ZS1zY2F0dGVycGxvdC1kZmlndXJlLWV4YW1wbGUzXCIpO1xyXG4gIGxldCBzY2F0dGVycGxvdDtcclxuICBmaWd1cmUuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5XCIsICgpID0+IHtcclxuICAgIGZldGNoKFwiaHR0cHM6Ly9lc2NvdHRyb3NlMDEuZ2l0aHViLmlvL3BvaXNvbmluZy1kYXRhLzAuMDAtMC4wLTQuanNvblwiKVxyXG4gICAgICAudGhlbigocmVzcCkgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgIC50aGVuKChkYXRhSnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZpZ3VyZS5xdWVyeVNlbGVjdG9yKFwiI3N2ZWx0ZS1zY2F0dGVycGxvdC10YXJnZXRcIik7XHJcbiAgICAgICAgc2NhdHRlcnBsb3QgPSBuZXcgQXR0YWNrQW5pbWF0aW9uKHtcclxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YUpzb24sXHJcbiAgICAgICAgICAgIGluaXRTcEluZGV4OiA4LFxyXG4gICAgICAgICAgICBmSUQ6IGZJRCsrLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbntcclxuICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2ZWx0ZS1zY2F0dGVycGxvdC1kZmlndXJlLWV4YW1wbGU0XCIpO1xyXG4gIGxldCBzY2F0dGVycGxvdDtcclxuICBmaWd1cmUuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5XCIsICgpID0+IHtcclxuICAgIGZldGNoKFwiaHR0cHM6Ly9lc2NvdHRyb3NlMDEuZ2l0aHViLmlvL3BvaXNvbmluZy1kYXRhLzIuMDAtMC4wLTQuanNvblwiKVxyXG4gICAgICAudGhlbigocmVzcCkgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgIC50aGVuKChkYXRhSnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZpZ3VyZS5xdWVyeVNlbGVjdG9yKFwiI3N2ZWx0ZS1zY2F0dGVycGxvdC10YXJnZXRcIik7XHJcbiAgICAgICAgc2NhdHRlcnBsb3QgPSBuZXcgQXR0YWNrQW5pbWF0aW9uKHtcclxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YUpzb24sXHJcbiAgICAgICAgICAgIGluaXRTcEluZGV4OiA0LFxyXG4gICAgICAgICAgICBmSUQ6IGZJRCsrLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbntcclxuICBjb25zdCBmaWd1cmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN2ZWx0ZS1zY2F0dGVycGxvdC1kZmlndXJlLWV4YW1wbGU1XCIpO1xyXG4gIGxldCBzY2F0dGVycGxvdDtcclxuICBmaWd1cmUuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5XCIsICgpID0+IHtcclxuICAgIGZldGNoKFwiaHR0cHM6Ly9lc2NvdHRyb3NlMDEuZ2l0aHViLmlvL3BvaXNvbmluZy1kYXRhLzIuMDAtMC4wLTQuanNvblwiKVxyXG4gICAgICAudGhlbigocmVzcCkgPT4gcmVzcC5qc29uKCkpXHJcbiAgICAgIC50aGVuKChkYXRhSnNvbikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZpZ3VyZS5xdWVyeVNlbGVjdG9yKFwiI3N2ZWx0ZS1zY2F0dGVycGxvdC10YXJnZXRcIik7XHJcbiAgICAgICAgc2NhdHRlcnBsb3QgPSBuZXcgQXR0YWNrQW5pbWF0aW9uKHtcclxuICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YTogZGF0YUpzb24sXHJcbiAgICAgICAgICAgIGluaXRTcEluZGV4OiAzLFxyXG4gICAgICAgICAgICBmSUQ6IGZJRCsrLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==