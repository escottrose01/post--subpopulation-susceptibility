!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";function r(){}n.r(e);function a(t){return t()}function o(){return Object.create(null)}function s(t){t.forEach(a)}function l(t){return"function"==typeof t}function i(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function c(t){return 0===Object.keys(t).length}new Set;let u=!1;function d(t,e){t.appendChild(e)}function p(t,e,n){t.insertBefore(e,n||null)}function f(t){t.parentNode.removeChild(t)}function h(t){return document.createElement(t)}function m(t){return document.createElementNS("http://www.w3.org/2000/svg",t)}function y(t){return document.createTextNode(t)}function g(){return y(" ")}function v(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function b(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function $(t,e,n,r){null===n?t.style.removeProperty(e):t.style.setProperty(e,n,r?"important":"")}new Map;let x;function w(t){x=t}function k(){if(!x)throw new Error("Function called outside component initialization");return x}function S(t){k().$$.on_mount.push(t)}const L=[],I=[],_=[],M=[],E=Promise.resolve();let A=!1;function j(){A||(A=!0,E.then(C))}function P(t){_.push(t)}const D=new Set;let T=0;function C(){const t=x;do{for(;T<L.length;){const t=L[T];T++,w(t),O(t.$$)}for(w(null),L.length=0,T=0;I.length;)I.pop()();for(let t=0;t<_.length;t+=1){const e=_[t];D.has(e)||(D.add(e),e())}_.length=0}while(L.length);for(;M.length;)M.pop()();A=!1,D.clear(),w(t)}function O(t){if(null!==t.fragment){t.update(),s(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(P)}}const B=new Set;function q(t,e){t&&t.i&&(B.delete(t),t.i(e))}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let z;function F(t,e){const n=t.$$;null!==n.fragment&&(s(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function N(t,e,n,i,c,d,p,h=[-1]){const m=x;w(t);const y=t.$$={fragment:null,ctx:null,props:d,update:r,not_equal:c,bound:o(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(m?m.$$.context:[])),callbacks:o(),dirty:h,skip_bound:!1,root:e.target||m.$$.root};p&&p(y.root);let g=!1;if(y.ctx=n?n(t,e.props||{},(e,n,...r)=>{const a=r.length?r[0]:n;return y.ctx&&c(y.ctx[e],y.ctx[e]=a)&&(!y.skip_bound&&y.bound[e]&&y.bound[e](a),g&&function(t,e){-1===t.$$.dirty[0]&&(L.push(t),j(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],y.update(),g=!0,s(y.before_update),y.fragment=!!i&&i(y.ctx),e.target){if(e.hydrate){u=!0;const t=(v=e.target,Array.from(v.childNodes));y.fragment&&y.fragment.l(t),t.forEach(f)}else y.fragment&&y.fragment.c();e.intro&&q(t.$$.fragment),function(t,e,n,r){const{fragment:o,on_mount:i,on_destroy:c,after_update:u}=t.$$;o&&o.m(e,n),r||P(()=>{const e=i.map(a).filter(l);c?c.push(...e):s(e),t.$$.on_mount=[]}),u.forEach(P)}(t,e.target,e.anchor,e.customElement),u=!1,C()}var v;w(m)}"function"==typeof HTMLElement&&(z=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){const{on_mount:t}=this.$$;this.$$.on_disconnect=t.map(a).filter(l);for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}disconnectedCallback(){s(this.$$.on_disconnect)}$destroy(){F(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!c(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}});class Z{$destroy(){F(this,1),this.$destroy=r}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(t){this.$$set&&!c(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function H(t){return function(t){if(Array.isArray(t))return R(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return R(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return R(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function R(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function U(t){return Array(t).fill().map((function(t,e){return e}))}function G(t,e,n){var r=e[0],a=e[1],o=(-t[2]-r*t[0])/t[1],s=(-t[2]-a*t[0])/t[1],l=[],i=[[r,n[0]],[r,n[1]],[a,n[1]],[a,n[0]],[r,n[0]]];if(o>n[1]&&s>n[1]){var c=[l,i];i=c[0],l=c[1]}else l=[[r,o],[a,s],[a,Math.min(o,n[0])],[r,Math.min(o,n[0])],[r,o]],i=[[r,o],[a,s],[a,Math.max(o,n[1])],[r,Math.max(o,n[1])],[r,o]];return{boundary:[[r,o],[a,s]],below:l,above:i}}var J={state:1,m:2147483648,a:1103515245,c:12345};function K(){return J.state=(J.a*J.state+J.c)%J.m,J.state/(J.m-1)}function Q(){for(var t=0,e=0;0===t;)t=K();for(;0===e;)e=K();return Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*e)}function V(t){return parseInt(t*K())%t}function W(t,e,n,r){var a=[],o=[];J.state=r;V(2),V(2);[-1,1].forEach((function(r){for(var s=K()+.5,l=K()+.5,i=Q()/2,c=U(t/2).map((function(){var t=[r*n+s*Q(),r*n+l*Q()];return t[1]+=i*t[0],t})),u=0;u<2;++u);a=a.concat(c),o=o.concat(U(t/2).map((function(){return 2*K()<e?-r:r})))}));for(var s=function(t){var e=[Math.min.apply(Math,H(a.map((function(e){return e[t]})))),Math.max.apply(Math,H(a.map((function(e){return e[t]}))))],n=e[0],r=e[1]-n;a=a.map((function(e){return e[t]=(e[t]-n)/r,e}))},l=0;l<2;++l)s(l);return a.map((function(t,e){return{x:t,y:o[e],subpops:[]}}))}function X(t){let e,n,a,o,s,l,i,c,u,x,w,k,S,L,I,_,M,E,A,j,P,D;return{c(){e=m("svg"),n=m("text"),a=y(t[6]),o=y(" / "),s=y(t[7]),l=y(" Poisons"),i=g(),c=h("canvas"),u=g(),x=h("button"),w=m("svg"),k=m("path"),S=g(),L=h("button"),I=m("svg"),_=m("path"),M=g(),E=h("button"),A=m("svg"),j=m("path"),P=g(),D=h("input"),v(n,"text-anchor","middle"),v(n,"x","50%"),v(n,"y","99%"),v(e,"width",Y),v(e,"height",tt),v(e,"class","overlay"),v(c,"width",Y),v(c,"height",tt),v(k,"d",et),v(k,"fill","#888"),v(w,"width","10"),v(w,"height","10"),v(w,"viewBox","0 0 10 10"),v(x,"class","button play-button"),$(x,"cursor","pointer"),v(_,"d",nt),v(_,"fill","#888"),v(I,"width","10"),v(I,"height","10"),v(I,"viewBox","0 0 10 10"),v(L,"class","button step-forward-button"),$(L,"cursor","pointer"),v(j,"d",rt),v(j,"fill","#888"),v(A,"width","10"),v(A,"height","10"),v(A,"viewBox","0 0 10 10"),v(E,"class","button step-back-button"),$(E,"cursor","pointer"),v(D,"type","range"),v(D,"class","slider attack-slider"),v(D,"min","0"),v(D,"max","1"),D.value="0"},m(r,f){p(r,e,f),d(e,n),d(n,a),d(n,o),d(n,s),d(n,l),t[11](e),p(r,i,f),p(r,c,f),t[12](c),p(r,u,f),p(r,x,f),d(x,w),d(w,k),t[13](x),p(r,S,f),p(r,L,f),d(L,I),d(I,_),t[14](L),p(r,M,f),p(r,E,f),d(E,A),d(A,j),t[15](E),p(r,P,f),p(r,D,f),t[16](D)},p(t,[e]){64&e&&b(a,t[6]),128&e&&b(s,t[7])},i:r,o:r,d(n){n&&f(e),t[11](null),n&&f(i),n&&f(c),t[12](null),n&&f(u),n&&f(x),t[13](null),n&&f(S),n&&f(L),t[14](null),n&&f(M),n&&f(E),t[15](null),n&&f(P),n&&f(D),t[16](null)}}}const Y=704,tt=600,et="M 0 0 L 0 10 L 3 10 L 3 0 Z M 6 0 L 6 10 L 9 10 L 9 0 Z",nt="M 0 0 L 3 0 L 9 5 L 3 10 L 0 10 L 0 10 L 6 5 L 0 0",rt="M 9 0 L 6 0 L 0 5 L 6 10 L 9 10 L 9 10 L 3 5 L 9 0";function at(t,e,n){let r,a,o,s,l,i,{initSpIndex:c}=e,{data:u}=e,{fID:d}=e,p=c,f=-1,h=0,m=[],y=u.attacks[p].poisons.length,g=Math.max(Math.min(15,parseInt((y+1)/10)),1),v=!0,b=!1;const $=()=>{let t=u.dset;const e=t=>t.x[0],c=t=>t.x[1],$=t=>null==t.subpops?1==t.y?"blue-poison":"red-poison":t.subpops.includes(p)?"target-point":t.subpops.includes(f)?"selected-point":1==t.y?"blue-point":"red-point",x=60,w=40,k=Y-w-40,S=tt-x-60;let L=d3.extent(t,e);L=[L[0]-.1,L[1]+.1];const I=d3.scaleLinear().domain(L).range([0,k]).nice();let _=d3.extent(t,c);_=[_[0]-.1,_[1]+.1];const M=d3.scaleLinear().domain(_).range([S,0]).nice(),E=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${w},${x})`),A=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${w},${x})`),j=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${w},${x})`),P=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${w},${x})`),D=d3.axisBottom(I).tickSize(-S).tickPadding(15),T=d3.axisLeft(M).tickSize(-k).tickPadding(10);A.append("g").call(T),A.append("g").call(D).attr("transform",`translate(0,${S})`);let C=d3.line().x(t=>I(t[0])).y(t=>M(t[1]));P.append("clipPath").attr("id","rect-clip"+d).append("rect").attr("x",0).attr("y",0).attr("width",k).attr("height",S);const O=P.append("line").style("stroke","darkgray").style("stroke-width",5).attr("clip-path",`url(#rect-clip${d})`),B=P.append("line").style("stroke","black").style("stroke-width",5).attr("clip-path",`url(#rect-clip${d})`),q=E.append("path").attr("clip-path",`url(#rect-clip${d})`),z=E.append("path").attr("clip-path",`url(#rect-clip${d})`);let F=A.selectAll("circle").data(t).enter().append("circle").attr("class",$).attr("cx",t=>I(e(t))).attr("cy",t=>M(c(t))),N=j.selectAll("path");const Z=()=>{N.attr("class",$),F.attr("class",$)},H=t=>{v=null==t?!v:t,d3.select(s).select("svg").select("path").attr("d",v?et:"M 0 0 L 10 5 L 0 10 Z")},R=()=>{v&&!b&&(n(2,o.value=(+o.value+1)%(y+1),o),K(!1),h==y&&(b=!0,setTimeout(()=>b=!1,1e3))),setTimeout(R,1e3/g)},U=()=>{let t,e=u.attacks[p].im_models[0],n=u.attacks[p].im_models[h];t=G(e,L,_),O.attr("x1",I(t.boundary[0][0])).attr("x2",I(t.boundary[1][0])).attr("y1",M(t.boundary[0][1])).attr("y2",M(t.boundary[1][1])),t=G(n,L,_),B.attr("x1",I(t.boundary[0][0])).attr("x2",I(t.boundary[1][0])).attr("y1",M(t.boundary[0][1])).attr("y2",M(t.boundary[1][1])),q.attr("d",C(t.below)).attr("class",n[1]<0?"area-blue":"area-red"),z.attr("d",C(t.above)).attr("class",n[1]<0?"area-red":"area-blue")},J=()=>{m.forEach((t,e)=>t.id=e.toString()),N=j.selectAll("path").data(m,t=>t.id),N.enter().append("path").attr("class",t=>$(t)).attr("d",d3.symbol().type(d3.symbolCross).size(600)).attr("transform",t=>`translate(${I(e(t))},${M(c(t))})`).transition().duration(200).attr("d",d3.symbol().type(d3.symbolCross).size(200)),N.exit().remove()},K=t=>{t&&H(!1),n(6,h=+o.value),m=u.attacks[p].poisons.slice(0,h),J(),U()};d3.select(r).on("mousemove",t=>{let e,[n,r]=d3.pointer(t);n-=w,r-=x,[n,r]=[I.invert(n),M.invert(r)],[e,f]=u.cluster_centers.map((t,e)=>{return[(a=t,o=[n,r],s=o[0]-a[0],l=o[1]-a[1],s*s+l*l),e];var a,o,s,l}).reduce((t,e)=>e[0]<t[0]?e:t),e>.05&&(f=-1),Z()}).on("click",t=>{-1!=f&&f!=p&&(p=f,n(7,y=u.attacks[p].poisons.length),g=Math.max(Math.min(15,parseInt((y+1)/10)),1),n(2,o.value=n(6,h=0),o),d3.select(o).attr("max",y),K(),Z())}).on("mouseout",t=>{f=-1,Z(),U()}),d3.select(o).attr("max",y).on("input",()=>K(!0)),d3.select(s).on("click",H),d3.select(l).on("click",()=>{n(2,o.value=Math.min(+o.value+1,y),o),K(!0)}),d3.select(i).on("click",()=>{n(2,o.value=Math.max(+o.value-1,0),o),K(!0)}),J(),J(),U(),setTimeout(R,1e3/g)};return S(()=>{$()}),t.$$set=t=>{"initSpIndex"in t&&n(8,c=t.initSpIndex),"data"in t&&n(9,u=t.data),"fID"in t&&n(10,d=t.fID)},[r,a,o,s,l,i,h,y,c,u,d,function(t){I[t?"unshift":"push"](()=>{a=t,n(1,a)})},function(t){I[t?"unshift":"push"](()=>{r=t,n(0,r)})},function(t){I[t?"unshift":"push"](()=>{s=t,n(3,s)})},function(t){I[t?"unshift":"push"](()=>{l=t,n(4,l)})},function(t){I[t?"unshift":"push"](()=>{i=t,n(5,i)})},function(t){I[t?"unshift":"push"](()=>{o=t,n(2,o)})}]}var ot=class extends Z{constructor(t){super(),N(this,t,at,X,i,{initSpIndex:8,data:9,fID:10})}};function st(t){let e,n,a;return{c(){e=m("svg"),n=g(),a=h("canvas"),v(e,"width",lt),v(e,"height",it),v(e,"class","overlay"),v(a,"width",lt),v(a,"height",it)},m(r,o){p(r,e,o),t[4](e),p(r,n,o),p(r,a,o),t[5](a)},p:r,i:r,o:r,d(r){r&&f(e),t[4](null),r&&f(n),r&&f(a),t[5](null)}}}const lt=984,it=450;function ct(t,e,n){let r,a,o,s,l,i,c,u,{fID:d}=e,{controls:p}=e,f=0,h=1,m=1,y=W(128,f,h,m),g=-1,v=[],b=[];const $=()=>{const t=t=>t.x[0],e=t=>t.x[1],n=t=>null==t.subpops?1==t.y?"blue-poison":"red-poison":t.subpops.includes(0)?"target-point":t.subpops.includes(g)?"selected-point":1==t.y?"blue-point":"red-point",$=5,x=40,w=lt-x-40,k=it-$-150;let S=[0,1],L=[S[0]-.1,S[1]+.1];const I=d3.scaleLinear().domain(L).range([0,w]).nice();let _=[-0,1],M=[_[0]-.1,_[1]+.1];const E=d3.scaleLinear().domain(M).range([k,0]).nice(),A=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${x},${$})`),j=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${x},${$})`),P=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${x},${$})`),D=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${x},${$})`),T=d3.select(a).attr("pointer-events","none").append("g").attr("transform",`translate(${x},${$})`),C=d3.axisBottom(I).tickSize(-k).tickPadding(15),O=d3.axisLeft(E).tickSize(-w).tickPadding(10);j.append("g").call(O),j.append("g").call(C).attr("transform",`translate(0,${k})`);d3.line().x(t=>I(t[0])).y(t=>E(t[1]));T.append("clipPath").attr("id","rect-clip"+d).append("rect").attr("x",0).attr("y",0).attr("width",w).attr("height",k);T.append("line").style("stroke","darkgray").style("stroke-width",5).attr("clip-path",`url(#rect-clip${d})`),T.append("line").style("stroke","black").style("stroke-width",5).attr("clip-path",`url(#rect-clip${d})`),A.append("path").attr("clip-path",`url(#rect-clip${d})`),A.append("path").attr("clip-path",`url(#rect-clip${d})`);let B=j.selectAll("circle").data(y).enter().append("circle").attr("class",n).attr("cx",e=>I(t(e))).attr("cy",t=>E(e(t))),q=P.selectAll("path"),z=D.selectAll("path");o=d3.select(p).select("#alphaSlider"),s=d3.select(p).select("#betaSlider"),l=d3.select(p).select("#seedSlider"),i=d3.select(p).selectAll("svg").select("#alphaText"),c=d3.select(p).selectAll("svg").select("#betaText"),u=d3.select(p).selectAll("svg").select("#seedText");const F=()=>{q.attr("class",n),B.attr("class",n)},N=r=>{switch(r){case"alpha":h=.25*+o.node().value,i.text("Class Separation α = "+h.toFixed(2));break;case"beta":f=.1*+s.node().value,c.text("Random Label Fraction β = "+f.toFixed(2));break;case"seed":m=+l.node().value,u.text("Dataset Seed s = "+m)}y=W(128,f,h,m),B=j.selectAll("circle").data(y),B.data(y).attr("class",n).transition().duration(250).attr("cx",e=>I(t(e))).attr("cy",t=>E(e(t))),B.exit().remove()};d3.select(r).on("mousemove",r=>{let[a,o]=d3.pointer(r);a-=x,o-=$,[a,o]=[I.invert(a),E.invert(o)],b=a>=S[0]&&a<=S[1]&&o>=_[0]&&o<=_[1]?[{x:[a,o],y:1}]:[],z=D.selectAll("path").data(b),z.exit().remove(),z.attr("d",d3.symbol().type(d3.symbolCross).size(200)).attr("transform",n=>`translate(${I(t(n))},${E(e(n))})`).enter().append("path").attr("class",n).attr("d",d3.symbol().type(d3.symbolCross).size(200)).attr("transform",n=>`translate(${I(t(n))},${E(e(n))})`),F()}).on("click",r=>{let[a,o]=d3.pointer(r);a-=x,o-=$,[a,o]=[I.invert(a),E.invert(o)];let s=[a,o];a>=S[0]&&a<=S[1]&&o>=_[0]&&o<=_[1]&&(v.push({x:s,y:1}),q=P.selectAll("path").data(v),q.enter().append("path").attr("class",n).attr("d",d3.symbol().type(d3.symbolCross).size(200)).attr("transform",n=>`translate(${I(t(n))},${E(e(n))})`)),console.log(v)}).on("mouseout",t=>{g=-1,F(),z.data([]).exit().remove()}),o.on("input",()=>N("alpha")),s.on("input",()=>N("beta")),l.on("change",()=>N("seed"))};return S(()=>{$()}),t.$$set=t=>{"fID"in t&&n(2,d=t.fID),"controls"in t&&n(3,p=t.controls)},[r,a,d,p,function(t){I[t?"unshift":"push"](()=>{a=t,n(1,a)})},function(t){I[t?"unshift":"push"](()=>{r=t,n(0,r)})}]}var ut=class extends Z{constructor(t){super(),N(this,t,ct,st,i,{fID:2,controls:3})}},dt=0,pt=document.getElementById("svelte-poison-demo-dfigure");pt.addEventListener("ready",(function(){var t=pt.querySelector("#svelte-demo-target"),e=pt.querySelector("#svelte-demo-controls");new ut({target:t,props:{fID:dt++,controls:e}})}));var ft=document.getElementById("svelte-scatterplot-dfigure-example1");ft.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/1.00-0.1-5.json").then((function(t){return t.json()})).then((function(t){var e=ft.querySelector("#svelte-scatterplot-target");new ot({target:e,props:{data:t,initSpIndex:6,fID:dt++}})}))}));var ht=document.getElementById("svelte-scatterplot-dfigure-example2");ht.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/2.00-1.0-4.json").then((function(t){return t.json()})).then((function(t){var e=ht.querySelector("#svelte-scatterplot-target");new ot({target:e,props:{data:t,initSpIndex:6,fID:dt++}})}))}));var mt=document.getElementById("svelte-scatterplot-dfigure-example3");mt.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/0.00-0.0-4.json").then((function(t){return t.json()})).then((function(t){var e=mt.querySelector("#svelte-scatterplot-target");new ot({target:e,props:{data:t,initSpIndex:8,fID:dt++}})}))}));var yt=document.getElementById("svelte-scatterplot-dfigure-example4");yt.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/2.00-0.0-4.json").then((function(t){return t.json()})).then((function(t){var e=yt.querySelector("#svelte-scatterplot-target");new ot({target:e,props:{data:t,initSpIndex:4,fID:dt++}})}))}));var gt=document.getElementById("svelte-scatterplot-dfigure-example5");gt.addEventListener("ready",(function(){fetch("https://escottrose01.github.io/poisoning-data/data/2.00-0.0-4.json").then((function(t){return t.json()})).then((function(t){var e=gt.querySelector("#svelte-scatterplot-target");new ot({target:e,props:{data:t,initSpIndex:3,fID:dt++}})}))}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,